
freertos_cmsis1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c8c  08007c8c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c8c  08007c8c  00008c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c94  08007c94  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c98  08007c98  00008c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007c9c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00004284  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200042f0  200042f0  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014cee  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4f  00000000  00000000  0001dd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  000218e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1b  00000000  00000000  00022ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f38  00000000  00000000  00023bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017506  00000000  00000000  00047af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65e1  00000000  00000000  0005eff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001355da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059dc  00000000  00000000  00135620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a54 	.word	0x08007a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007a54 	.word	0x08007a54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96a 	b.w	8000e08 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	460c      	mov	r4, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14e      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b58:	4694      	mov	ip, r2
 8000b5a:	458c      	cmp	ip, r1
 8000b5c:	4686      	mov	lr, r0
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	d962      	bls.n	8000c2a <__udivmoddi4+0xde>
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	4319      	orrs	r1, r3
 8000b76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb04 f106 	mul.w	r1, r4, r6
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ba2:	f080 8112 	bcs.w	8000dca <__udivmoddi4+0x27e>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 810f 	bls.w	8000dca <__udivmoddi4+0x27e>
 8000bac:	3c02      	subs	r4, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bba:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb00 f606 	mul.w	r6, r0, r6
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x94>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd2:	f080 80fc 	bcs.w	8000dce <__udivmoddi4+0x282>
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	f240 80f9 	bls.w	8000dce <__udivmoddi4+0x282>
 8000bdc:	4463      	add	r3, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11d      	cbz	r5, 8000bf2 <__udivmoddi4+0xa6>
 8000bea:	40d3      	lsrs	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d905      	bls.n	8000c06 <__udivmoddi4+0xba>
 8000bfa:	b10d      	cbz	r5, 8000c00 <__udivmoddi4+0xb4>
 8000bfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4608      	mov	r0, r1
 8000c04:	e7f5      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c06:	fab3 f183 	clz	r1, r3
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d146      	bne.n	8000c9c <__udivmoddi4+0x150>
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xcc>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	f0c0 80f0 	bcc.w	8000df8 <__udivmoddi4+0x2ac>
 8000c18:	1a86      	subs	r6, r0, r2
 8000c1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d0e6      	beq.n	8000bf2 <__udivmoddi4+0xa6>
 8000c24:	e9c5 6300 	strd	r6, r3, [r5]
 8000c28:	e7e3      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f040 8090 	bne.w	8000d50 <__udivmoddi4+0x204>
 8000c30:	eba1 040c 	sub.w	r4, r1, ip
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb07 f006 	mul.w	r0, r7, r6
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x11c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x11a>
 8000c60:	4298      	cmp	r0, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c66:	4626      	mov	r6, r4
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	fa1f f38e 	uxth.w	r3, lr
 8000c6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c72:	fb08 4410 	mls	r4, r8, r0, r4
 8000c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	429f      	cmp	r7, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x148>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x146>
 8000c8c:	429f      	cmp	r7, r3
 8000c8e:	f200 80b0 	bhi.w	8000df2 <__udivmoddi4+0x2a6>
 8000c92:	4620      	mov	r0, r4
 8000c94:	1bdb      	subs	r3, r3, r7
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0x9c>
 8000c9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cac:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb0:	ea43 030c 	orr.w	r3, r3, ip
 8000cb4:	40f4      	lsrs	r4, r6
 8000cb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cba:	0c38      	lsrs	r0, r7, #16
 8000cbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc4:	fa1f fc87 	uxth.w	ip, r7
 8000cc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000ccc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd4:	45a1      	cmp	r9, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x1a6>
 8000cdc:	193c      	adds	r4, r7, r4
 8000cde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ce2:	f080 8084 	bcs.w	8000dee <__udivmoddi4+0x2a2>
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	f240 8081 	bls.w	8000dee <__udivmoddi4+0x2a2>
 8000cec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	eba4 0409 	sub.w	r4, r4, r9
 8000cf6:	fa1f f983 	uxth.w	r9, r3
 8000cfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000d02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x1d2>
 8000d0e:	193c      	adds	r4, r7, r4
 8000d10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d14:	d267      	bcs.n	8000de6 <__udivmoddi4+0x29a>
 8000d16:	45a4      	cmp	ip, r4
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0x29a>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	443c      	add	r4, r7
 8000d1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d22:	fba0 9302 	umull	r9, r3, r0, r2
 8000d26:	eba4 040c 	sub.w	r4, r4, ip
 8000d2a:	429c      	cmp	r4, r3
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	469c      	mov	ip, r3
 8000d30:	d351      	bcc.n	8000dd6 <__udivmoddi4+0x28a>
 8000d32:	d04e      	beq.n	8000dd2 <__udivmoddi4+0x286>
 8000d34:	b155      	cbz	r5, 8000d4c <__udivmoddi4+0x200>
 8000d36:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d42:	40cb      	lsrs	r3, r1
 8000d44:	431e      	orrs	r6, r3
 8000d46:	40cc      	lsrs	r4, r1
 8000d48:	e9c5 6400 	strd	r6, r4, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e750      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f103 	lsr.w	r1, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d60:	4094      	lsls	r4, r2
 8000d62:	430c      	orrs	r4, r1
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d6c:	fa1f f78c 	uxth.w	r7, ip
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3110 	mls	r1, r8, r0, r3
 8000d78:	0c23      	lsrs	r3, r4, #16
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f107 	mul.w	r1, r0, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x24c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d8e:	d22c      	bcs.n	8000dea <__udivmoddi4+0x29e>
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d92a      	bls.n	8000dea <__udivmoddi4+0x29e>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da0:	fb08 3311 	mls	r3, r8, r1, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb01 f307 	mul.w	r3, r1, r7
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x276>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db8:	d213      	bcs.n	8000de2 <__udivmoddi4+0x296>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d911      	bls.n	8000de2 <__udivmoddi4+0x296>
 8000dbe:	3902      	subs	r1, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc8:	e739      	b.n	8000c3e <__udivmoddi4+0xf2>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	e6f0      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e706      	b.n	8000be0 <__udivmoddi4+0x94>
 8000dd2:	45c8      	cmp	r8, r9
 8000dd4:	d2ae      	bcs.n	8000d34 <__udivmoddi4+0x1e8>
 8000dd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7a8      	b.n	8000d34 <__udivmoddi4+0x1e8>
 8000de2:	4631      	mov	r1, r6
 8000de4:	e7ed      	b.n	8000dc2 <__udivmoddi4+0x276>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e799      	b.n	8000d1e <__udivmoddi4+0x1d2>
 8000dea:	4630      	mov	r0, r6
 8000dec:	e7d4      	b.n	8000d98 <__udivmoddi4+0x24c>
 8000dee:	46d6      	mov	lr, sl
 8000df0:	e77f      	b.n	8000cf2 <__udivmoddi4+0x1a6>
 8000df2:	4463      	add	r3, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e74d      	b.n	8000c94 <__udivmoddi4+0x148>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e70f      	b.n	8000c20 <__udivmoddi4+0xd4>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	e730      	b.n	8000c68 <__udivmoddi4+0x11c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	@ (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0

	// Enable USART3 clock
	__HAL_RCC_USART3_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001028 <UART_Init+0x108>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001028 <UART_Init+0x108>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b3c      	ldr	r3, [pc, #240]	@ (8001028 <UART_Init+0x108>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]

	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b38      	ldr	r3, [pc, #224]	@ (8001028 <UART_Init+0x108>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a37      	ldr	r2, [pc, #220]	@ (8001028 <UART_Init+0x108>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <UART_Init+0x108>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

	// Configure USART3 TX and RX pins
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000f6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f80:	2307      	movs	r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4828      	ldr	r0, [pc, #160]	@ (800102c <UART_Init+0x10c>)
 8000f8c:	f001 fbae 	bl	80026ec <HAL_GPIO_Init>

	// Configure USART3
	USART3->CR1 &= ~USART_CR1_UE; // Disable USART3
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <UART_Init+0x110>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <UART_Init+0x110>)
 8000f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f9a:	60d3      	str	r3, [r2, #12]

	// Communication bidirectionnelle, 8 bits de donnée, 1 bit de stop, pas de parité
	USART3->CR1 &= ~USART_CR1_M; // 8 bits de donnée
 8000f9c:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <UART_Init+0x110>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	4a23      	ldr	r2, [pc, #140]	@ (8001030 <UART_Init+0x110>)
 8000fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fa6:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~USART_CR1_PCE; // Pas de parité
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <UART_Init+0x110>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <UART_Init+0x110>)
 8000fae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fb2:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_STOP; // 1 bit de stop
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <UART_Init+0x110>)
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <UART_Init+0x110>)
 8000fba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fbe:	6113      	str	r3, [r2, #16]

	USART3->CR1 |= USART_CR1_RXNEIE; // Activate RXNIE for interruptions
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <UART_Init+0x110>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <UART_Init+0x110>)
 8000fc6:	f043 0320 	orr.w	r3, r3, #32
 8000fca:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_LBDL; // 10 bits for break
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <UART_Init+0x110>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <UART_Init+0x110>)
 8000fd2:	f023 0320 	bic.w	r3, r3, #32
 8000fd6:	6113      	str	r3, [r2, #16]
	// Vitesse de communication de 9600bauds et oversampling à 16
	// BRR = fclk / (16 * baudrate)
	// Ici, fclk = 84MHz, baudrate = 9600
	// BRR = 84MHz / (16 * 9600) = 546.875
	// Integer part = 546, Fractional part = 0.875 * 16 = 14
	USART3->BRR = 0x00001117; // 273d (546d = 0x222)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <UART_Init+0x110>)
 8000fda:	f241 1217 	movw	r2, #4375	@ 0x1117
 8000fde:	609a      	str	r2, [r3, #8]
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE; // Enable Tx and Rx
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <UART_Init+0x110>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <UART_Init+0x110>)
 8000fe6:	f043 030c 	orr.w	r3, r3, #12
 8000fea:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_UE;
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <UART_Init+0x110>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8001030 <UART_Init+0x110>)
 8000ff2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ff6:	60d3      	str	r3, [r2, #12]

	HAL_Delay(1); // Attente de 1ms
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f001 fa71 	bl	80024e0 <HAL_Delay>
	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000ffe:	f7ff ff05 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8001002:	4603      	mov	r3, r0
 8001004:	2200      	movs	r2, #0
 8001006:	2106      	movs	r1, #6
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff55 	bl	8000eb8 <NVIC_EncodePriority>
 800100e:	4603      	mov	r3, r0
 8001010:	4619      	mov	r1, r3
 8001012:	2027      	movs	r0, #39	@ 0x27
 8001014:	f7ff ff26 	bl	8000e64 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 8001018:	2027      	movs	r0, #39	@ 0x27
 800101a:	f7ff ff05 	bl	8000e28 <__NVIC_EnableIRQ>

	//
}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400
 8001030:	40004800 	.word	0x40004800

08001034 <sync_break>:
	USART3->CR1 |= USART_CR1_RXNEIE;
}

/*--- Transmit LIN Request ---*/
void sync_break(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	// Send break character
	USART3->CR1 |= USART_CR1_SBK; // Send break
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <sync_break+0x20>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <sync_break+0x20>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	60d3      	str	r3, [r2, #12]
	//while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete
//	serial_puts("SYNCH_BREAK: Sent break");
//	newLine();
    // Send Sync field (0x55)
    USART3->DR = 0x55;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <sync_break+0x20>)
 8001046:	2255      	movs	r2, #85	@ 0x55
 8001048:	605a      	str	r2, [r3, #4]
//	serial_puts("SYNCH_BREAK: Sent synch");
//	newLine();
    //while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete

}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40004800 	.word	0x40004800

08001058 <SendHeader>:

void SendHeader(LINMSG *msg)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	sync_break(); // send break and synch
 8001060:	f7ff ffe8 	bl	8001034 <sync_break>
	UART_PutChar(msg->ID); // send Id
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f819 	bl	80010a0 <UART_PutChar>
//	serial_puts("HEADER: Sent header");
//	newLine();
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <SendRequest>:

void SendRequest(LINMSG *msg)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SendRequest+0x24>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SendRequest+0x24>)
 8001086:	f043 0320 	orr.w	r3, r3, #32
 800108a:	60d3      	str	r3, [r2, #12]
	SendHeader(msg);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffe3 	bl	8001058 <SendHeader>
	// activate interrupt
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004800 	.word	0x40004800

080010a0 <UART_PutChar>:


/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	LINMSG msg;
	msg.ID = 0x67;
 80010aa:	2367      	movs	r3, #103	@ 0x67
 80010ac:	733b      	strb	r3, [r7, #12]
	msg.data[0] = data;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	73bb      	strb	r3, [r7, #14]
	msg.length = 8;
 80010b2:	2308      	movs	r3, #8
 80010b4:	737b      	strb	r3, [r7, #13]

	//Load data to register
	USART3->DR = data;
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <UART_PutChar+0x48>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 80010bc:	bf00      	nop
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <UART_PutChar+0x48>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f9      	beq.n	80010be <UART_PutChar+0x1e>
	while(!(USART3->SR & 0x00000040));
 80010ca:	bf00      	nop
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <UART_PutChar+0x48>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f9      	beq.n	80010cc <UART_PutChar+0x2c>

}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40004800 	.word	0x40004800

080010ec <CAN_config_filter>:
//    CAN1->FMR &= 0x0;
//
//}
//
void CAN_config_filter(uint8_t IDE, uint32_t Filter_ID_high, uint32_t Filter_ID_low,
  uint32_t Filter_Mask_high, uint32_t Filter_Mask_low) {
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
  // We will use filter 0 for 0x100 to 0x10F (Mask mode)
  // Filter 1 for 0x200 and 0x205 (ID List mode)
  // ////////////////////////////////////////////////////////

  // Deactivate Filter 0 and 1
  CAN1 -> FA1R &= 0xFFFFFFFC;
 80010fc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <CAN_config_filter+0x100>)
 80010fe:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001102:	4a3a      	ldr	r2, [pc, #232]	@ (80011ec <CAN_config_filter+0x100>)
 8001104:	f023 0303 	bic.w	r3, r3, #3
 8001108:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // initialize mode for all filters
  CAN1 -> FMR |= 0x1;
 800110c:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <CAN_config_filter+0x100>)
 800110e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001112:	4a36      	ldr	r2, [pc, #216]	@ (80011ec <CAN_config_filter+0x100>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  if (IDE == 0) {
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d12c      	bne.n	800117c <CAN_config_filter+0x90>
    // ///////////////////////////
    // Filters with 32 bits mode//
    // ///////////////////////////

    CAN1 -> FS1R |= 0x00000003; // 32 bits filter for filter 0 ,1
 8001122:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <CAN_config_filter+0x100>)
 8001124:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001128:	4a30      	ldr	r2, [pc, #192]	@ (80011ec <CAN_config_filter+0x100>)
 800112a:	f043 0303 	orr.w	r3, r3, #3
 800112e:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8001132:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <CAN_config_filter+0x100>)
 8001134:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001138:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <CAN_config_filter+0x100>)
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <CAN_config_filter+0x100>)
 8001144:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001148:	4a28      	ldr	r2, [pc, #160]	@ (80011ec <CAN_config_filter+0x100>)
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    /*
     **/
    CAN1 -> sFilterRegister[0].FR1 = (Filter_ID_high << 21); //ID
 8001152:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <CAN_config_filter+0x100>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
    CAN1 -> sFilterRegister[0].FR2 = (Filter_Mask_high << 21); // Mask
 800115c:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <CAN_config_filter+0x100>)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	055b      	lsls	r3, r3, #21
 8001162:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244

    CAN1 -> sFilterRegister[1].FR1 = (Filter_ID_low << 21); //ID
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <CAN_config_filter+0x100>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	055b      	lsls	r3, r3, #21
 800116c:	f8c2 3248 	str.w	r3, [r2, #584]	@ 0x248
    CAN1 -> sFilterRegister[1].FR2 = (Filter_Mask_low << 21); // ID
 8001170:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <CAN_config_filter+0x100>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	055b      	lsls	r3, r3, #21
 8001176:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 800117a:	e020      	b.n	80011be <CAN_config_filter+0xd2>
    //CAN1->sFilterRegister[1].FR2 |= 0x2; //ID with RTR = 1

  } else {
    // Filters with dual 16 bits config
    CAN1 -> FS1R &= 0xFFFFFFC; // Dual 16 bits filter for filter 0 ,1
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <CAN_config_filter+0x100>)
 800117e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001182:	4a1a      	ldr	r2, [pc, #104]	@ (80011ec <CAN_config_filter+0x100>)
 8001184:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001188:	f023 0303 	bic.w	r3, r3, #3
 800118c:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <CAN_config_filter+0x100>)
 8001192:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001196:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <CAN_config_filter+0x100>)
 8001198:	f023 0303 	bic.w	r3, r3, #3
 800119c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <CAN_config_filter+0x100>)
 80011a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <CAN_config_filter+0x100>)
 80011a8:	f023 0303 	bic.w	r3, r3, #3
 80011ac:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    //CAN1->sFilterRegister[0].FR1 =  (Filter_ID_low << 5) ; //((Filter_Mask_low <<5) <<16) || (Filter_ID_low << 5); //ID
    CAN1 -> sFilterRegister[0].FR1 = (Filter_Mask_low << 16) | (Filter_ID_low); //((Filter_Mask_low <<5) <<16); // Mask
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	041a      	lsls	r2, r3, #16
 80011b4:	490d      	ldr	r1, [pc, #52]	@ (80011ec <CAN_config_filter+0x100>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	f8c1 3240 	str.w	r3, [r1, #576]	@ 0x240

  }

  // Activate Filter 0 and 1
  CAN1 -> FA1R |= 0x00000003;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <CAN_config_filter+0x100>)
 80011c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <CAN_config_filter+0x100>)
 80011c6:	f043 0303 	orr.w	r3, r3, #3
 80011ca:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // Leave Filter init
  CAN1 -> FMR &= 0xFFFFFFFE;
 80011ce:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <CAN_config_filter+0x100>)
 80011d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011d4:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <CAN_config_filter+0x100>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40006400 	.word	0x40006400

080011f0 <CAN_config>:

void CAN_config(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
    0
  };

  //EnableCANCLock
  __HAL_RCC_CAN1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <CAN_config+0xf8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a36      	ldr	r2, [pc, #216]	@ (80012e8 <CAN_config+0xf8>)
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <CAN_config+0xf8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]

  //ConfigureGPIOs
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <CAN_config+0xf8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a2f      	ldr	r2, [pc, #188]	@ (80012e8 <CAN_config+0xf8>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <CAN_config+0xf8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  /*CAN1GPIOConfiguration
  PB8------>CAN1_RX
  PB9------>CAN1_TX*/

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800123e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001250:	2309      	movs	r3, #9
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	4824      	ldr	r0, [pc, #144]	@ (80012ec <CAN_config+0xfc>)
 800125c:	f001 fa46 	bl	80026ec <HAL_GPIO_Init>

  //ClearSleepbittowakeup
  CAN1 -> MCR &= 0xFFFFFFFD;
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <CAN_config+0x100>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <CAN_config+0x100>)
 8001266:	f023 0302 	bic.w	r3, r3, #2
 800126a:	6013      	str	r3, [r2, #0]
  //WaitforCANtowakeup
  while (CAN1 -> MSR & 0x00000002);
 800126c:	bf00      	nop
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <CAN_config+0x100>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <CAN_config+0x7e>
  //Switchtoconfigmode
  CAN1 -> MCR |= 0x00000001;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <CAN_config+0x100>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <CAN_config+0x100>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6013      	str	r3, [r2, #0]
  //Waitforconfigmod
  while (!(CAN1 -> MSR & 0x1));
 8001286:	bf00      	nop
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <CAN_config+0x100>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f9      	beq.n	8001288 <CAN_config+0x98>

  //Setconfig
  CAN1 -> MCR &= 0x00000001;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <CAN_config+0x100>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <CAN_config+0x100>)
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

  CAN1 -> BTR = 0x00250010; //Par ordre : loop back activé
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <CAN_config+0x100>)
 80012a2:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <CAN_config+0x104>)
 80012a4:	61da      	str	r2, [r3, #28]

  //INTERRUPTION//
  //Set Interrupt RXFIFO0 (FMPIE0) and TX box empty

  CAN1 -> IER |= 0x2;
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <CAN_config+0x100>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <CAN_config+0x100>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6153      	str	r3, [r2, #20]
  ///Activate Interrupton NVIC
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2106      	movs	r1, #6
 80012b6:	2014      	movs	r0, #20
 80012b8:	f001 f9ee 	bl	8002698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80012bc:	2014      	movs	r0, #20
 80012be:	f001 fa07 	bl	80026d0 <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_SetPriority(CAN1_TX_IRQn,0,2);
  //HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
  ////////////////
  // Go to normal mode
  CAN1 -> MCR &= 0xFFFFFFFE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <CAN_config+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <CAN_config+0x100>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]
  //Wait f o r normal mod
  while (CAN1 -> MSR & 0x1);
 80012ce:	bf00      	nop
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <CAN_config+0x100>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f9      	bne.n	80012d0 <CAN_config+0xe0>

  //      initializeBuffer(&farriere_portA);
  //      initializeBuffer(&farriere_portB);
  //      initializeBuffer(&farriere_portC);
  //      initializeBuffer(&etat_commodo);
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40006400 	.word	0x40006400
 80012f4:	00250010 	.word	0x00250010

080012f8 <CAN_readFrame>:
    CAN1 -> sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
    CAN1 -> sTxMailBox[0].TIR |= 1; //Sendthemessage
  } else return (0);
}

uint8_t CAN_readFrame() {
 80012f8:	b490      	push	{r4, r7}
 80012fa:	af00      	add	r7, sp, #0
  CAN_RxMessage.STDID = CAN1 -> sFIFOMailBox[0].RIR >> 3;
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <CAN_readFrame+0x104>)
 80012fe:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <CAN_readFrame+0x108>)
 8001306:	6013      	str	r3, [r2, #0]
  CAN_RxMessage.RTR = (CAN1 -> sFIFOMailBox[0].RIR >> 1) & 0x1;
 8001308:	4b3c      	ldr	r3, [pc, #240]	@ (80013fc <CAN_readFrame+0x104>)
 800130a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <CAN_readFrame+0x108>)
 800131a:	711a      	strb	r2, [r3, #4]
  CAN_RxMessage.DLC = CAN1 -> sFIFOMailBox[0].RDTR & 0xF;
 800131c:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <CAN_readFrame+0x104>)
 800131e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <CAN_readFrame+0x108>)
 800132c:	715a      	strb	r2, [r3, #5]
  CAN_RxMessage.data[0] = CAN1 -> sFIFOMailBox[0].RDLR & 0xFF;
 800132e:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <CAN_readFrame+0x104>)
 8001330:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <CAN_readFrame+0x108>)
 8001338:	719a      	strb	r2, [r3, #6]
  CAN_RxMessage.data[1] = (CAN1 -> sFIFOMailBox[0].RDLR >> 8) & 0xFF;
 800133a:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <CAN_readFrame+0x104>)
 800133c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <CAN_readFrame+0x108>)
 8001346:	71da      	strb	r2, [r3, #7]
  CAN_RxMessage.data[2] = (CAN1 -> sFIFOMailBox[0].RDLR >> 16) & 0xFF;
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <CAN_readFrame+0x104>)
 800134a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800134e:	0c1b      	lsrs	r3, r3, #16
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <CAN_readFrame+0x108>)
 8001354:	721a      	strb	r2, [r3, #8]
  CAN_RxMessage.data[3] = (CAN1 -> sFIFOMailBox[0].RDLR >> 24) & 0xFF;
 8001356:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <CAN_readFrame+0x104>)
 8001358:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800135c:	0e1b      	lsrs	r3, r3, #24
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <CAN_readFrame+0x108>)
 8001362:	725a      	strb	r2, [r3, #9]
  CAN_RxMessage.data[4] = CAN1 -> sFIFOMailBox[0].RDHR & 0xFF;
 8001364:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <CAN_readFrame+0x104>)
 8001366:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <CAN_readFrame+0x108>)
 800136e:	729a      	strb	r2, [r3, #10]
  CAN_RxMessage.data[5] = (CAN1 -> sFIFOMailBox[0].RDHR >> 8) & 0xFF;
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <CAN_readFrame+0x104>)
 8001372:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <CAN_readFrame+0x108>)
 800137c:	72da      	strb	r2, [r3, #11]
  CAN_RxMessage.data[6] = (CAN1 -> sFIFOMailBox[0].RDHR >> 16) & 0xFF;
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <CAN_readFrame+0x104>)
 8001380:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <CAN_readFrame+0x108>)
 800138a:	731a      	strb	r2, [r3, #12]
  CAN_RxMessage.data[7] = (CAN1 -> sFIFOMailBox[0].RDHR >> 24) & 0xFF;
 800138c:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <CAN_readFrame+0x104>)
 800138e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <CAN_readFrame+0x108>)
 8001398:	735a      	strb	r2, [r3, #13]

  CAN_RxMessages[total_received] = CAN_RxMessage;
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <CAN_readFrame+0x10c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <CAN_readFrame+0x110>)
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <CAN_readFrame+0x108>)
 80013a6:	461c      	mov	r4, r3
 80013a8:	4613      	mov	r3, r2
 80013aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  total_received = (total_received + 1) % BUFFER_LIMIT;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <CAN_readFrame+0x10c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1c59      	adds	r1, r3, #1
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <CAN_readFrame+0x114>)
 80013b8:	fb83 2301 	smull	r2, r3, r3, r1
 80013bc:	109a      	asrs	r2, r3, #2
 80013be:	17cb      	asrs	r3, r1, #31
 80013c0:	1ad2      	subs	r2, r2, r3
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	1aca      	subs	r2, r1, r3
 80013cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <CAN_readFrame+0x10c>)
 80013ce:	601a      	str	r2, [r3, #0]
  can_read_data = 1;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <CAN_readFrame+0x118>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
  if (total_received >= (BUFFER_LIMIT - 3)) { //== read_index
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <CAN_readFrame+0x10c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	dd02      	ble.n	80013e4 <CAN_readFrame+0xec>
    emergency_data_read = 1;
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <CAN_readFrame+0x11c>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
  }

  CAN1 -> RF0R |= 0x20;
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <CAN_readFrame+0x104>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <CAN_readFrame+0x104>)
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	60d3      	str	r3, [r2, #12]

}
 80013f0:	bf00      	nop
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc90      	pop	{r4, r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40006400 	.word	0x40006400
 8001400:	2000034c 	.word	0x2000034c
 8001404:	20000088 	.word	0x20000088
 8001408:	2000035c 	.word	0x2000035c
 800140c:	66666667 	.word	0x66666667
 8001410:	200003fd 	.word	0x200003fd
 8001414:	200003fc 	.word	0x200003fc

08001418 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <vApplicationGetIdleTaskMemory+0x2c>)
 8001428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <vApplicationGetIdleTaskMemory+0x30>)
 800142e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000008c 	.word	0x2000008c
 8001448:	200000e0 	.word	0x200000e0

0800144c <init_ACC>:
 * It sets the accelerometer to 100Hz, activates all axes, and configures interrupts wich are
 * triggered on the INT1 pin of the LIS3DSH.
 * 
 * @return void
 */
void init_ACC(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 8001450:	20a4      	movs	r0, #164	@ 0xa4
 8001452:	f000 fd5b 	bl	8001f0c <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001456:	20a4      	movs	r0, #164	@ 0xa4
 8001458:	f000 fd58 	bl	8001f0c <SPIread>

    //CTRL_REG4
    SPIwrite(CTRL_REG4, 0x67); // 100 Hz, tous les axes actifs
 800145c:	2167      	movs	r1, #103	@ 0x67
 800145e:	2020      	movs	r0, #32
 8001460:	f000 fd0c 	bl	8001e7c <SPIwrite>

    //CTRL_REG5
    SPIwrite(CTRL_REG5, 0x00);//40h
 8001464:	2100      	movs	r1, #0
 8001466:	2024      	movs	r0, #36	@ 0x24
 8001468:	f000 fd08 	bl	8001e7c <SPIwrite>

    //INTERRUPT
    SPIwrite(CTRL_REG3, 0x68); // Enable DRDY interrupt on INT1 + IEL
 800146c:	2168      	movs	r1, #104	@ 0x68
 800146e:	2023      	movs	r0, #35	@ 0x23
 8001470:	f000 fd04 	bl	8001e7c <SPIwrite>

    //SM1 config
    SPIwrite(THRS_SM1_1, 0x50); // Threshold for SM1 (1.25G)
 8001474:	2150      	movs	r1, #80	@ 0x50
 8001476:	2057      	movs	r0, #87	@ 0x57
 8001478:	f000 fd00 	bl	8001e7c <SPIwrite>
    SPIwrite(MASK1_A, 0x08); // Mask SM1 interrupt (Z axis)
 800147c:	2108      	movs	r1, #8
 800147e:	205a      	movs	r0, #90	@ 0x5a
 8001480:	f000 fcfc 	bl	8001e7c <SPIwrite>
    SPIwrite(MASK1_B, 0x08);
 8001484:	2108      	movs	r1, #8
 8001486:	2059      	movs	r0, #89	@ 0x59
 8001488:	f000 fcf8 	bl	8001e7c <SPIwrite>
    SPIwrite(SETT1, 0x23);
 800148c:	2123      	movs	r1, #35	@ 0x23
 800148e:	205b      	movs	r0, #91	@ 0x5b
 8001490:	f000 fcf4 	bl	8001e7c <SPIwrite>
    //ST1x config
    SPIwrite(0x40,0x05);// NOP next: > THRS1
 8001494:	2105      	movs	r1, #5
 8001496:	2040      	movs	r0, #64	@ 0x40
 8001498:	f000 fcf0 	bl	8001e7c <SPIwrite>
    SPIwrite(0x41,0x11);// Continue
 800149c:	2111      	movs	r1, #17
 800149e:	2041      	movs	r0, #65	@ 0x41
 80014a0:	f000 fcec 	bl	8001e7c <SPIwrite>
    SPIwrite(CTRL_REG1, 0x01); // Enable inertial interrupt
 80014a4:	2101      	movs	r1, #1
 80014a6:	2021      	movs	r0, #33	@ 0x21
 80014a8:	f000 fce8 	bl	8001e7c <SPIwrite>

    //SM2 config
    SPIwrite(THRS_SM2_1, 0x35); // Threshold for SM2 (0.8G)
 80014ac:	2135      	movs	r1, #53	@ 0x35
 80014ae:	2077      	movs	r0, #119	@ 0x77
 80014b0:	f000 fce4 	bl	8001e7c <SPIwrite>
    SPIwrite(MASK2_A, 0x08); // Mask SM2 interrupt (Z axis)
 80014b4:	2108      	movs	r1, #8
 80014b6:	207a      	movs	r0, #122	@ 0x7a
 80014b8:	f000 fce0 	bl	8001e7c <SPIwrite>
    SPIwrite(MASK2_B, 0x08);
 80014bc:	2108      	movs	r1, #8
 80014be:	2079      	movs	r0, #121	@ 0x79
 80014c0:	f000 fcdc 	bl	8001e7c <SPIwrite>
    SPIwrite(SETT2, 0x23);
 80014c4:	2123      	movs	r1, #35	@ 0x23
 80014c6:	207b      	movs	r0, #123	@ 0x7b
 80014c8:	f000 fcd8 	bl	8001e7c <SPIwrite>
    //ST2x config
    SPIwrite(0x60,0x07);// NOP next: < THRS1
 80014cc:	2107      	movs	r1, #7
 80014ce:	2060      	movs	r0, #96	@ 0x60
 80014d0:	f000 fcd4 	bl	8001e7c <SPIwrite>
    SPIwrite(0x61,0x11);
 80014d4:	2111      	movs	r1, #17
 80014d6:	2061      	movs	r0, #97	@ 0x61
 80014d8:	f000 fcd0 	bl	8001e7c <SPIwrite>
    SPIwrite(CTRL_REG2, 0x01); // Enable inertial interrupt
 80014dc:	2101      	movs	r1, #1
 80014de:	2022      	movs	r0, #34	@ 0x22
 80014e0:	f000 fccc 	bl	8001e7c <SPIwrite>

    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 80014e4:	20a4      	movs	r0, #164	@ 0xa4
 80014e6:	f000 fd11 	bl	8001f0c <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 80014ea:	20a4      	movs	r0, #164	@ 0xa4
 80014ec:	f000 fd0e 	bl	8001f0c <SPIread>
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <read_ACC_X>:
 * 
 * This function reads the X acceleration value from the accelerometer.
 * 
 * @return the X acceleration raw value
 */
int16_t read_ACC_X(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 80014fa:	20a4      	movs	r0, #164	@ 0xa4
 80014fc:	f000 fd06 	bl	8001f0c <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001500:	20a4      	movs	r0, #164	@ 0xa4
 8001502:	f000 fd03 	bl	8001f0c <SPIread>

    //trame de lecture
    int16_t X;
    X = SPIread(OUT_X_H | SPI_READ);
 8001506:	20a9      	movs	r0, #169	@ 0xa9
 8001508:	f000 fd00 	bl	8001f0c <SPIread>
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
    X = X << 8;
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	80fb      	strh	r3, [r7, #6]
    X |= SPIread(OUT_X_L | SPI_READ);
 8001518:	20a8      	movs	r0, #168	@ 0xa8
 800151a:	f000 fcf7 	bl	8001f0c <SPIread>
 800151e:	4603      	mov	r3, r0
 8001520:	b21a      	sxth	r2, r3
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4313      	orrs	r3, r2
 8001526:	80fb      	strh	r3, [r7, #6]
    return X;
 8001528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <read_ACC_Y>:
 * 
 * This function reads the Y acceleration value from the accelerometer.
 * 
 * @return the Y acceleration raw value
 */
int16_t read_ACC_Y(void){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 800153a:	20a4      	movs	r0, #164	@ 0xa4
 800153c:	f000 fce6 	bl	8001f0c <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001540:	20a4      	movs	r0, #164	@ 0xa4
 8001542:	f000 fce3 	bl	8001f0c <SPIread>

    //trame de lecture
    int16_t Y;
    Y = SPIread(OUT_Y_H | SPI_READ);
 8001546:	20ab      	movs	r0, #171	@ 0xab
 8001548:	f000 fce0 	bl	8001f0c <SPIread>
 800154c:	4603      	mov	r3, r0
 800154e:	80fb      	strh	r3, [r7, #6]
    Y = Y << 8;
 8001550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	80fb      	strh	r3, [r7, #6]
    Y |= SPIread(OUT_Y_L | SPI_READ);
 8001558:	20aa      	movs	r0, #170	@ 0xaa
 800155a:	f000 fcd7 	bl	8001f0c <SPIread>
 800155e:	4603      	mov	r3, r0
 8001560:	b21a      	sxth	r2, r3
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4313      	orrs	r3, r2
 8001566:	80fb      	strh	r3, [r7, #6]
    return Y;
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <read_ACC_Z>:
 * 
 * This function reads the Z acceleration value from the accelerometer.
 * 
 * @return the Z acceleration raw value
 */
int16_t read_ACC_Z(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 800157a:	20a4      	movs	r0, #164	@ 0xa4
 800157c:	f000 fcc6 	bl	8001f0c <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001580:	20a4      	movs	r0, #164	@ 0xa4
 8001582:	f000 fcc3 	bl	8001f0c <SPIread>

    //trame de lecture
    int16_t Z;
    Z = SPIread(OUT_Z_H | SPI_READ);
 8001586:	20ad      	movs	r0, #173	@ 0xad
 8001588:	f000 fcc0 	bl	8001f0c <SPIread>
 800158c:	4603      	mov	r3, r0
 800158e:	80fb      	strh	r3, [r7, #6]
    Z = Z << 8;
 8001590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	80fb      	strh	r3, [r7, #6]
    Z |= SPIread(OUT_Z_L | SPI_READ);
 8001598:	20ac      	movs	r0, #172	@ 0xac
 800159a:	f000 fcb7 	bl	8001f0c <SPIread>
 800159e:	4603      	mov	r3, r0
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	80fb      	strh	r3, [r7, #6]
    return Z;
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <get_ACC_X>:
 * 
 * This function reads the acceleration value of the X axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_X(void){ // get the acceleration of the X axe in g
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    return read_ACC_X() / 16.384;
 80015bc:	f7ff ff9a 	bl	80014f4 <read_ACC_X>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffa6 	bl	8000514 <__aeabi_i2d>
 80015c8:	a307      	add	r3, pc, #28	@ (adr r3, 80015e8 <get_ACC_X+0x30>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f935 	bl	800083c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80015da:	eeb0 0a47 	vmov.f32	s0, s14
 80015de:	eef0 0a67 	vmov.f32	s1, s15
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80015ec:	4030624d 	.word	0x4030624d

080015f0 <get_ACC_Y>:
 * 
 * This function reads the acceleration value of the Y axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_Y(void){ // get the acceleration of the Y axe in g
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
    return read_ACC_Y() / 16.384;
 80015f4:	f7ff ff9e 	bl	8001534 <read_ACC_Y>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff8a 	bl	8000514 <__aeabi_i2d>
 8001600:	a307      	add	r3, pc, #28	@ (adr r3, 8001620 <get_ACC_Y+0x30>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff f919 	bl	800083c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001612:	eeb0 0a47 	vmov.f32	s0, s14
 8001616:	eef0 0a67 	vmov.f32	s1, s15
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	d2f1a9fc 	.word	0xd2f1a9fc
 8001624:	4030624d 	.word	0x4030624d

08001628 <get_ACC_Z>:
 * 
 * This function reads the acceleration value of the Z axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_Z(void){ // get the acceleration of the Z axe in g
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    return read_ACC_Z() / 16.384;
 800162c:	f7ff ffa2 	bl	8001574 <read_ACC_Z>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff6e 	bl	8000514 <__aeabi_i2d>
 8001638:	a307      	add	r3, pc, #28	@ (adr r3, 8001658 <get_ACC_Z+0x30>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f8fd 	bl	800083c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
}
 800164a:	eeb0 0a47 	vmov.f32	s0, s14
 800164e:	eef0 0a67 	vmov.f32	s1, s15
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	d2f1a9fc 	.word	0xd2f1a9fc
 800165c:	4030624d 	.word	0x4030624d

08001660 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	HAL_USART_Transmit(&husart2, (uint8_t *)ptr, len, 10);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b29a      	uxth	r2, r3
 8001670:	230a      	movs	r3, #10
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <_write+0x24>)
 8001676:	f002 f9b4 	bl	80039e2 <HAL_USART_Transmit>
	return len;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002e0 	.word	0x200002e0

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b0ac      	sub	sp, #176	@ 0xb0
 800168c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f000 fee5 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f8b1 	bl	80017f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f000 f945 	bl	8001924 <MX_GPIO_Init>
  MX_USART2_Init();
 800169a:	f000 f917 	bl	80018cc <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  UART_Init();
 800169e:	f7ff fc3f 	bl	8000f20 <UART_Init>
  CAN_config();
 80016a2:	f7ff fda5 	bl	80011f0 <CAN_config>
  CAN_config_filter(0, 0, 0x0, 0x10520312, 0x10035110);
 80016a6:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <main+0x134>)
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4b45      	ldr	r3, [pc, #276]	@ (80017c0 <main+0x138>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fd1b 	bl	80010ec <CAN_config_filter>
  init_SPI();
 80016b6:	f000 fb75 	bl	8001da4 <init_SPI>
  init_ACC();
 80016ba:	f7ff fec7 	bl	800144c <init_ACC>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80016ca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fe24 	bl	800431c <osMutexCreate>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <main+0x13c>)
 80016d8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of linCanQueue */
  osMessageQDef(linCanQueue, 16, uint16_t);
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <main+0x140>)
 80016dc:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80016e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linCanQueueHandle = osMessageCreate(osMessageQ(linCanQueue), NULL);
 80016e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fe2d 	bl	800434c <osMessageCreate>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a35      	ldr	r2, [pc, #212]	@ (80017cc <main+0x144>)
 80016f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of linSenderTask */
  osThreadDef(linSenderTask, StartLinSenderTask, osPriorityNormal, 0, 128);
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <main+0x148>)
 80016fa:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016fe:	461d      	mov	r5, r3
 8001700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  linSenderTaskHandle = osThreadCreate(osThread(linSenderTask), NULL);
 800170c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fd15 	bl	8004142 <osThreadCreate>
 8001718:	4603      	mov	r3, r0
 800171a:	4a2e      	ldr	r2, [pc, #184]	@ (80017d4 <main+0x14c>)
 800171c:	6013      	str	r3, [r2, #0]

  /* definition and creation of canReceiverTask */
  osThreadDef(canReceiverTask, StartCanReceiverTask, osPriorityIdle, 0, 128);
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <main+0x150>)
 8001720:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001724:	461d      	mov	r5, r3
 8001726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800172e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001732:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fd02 	bl	8004142 <osThreadCreate>
 800173e:	4603      	mov	r3, r0
 8001740:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <main+0x154>)
 8001742:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <main+0x158>)
 8001746:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800174a:	461d      	mov	r5, r3
 800174c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001758:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fcef 	bl	8004142 <osThreadCreate>
 8001764:	4603      	mov	r3, r0
 8001766:	4a1f      	ldr	r2, [pc, #124]	@ (80017e4 <main+0x15c>)
 8001768:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTrackerTask */
  osThreadDef(canTrackerTask, StartCanTrackerTask, osPriorityIdle, 0, 128);
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <main+0x160>)
 800176c:	f107 0420 	add.w	r4, r7, #32
 8001770:	461d      	mov	r5, r3
 8001772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800177a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTrackerTaskHandle = osThreadCreate(osThread(canTrackerTask), NULL);
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fcdc 	bl	8004142 <osThreadCreate>
 800178a:	4603      	mov	r3, r0
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <main+0x164>)
 800178e:	6013      	str	r3, [r2, #0]

  /* definition and creation of acceleroTask */
  osThreadDef(acceleroTask, StartAcceleroTask, osPriorityIdle, 0, 128);
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <main+0x168>)
 8001792:	1d3c      	adds	r4, r7, #4
 8001794:	461d      	mov	r5, r3
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  acceleroTaskHandle = osThreadCreate(osThread(acceleroTask), NULL);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 fccb 	bl	8004142 <osThreadCreate>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <main+0x16c>)
 80017b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017b2:	f002 fcbf 	bl	8004134 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b6:	bf00      	nop
 80017b8:	e7fd      	b.n	80017b6 <main+0x12e>
 80017ba:	bf00      	nop
 80017bc:	10035110 	.word	0x10035110
 80017c0:	10520312 	.word	0x10520312
 80017c4:	2000033c 	.word	0x2000033c
 80017c8:	08007a6c 	.word	0x08007a6c
 80017cc:	20000338 	.word	0x20000338
 80017d0:	08007a8c 	.word	0x08007a8c
 80017d4:	20000324 	.word	0x20000324
 80017d8:	08007ab8 	.word	0x08007ab8
 80017dc:	20000328 	.word	0x20000328
 80017e0:	08007ae0 	.word	0x08007ae0
 80017e4:	2000032c 	.word	0x2000032c
 80017e8:	08007b0c 	.word	0x08007b0c
 80017ec:	20000330 	.word	0x20000330
 80017f0:	08007b38 	.word	0x08007b38
 80017f4:	20000334 	.word	0x20000334

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b094      	sub	sp, #80	@ 0x50
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2230      	movs	r2, #48	@ 0x30
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f005 fafd 	bl	8006e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <SystemClock_Config+0xcc>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a27      	ldr	r2, [pc, #156]	@ (80018c4 <SystemClock_Config+0xcc>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
 800182c:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <SystemClock_Config+0xcc>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <SystemClock_Config+0xd0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <SystemClock_Config+0xd0>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <SystemClock_Config+0xd0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001858:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185e:	2302      	movs	r3, #2
 8001860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001862:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001868:	2308      	movs	r3, #8
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800186c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001872:	2302      	movs	r3, #2
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001876:	2307      	movs	r3, #7
 8001878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f902 	bl	8002a88 <HAL_RCC_OscConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800188a:	f000 fa85 	bl	8001d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188e:	230f      	movs	r3, #15
 8001890:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800189a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800189e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	2105      	movs	r1, #5
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fb63 	bl	8002f78 <HAL_RCC_ClockConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018b8:	f000 fa6e 	bl	8001d98 <Error_Handler>
  }
}
 80018bc:	bf00      	nop
 80018be:	3750      	adds	r7, #80	@ 0x50
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000

080018cc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_USART2_Init+0x50>)
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <MX_USART2_Init+0x54>)
 80018d4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 19200;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_USART2_Init+0x50>)
 80018d8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80018dc:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_USART2_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <MX_USART2_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_USART2_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <MX_USART2_Init+0x50>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_USART2_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <MX_USART2_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_USART2_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_USART2_Init+0x50>)
 800190a:	f002 f829 	bl	8003960 <HAL_USART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001914:	f000 fa40 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002e0 	.word	0x200002e0
 8001920:	40004400 	.word	0x40004400

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_GPIO_Init+0x9c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800198e:	2301      	movs	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001992:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <MX_GPIO_Init+0xa0>)
 80019a4:	f000 fea2 	bl	80026ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2105      	movs	r1, #5
 80019ac:	2006      	movs	r0, #6
 80019ae:	f000 fe73 	bl	8002698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019b2:	2006      	movs	r0, #6
 80019b4:	f000 fe8c 	bl	80026d0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40021000 	.word	0x40021000

080019c8 <StartLinSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLinSenderTask */
void StartLinSenderTask(void const * argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	int8_t lin_received_cnt = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
	uint8_t can_send_lin = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	77bb      	strb	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 80019d8:	463b      	mov	r3, r7
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fc4f 	bl	8004284 <osSignalWait>
	  lin_received_cnt++;
 80019e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	77fb      	strb	r3, [r7, #31]
	  can_send_lin = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	77bb      	strb	r3, [r7, #30]
	  int data = (unsigned int) CAN_RxMessage.data[0];
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <StartLinSenderTask+0x110>)
 80019f8:	799b      	ldrb	r3, [r3, #6]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	61bb      	str	r3, [r7, #24]

	  Tx_Msg.ID = LIN_SLAVE_WRITE_RTC_PID;
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a00:	2245      	movs	r2, #69	@ 0x45
 8001a02:	701a      	strb	r2, [r3, #0]
	  Tx_Msg.length = LIN_SLAVE_WRITE_RTC_LENGTH;
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a06:	2206      	movs	r2, #6
 8001a08:	705a      	strb	r2, [r3, #1]

	  switch (CAN_RxMessage.STDID) {
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <StartLinSenderTask+0x110>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ae0 <StartLinSenderTask+0x118>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d027      	beq.n	8001a64 <StartLinSenderTask+0x9c>
 8001a14:	4a33      	ldr	r2, [pc, #204]	@ (8001ae4 <StartLinSenderTask+0x11c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d149      	bne.n	8001aae <StartLinSenderTask+0xe6>
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b38      	cmp	r3, #56	@ 0x38
 8001a1e:	d016      	beq.n	8001a4e <StartLinSenderTask+0x86>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b38      	cmp	r3, #56	@ 0x38
 8001a24:	dc1a      	bgt.n	8001a5c <StartLinSenderTask+0x94>
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a2a:	d009      	beq.n	8001a40 <StartLinSenderTask+0x78>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b34      	cmp	r3, #52	@ 0x34
 8001a30:	d114      	bne.n	8001a5c <StartLinSenderTask+0x94>

		case COMMODO_CLIGNOTANT_RETURN_BASE:
				switch (data) {
					case COMMODO_CLIGNOTANT_REPOS_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_STOP;
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO STOP \n\r");
 8001a38:	482b      	ldr	r0, [pc, #172]	@ (8001ae8 <StartLinSenderTask+0x120>)
 8001a3a:	f005 f98f 	bl	8006d5c <iprintf>
						break;
 8001a3e:	e010      	b.n	8001a62 <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_DROIT_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_DROIT;
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO DROIT \n\r");
 8001a46:	4829      	ldr	r0, [pc, #164]	@ (8001aec <StartLinSenderTask+0x124>)
 8001a48:	f005 f988 	bl	8006d5c <iprintf>
						break;
 8001a4c:	e009      	b.n	8001a62 <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_GAUCHE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_GAUCHE;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO GAUCHE \n\r");
 8001a54:	4826      	ldr	r0, [pc, #152]	@ (8001af0 <StartLinSenderTask+0x128>)
 8001a56:	f005 f981 	bl	8006d5c <iprintf>
						break;
 8001a5a:	e002      	b.n	8001a62 <StartLinSenderTask+0x9a>
					default:
						can_send_lin = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77bb      	strb	r3, [r7, #30]
						break;
 8001a60:	bf00      	nop
				}
			break;
 8001a62:	e027      	b.n	8001ab4 <StartLinSenderTask+0xec>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bb3      	cmp	r3, #179	@ 0xb3
 8001a68:	d016      	beq.n	8001a98 <StartLinSenderTask+0xd0>
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2bb3      	cmp	r3, #179	@ 0xb3
 8001a6e:	dc1a      	bgt.n	8001aa6 <StartLinSenderTask+0xde>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d009      	beq.n	8001a8a <StartLinSenderTask+0xc2>
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a7a:	d114      	bne.n	8001aa6 <StartLinSenderTask+0xde>

		case COMMODO_PHARE_RETURN_BASE:
				switch (data) {
					case COMMODO_PHARE_ALLUMER_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_AVANT;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a7e:	2204      	movs	r2, #4
 8001a80:	701a      	strb	r2, [r3, #0]
						printf("PHARES AVANT \n\r");
 8001a82:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <StartLinSenderTask+0x12c>)
 8001a84:	f005 f96a 	bl	8006d5c <iprintf>
						break;
 8001a88:	e010      	b.n	8001aac <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_VEILLEUSE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_ARRIERE;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	701a      	strb	r2, [r3, #0]
						printf("PHARES ARRIERES \n\r");
 8001a90:	4819      	ldr	r0, [pc, #100]	@ (8001af8 <StartLinSenderTask+0x130>)
 8001a92:	f005 f963 	bl	8006d5c <iprintf>
						break;
 8001a96:	e009      	b.n	8001aac <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_AUTO_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_STOP;
 8001a98:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <StartLinSenderTask+0x114>)
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	701a      	strb	r2, [r3, #0]
						printf("PHARES STOP \n\r");
 8001a9e:	4817      	ldr	r0, [pc, #92]	@ (8001afc <StartLinSenderTask+0x134>)
 8001aa0:	f005 f95c 	bl	8006d5c <iprintf>
						break;
 8001aa4:	e002      	b.n	8001aac <StartLinSenderTask+0xe4>
					default:
						can_send_lin = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	77bb      	strb	r3, [r7, #30]
						break;
 8001aaa:	bf00      	nop
				}
			break;
 8001aac:	e002      	b.n	8001ab4 <StartLinSenderTask+0xec>
		default:
			can_send_lin = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	77bb      	strb	r3, [r7, #30]
			break;
 8001ab2:	bf00      	nop
	}

//	  Rx_Msg.ID = LIN_SLAVE_READ_RTC_PID;
//	  Rx_Msg.length = LIN_SLAVE_READ_RTC_LENGTH;
	  if(can_send_lin){
 8001ab4:	7fbb      	ldrb	r3, [r7, #30]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <StartLinSenderTask+0x106>

		  SendRequest(&Tx_Msg);
 8001aba:	4808      	ldr	r0, [pc, #32]	@ (8001adc <StartLinSenderTask+0x114>)
 8001abc:	f7ff fadc 	bl	8001078 <SendRequest>
		  HAL_Delay(500);
 8001ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ac4:	f000 fd0c 	bl	80024e0 <HAL_Delay>
		  printf("\n\r=================================\n\r");
 8001ac8:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <StartLinSenderTask+0x138>)
 8001aca:	f005 f947 	bl	8006d5c <iprintf>
	  }


	  osDelay(1000);
 8001ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad2:	f002 fb82 	bl	80041da <osDelay>
  {
 8001ad6:	e77f      	b.n	80019d8 <StartLinSenderTask+0x10>
 8001ad8:	2000034c 	.word	0x2000034c
 8001adc:	20000340 	.word	0x20000340
 8001ae0:	10005101 	.word	0x10005101
 8001ae4:	10005110 	.word	0x10005110
 8001ae8:	08007b54 	.word	0x08007b54
 8001aec:	08007b64 	.word	0x08007b64
 8001af0:	08007b74 	.word	0x08007b74
 8001af4:	08007b88 	.word	0x08007b88
 8001af8:	08007b98 	.word	0x08007b98
 8001afc:	08007bac 	.word	0x08007bac
 8001b00:	08007bbc 	.word	0x08007bbc

08001b04 <StartCanReceiverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanReceiverTask */
void StartCanReceiverTask(void const * argument)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanReceiverTask */
	int8_t can_received_cnt = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	osEvent canReadedTracker;
	int8_t executed_once = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	CAN_frame auto_frame;
	  auto_frame.STDID = 0x10530310;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <StartCanReceiverTask+0x5c>)
 8001b1a:	60bb      	str	r3, [r7, #8]
	  auto_frame.DLC = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	737b      	strb	r3, [r7, #13]
	  auto_frame.RTR = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	733b      	strb	r3, [r7, #12]
  for(;;)
  {


	  	  // REAL CODE
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <StartCanReceiverTask+0x60>)
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fc73 	bl	800441c <osMessageGet>
	  if(canReadedTracker.value.v == 0x1){
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d1f3      	bne.n	8001b24 <StartCanReceiverTask+0x20>
		can_received_cnt++;
 8001b3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		osSignalSet(linSenderTaskHandle, 1);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <StartCanReceiverTask+0x64>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fb57 	bl	8004204 <osSignalSet>
		osDelay(1000);
 8001b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b5a:	f002 fb3e 	bl	80041da <osDelay>
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 8001b5e:	e7e1      	b.n	8001b24 <StartCanReceiverTask+0x20>
 8001b60:	10530310 	.word	0x10530310
 8001b64:	20000338 	.word	0x20000338
 8001b68:	20000324 	.word	0x20000324

08001b6c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask04 */
	int cnt = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    osSignalWait(1, osWaitForever);
 8001b78:	463b      	mov	r3, r7
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fb7f 	bl	8004284 <osSignalWait>
    cnt++;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
//    printf("Donnée Can recue %d \n \r", cnt);
//    HAL_Delay(500);

	osDelay(1000);
 8001b8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b90:	f002 fb23 	bl	80041da <osDelay>
    osSignalWait(1, osWaitForever);
 8001b94:	bf00      	nop
 8001b96:	e7ef      	b.n	8001b78 <StartTask04+0xc>

08001b98 <StartCanTrackerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTrackerTask */
void StartCanTrackerTask(void const * argument)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartCanTrackerTask */
	  int8_t cnt = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	printf("Waiting for CAN \n \r");
 8001ba4:	4817      	ldr	r0, [pc, #92]	@ (8001c04 <StartCanTrackerTask+0x6c>)
 8001ba6:	f005 f8d9 	bl	8006d5c <iprintf>
	osSignalWait(1, osWaitForever);
 8001baa:	463b      	mov	r3, r7
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fb66 	bl	8004284 <osSignalWait>
	cnt++;
 8001bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	77fb      	strb	r3, [r7, #31]
	CAN_readFrame();
 8001bc4:	f7ff fb98 	bl	80012f8 <CAN_readFrame>
	printf("Readed CAN n° %d \n \r", cnt);
 8001bc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480e      	ldr	r0, [pc, #56]	@ (8001c08 <StartCanTrackerTask+0x70>)
 8001bd0:	f005 f8c4 	bl	8006d5c <iprintf>
	HAL_Delay(100);
 8001bd4:	2064      	movs	r0, #100	@ 0x64
 8001bd6:	f000 fc83 	bl	80024e0 <HAL_Delay>
//	HAL_Delay(100);

//	printf("CAN Readed \n \r");
//	HAL_Delay(100);
	//	HAL_Delay(100);
	if(CAN_RxMessage.STDID == COMMODO_PHARE_RETURN_ID){
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <StartCanTrackerTask+0x74>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <StartCanTrackerTask+0x78>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d109      	bne.n	8001bf8 <StartCanTrackerTask+0x60>
		if(CAN_RxMessage.data[0] == COMMODO_PHARE_RETURN_VALUE){
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <StartCanTrackerTask+0x74>)
 8001be6:	799b      	ldrb	r3, [r3, #6]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b34      	cmp	r3, #52	@ 0x34
 8001bec:	d102      	bne.n	8001bf4 <StartCanTrackerTask+0x5c>
			uint8_t toto = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	777b      	strb	r3, [r7, #29]
 8001bf2:	e001      	b.n	8001bf8 <StartCanTrackerTask+0x60>
		}else{
			uint8_t toto = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	77bb      	strb	r3, [r7, #30]
		}
	}

	osDelay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bfc:	f002 faed 	bl	80041da <osDelay>
	printf("Waiting for CAN \n \r");
 8001c00:	e7d0      	b.n	8001ba4 <StartCanTrackerTask+0xc>
 8001c02:	bf00      	nop
 8001c04:	08007be4 	.word	0x08007be4
 8001c08:	08007bf8 	.word	0x08007bf8
 8001c0c:	2000034c 	.word	0x2000034c
 8001c10:	801a8884 	.word	0x801a8884
 8001c14:	00000000 	.word	0x00000000

08001c18 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	@ 0x38
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartAcceleroTask */
	double x = 0;
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double y = 0;
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double z = 0;
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t state_updated = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8001c48:	463b      	mov	r3, r7
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fb17 	bl	8004284 <osSignalWait>

	  x = get_ACC_X();
 8001c56:	f7ff fcaf 	bl	80015b8 <get_ACC_X>
 8001c5a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	  y = get_ACC_Y();
 8001c5e:	f7ff fcc7 	bl	80015f0 <get_ACC_Y>
 8001c62:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	  z = get_ACC_Z();
 8001c66:	f7ff fcdf 	bl	8001628 <get_ACC_Z>
 8001c6a:	ed87 0b08 	vstr	d0, [r7, #32]
	  Tx_Msg.ID = LIN_SLAVE_WRITE_RTC_PID;
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001c70:	2245      	movs	r2, #69	@ 0x45
 8001c72:	701a      	strb	r2, [r3, #0]
	  Tx_Msg.length = 0;
 8001c74:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	705a      	strb	r2, [r3, #1]

	  if(x < SEUIL_ARRIERE){
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <StartAcceleroTask+0x13c>)
 8001c80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c84:	f7fe ff22 	bl	8000acc <__aeabi_dcmplt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <StartAcceleroTask+0x8c>
		  serial_puts("ARRIERE");
 8001c8e:	4832      	ldr	r0, [pc, #200]	@ (8001d58 <StartAcceleroTask+0x140>)
 8001c90:	f000 fb94 	bl	80023bc <serial_puts>
		  newLine();
 8001c94:	f000 fbae 	bl	80023f4 <newLine>
		  Tx_Msg.ID = LIN_PHARE_ARRIERE;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
 8001ca2:	e048      	b.n	8001d36 <StartAcceleroTask+0x11e>
	  }
	  else if(x > SEUIL_AVANT){
 8001ca4:	a328      	add	r3, pc, #160	@ (adr r3, 8001d48 <StartAcceleroTask+0x130>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cae:	f7fe ff2b 	bl	8000b08 <__aeabi_dcmpgt>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <StartAcceleroTask+0xb6>
		  serial_puts("AVANT");
 8001cb8:	4828      	ldr	r0, [pc, #160]	@ (8001d5c <StartAcceleroTask+0x144>)
 8001cba:	f000 fb7f 	bl	80023bc <serial_puts>
		  newLine();
 8001cbe:	f000 fb99 	bl	80023f4 <newLine>
		  Tx_Msg.ID = LIN_PHARE_AVANT;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	77fb      	strb	r3, [r7, #31]
 8001ccc:	e033      	b.n	8001d36 <StartAcceleroTask+0x11e>
	  }
	  else if(y < SEUIL_DROIT){
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <StartAcceleroTask+0x148>)
 8001cd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cd8:	f7fe fef8 	bl	8000acc <__aeabi_dcmplt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <StartAcceleroTask+0xe0>
		  serial_puts("DROIT");
 8001ce2:	4820      	ldr	r0, [pc, #128]	@ (8001d64 <StartAcceleroTask+0x14c>)
 8001ce4:	f000 fb6a 	bl	80023bc <serial_puts>
		  newLine();
 8001ce8:	f000 fb84 	bl	80023f4 <newLine>
		  Tx_Msg.ID = LIN_CLIGNO_DROIT;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	77fb      	strb	r3, [r7, #31]
 8001cf6:	e01e      	b.n	8001d36 <StartAcceleroTask+0x11e>
	  }
	  else if(y > SEUIL_GAUCHE){
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <StartAcceleroTask+0x150>)
 8001cfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d02:	f7fe ff01 	bl	8000b08 <__aeabi_dcmpgt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <StartAcceleroTask+0x10a>
		  serial_puts("GAUCHE");
 8001d0c:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <StartAcceleroTask+0x154>)
 8001d0e:	f000 fb55 	bl	80023bc <serial_puts>
		  newLine();
 8001d12:	f000 fb6f 	bl	80023f4 <newLine>
		  Tx_Msg.ID = LIN_CLIGNO_GAUCHE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	77fb      	strb	r3, [r7, #31]
 8001d20:	e009      	b.n	8001d36 <StartAcceleroTask+0x11e>
	  }


//	  if(!state_updated){
	  else{
		  Tx_Msg.ID = LIN_RESET;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	701a      	strb	r2, [r3, #0]
		  state_updated = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	77fb      	strb	r3, [r7, #31]
		  serial_puts("RESET");
 8001d2c:	4810      	ldr	r0, [pc, #64]	@ (8001d70 <StartAcceleroTask+0x158>)
 8001d2e:	f000 fb45 	bl	80023bc <serial_puts>
		  newLine();
 8001d32:	f000 fb5f 	bl	80023f4 <newLine>
	  }

	  SendRequest(&Tx_Msg);
 8001d36:	4806      	ldr	r0, [pc, #24]	@ (8001d50 <StartAcceleroTask+0x138>)
 8001d38:	f7ff f99e 	bl	8001078 <SendRequest>
	  HAL_Delay(100);
 8001d3c:	2064      	movs	r0, #100	@ 0x64
 8001d3e:	f000 fbcf 	bl	80024e0 <HAL_Delay>
	  osSignalWait(1, osWaitForever);
 8001d42:	e781      	b.n	8001c48 <StartAcceleroTask+0x30>
 8001d44:	f3af 8000 	nop.w
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	4072c000 	.word	0x4072c000
 8001d50:	20000340 	.word	0x20000340
 8001d54:	c072c000 	.word	0xc072c000
 8001d58:	08007c10 	.word	0x08007c10
 8001d5c:	08007c18 	.word	0x08007c18
 8001d60:	c0690000 	.word	0xc0690000
 8001d64:	08007c20 	.word	0x08007c20
 8001d68:	40690000 	.word	0x40690000
 8001d6c:	08007c28 	.word	0x08007c28
 8001d70:	08007c30 	.word	0x08007c30

08001d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d86:	f000 fb8b 	bl	80024a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40001000 	.word	0x40001000

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <Error_Handler+0x8>

08001da4 <init_SPI>:
 */


#include "spi.h"

void init_SPI(void){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <init_SPI+0xc8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <init_SPI+0xc8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <init_SPI+0xc8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dd6:	23e0      	movs	r3, #224	@ 0xe0
 8001dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dde:	2302      	movs	r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001de6:	2305      	movs	r3, #5
 8001de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4619      	mov	r1, r3
 8001df0:	481f      	ldr	r0, [pc, #124]	@ (8001e70 <init_SPI+0xcc>)
 8001df2:	f000 fc7b 	bl	80026ec <HAL_GPIO_Init>

    /**LIS3DSH ChipSelect Configuration
    PE3     ------> LIS3DSH_SS
    */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <init_SPI+0xc8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <init_SPI+0xc8>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <init_SPI+0xc8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	2108      	movs	r1, #8
 8001e16:	4817      	ldr	r0, [pc, #92]	@ (8001e74 <init_SPI+0xd0>)
 8001e18:	f000 fe04 	bl	8002a24 <HAL_GPIO_WritePin>
    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	4810      	ldr	r0, [pc, #64]	@ (8001e74 <init_SPI+0xd0>)
 8001e34:	f000 fc5a 	bl	80026ec <HAL_GPIO_Init>

    /**
     * SPI1 configuration
     */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <init_SPI+0xc8>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <init_SPI+0xc8>)
 8001e42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e46:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <init_SPI+0xc8>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
    // SPI1 clock = APB2, prescaler set to 16 -> 84000000/16 = 5Mhz
    SPI1->CR1 = 0b000001101011100; //0x007E
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <init_SPI+0xd4>)
 8001e56:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8001e5a:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0b0000000000000000; //0x0000
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <init_SPI+0xd4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
   // SPI1->I2SCFGR = 0; // SPI enable I2S disable
   // SPI1->I2SPR = 0b0000000000000000;
}
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40013000 	.word	0x40013000

08001e7c <SPIwrite>:

// Write a data @ address with SPI1
void SPIwrite(uint8_t address, uint8_t data)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	460a      	mov	r2, r1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
	CS_LOW; //CS --> Low
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2108      	movs	r1, #8
 8001e90:	481c      	ldr	r0, [pc, #112]	@ (8001f04 <SPIwrite+0x88>)
 8001e92:	f000 fdc7 	bl	8002a24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 fb22 	bl	80024e0 <HAL_Delay>
    SPI1->DR = address;
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <SPIwrite+0x8c>)
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f000 fb1c 	bl	80024e0 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 8001ea8:	bf00      	nop
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <SPIwrite+0x8c>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f9      	beq.n	8001eaa <SPIwrite+0x2e>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001eb6:	bf00      	nop
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <SPIwrite+0x8c>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <SPIwrite+0x3c>
    SPI1->DR = data;
 8001ec4:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <SPIwrite+0x8c>)
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fb08 	bl	80024e0 <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // Wait Flag TXE = 1
 8001ed0:	bf00      	nop
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <SPIwrite+0x8c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f9      	beq.n	8001ed2 <SPIwrite+0x56>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001ede:	bf00      	nop
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <SPIwrite+0x8c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <SPIwrite+0x64>
    HAL_Delay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 faf7 	bl	80024e0 <HAL_Delay>
    CS_HIGH; //CS --> High
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <SPIwrite+0x88>)
 8001ef8:	f000 fd94 	bl	8002a24 <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40013000 	.word	0x40013000

08001f0c <SPIread>:
    return tempdat;
}

// Write a tempdat @ address with SPI1
uint8_t SPIread(uint8_t address)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
	 uint8_t tempdat;
	 CS_LOW; //CS --> Low
 8001f16:	2200      	movs	r2, #0
 8001f18:	2108      	movs	r1, #8
 8001f1a:	481a      	ldr	r0, [pc, #104]	@ (8001f84 <SPIread+0x78>)
 8001f1c:	f000 fd82 	bl	8002a24 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	 SPI1->DR = address;
 8001f20:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <SPIread+0x7c>)
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	60d3      	str	r3, [r2, #12]
	 while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 8001f26:	bf00      	nop
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <SPIread+0x7c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f9      	beq.n	8001f28 <SPIread+0x1c>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001f34:	bf00      	nop
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <SPIread+0x7c>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f9      	bne.n	8001f36 <SPIread+0x2a>
	 //HAL_Delay(100);
	tempdat = SPI1->DR & 0xFF; // Read dummy
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <SPIread+0x7c>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	73fb      	strb	r3, [r7, #15]
	 SPI1->DR = DUMMY_BYTE;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <SPIread+0x7c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	 while(!(SPI1->SR & 0x1)); // Wait Flag RXE = 1
 8001f4e:	bf00      	nop
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <SPIread+0x7c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f9      	beq.n	8001f50 <SPIread+0x44>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8001f5c:	bf00      	nop
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <SPIread+0x7c>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <SPIread+0x52>
	// HAL_Delay(100);
	 tempdat = SPI1->DR & 0xFF;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <SPIread+0x7c>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	73fb      	strb	r3, [r7, #15]
	// HAL_Delay(100);
	 CS_HIGH; //CS --> High
 8001f70:	2201      	movs	r2, #1
 8001f72:	2108      	movs	r1, #8
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <SPIread+0x78>)
 8001f76:	f000 fd55 	bl	8002a24 <HAL_GPIO_WritePin>
	 return tempdat;
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40013000 	.word	0x40013000

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <HAL_MspInit+0x54>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	210f      	movs	r1, #15
 8001fce:	f06f 0001 	mvn.w	r0, #1
 8001fd2:	f000 fb61 	bl	8002698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_USART_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_USART_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_USART_MspInit+0x88>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	6413      	str	r3, [r2, #64]	@ 0x40
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_USART_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_USART_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	@ (800206c <HAL_USART_MspInit+0x88>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_USART_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800203e:	231c      	movs	r3, #28
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204e:	2307      	movs	r3, #7
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	@ (8002070 <HAL_USART_MspInit+0x8c>)
 800205a:	f000 fb47 	bl	80026ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40004400 	.word	0x40004400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	@ 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_InitTick+0xe4>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4a32      	ldr	r2, [pc, #200]	@ (8002158 <HAL_InitTick+0xe4>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6413      	str	r3, [r2, #64]	@ 0x40
 8002094:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <HAL_InitTick+0xe4>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a0:	f107 0210 	add.w	r2, r7, #16
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 f984 	bl	80033b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ba:	f001 f955 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80020be:	6378      	str	r0, [r7, #52]	@ 0x34
 80020c0:	e004      	b.n	80020cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020c2:	f001 f951 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80020c6:	4603      	mov	r3, r0
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <HAL_InitTick+0xe8>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	3b01      	subs	r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_InitTick+0xec>)
 80020dc:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <HAL_InitTick+0xf0>)
 80020de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_InitTick+0xec>)
 80020e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_InitTick+0xec>)
 80020ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_InitTick+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_InitTick+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_InitTick+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002100:	4817      	ldr	r0, [pc, #92]	@ (8002160 <HAL_InitTick+0xec>)
 8002102:	f001 f98b 	bl	800341c <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11b      	bne.n	800214c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002114:	4812      	ldr	r0, [pc, #72]	@ (8002160 <HAL_InitTick+0xec>)
 8002116:	f001 f9db 	bl	80034d0 <HAL_TIM_Base_Start_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002128:	2036      	movs	r0, #54	@ 0x36
 800212a:	f000 fad1 	bl	80026d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d808      	bhi.n	8002146 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	2036      	movs	r0, #54	@ 0x36
 800213a:	f000 faad 	bl	8002698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_InitTick+0xf4>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e002      	b.n	800214c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800214c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002150:	4618      	mov	r0, r3
 8002152:	3738      	adds	r7, #56	@ 0x38
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	431bde83 	.word	0x431bde83
 8002160:	20000400 	.word	0x20000400
 8002164:	40001000 	.word	0x40001000
 8002168:	20000004 	.word	0x20000004

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <NMI_Handler+0x4>

08002174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <MemManage_Handler+0x4>

08002184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <UsageFault_Handler+0x4>

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 fc55 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  osSignalSet(myTask04Handle, 1);
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <EXTI0_IRQHandler+0x28>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2101      	movs	r1, #1
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 f825 	bl	8004204 <osSignalSet>
  osMessagePut(linCanQueueHandle, 1, 100);
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <EXTI0_IRQHandler+0x2c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2264      	movs	r2, #100	@ 0x64
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 f8ea 	bl	800439c <osMessagePut>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	2000032c 	.word	0x2000032c
 80021d0:	20000338 	.word	0x20000338

080021d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <TIM6_DAC_IRQHandler+0x10>)
 80021da:	f001 f9e9 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000400 	.word	0x20000400

080021e8 <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void CAN1_RX0_IRQHandler( void )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
//	osSignalSet(canTrackerTaskHandle, 1);

	CAN_readFrame();
 80021ec:	f7ff f884 	bl	80012f8 <CAN_readFrame>
	osMessagePut(linCanQueueHandle, 1, 100);
 80021f0:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <CAN1_RX0_IRQHandler+0x1c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2264      	movs	r2, #100	@ 0x64
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 f8cf 	bl	800439c <osMessagePut>
//	serial_puts("Teacher::  received CAN | Added To Queue \n \r");
//  osSignalSet(myTask04Handle, 1);

//	osSignalSet(canReceiverTaskHandle, 1); // phare_state
//	printf("Released CanReceiver \n\r\r");
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000338 	.word	0x20000338

08002208 <HAL_GPIO_EXTI_Callback>:

// Accéléromètre
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0){
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d111      	bne.n	800223c <HAL_GPIO_EXTI_Callback+0x34>
		//exit
    	osSignalSet(acceleroTaskHandle, 1);
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_GPIO_EXTI_Callback+0x3c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fff0 	bl	8004204 <osSignalSet>
		SPIread(CTRL_REG5 | SPI_READ);
 8002224:	20a4      	movs	r0, #164	@ 0xa4
 8002226:	f7ff fe71 	bl	8001f0c <SPIread>
		SPIread(CTRL_REG5 | SPI_READ);
 800222a:	20a4      	movs	r0, #164	@ 0xa4
 800222c:	f7ff fe6e 	bl	8001f0c <SPIread>

		SPIread(OUTS1 | SPI_READ);
 8002230:	20df      	movs	r0, #223	@ 0xdf
 8002232:	f7ff fe6b 	bl	8001f0c <SPIread>
		SPIread(OUTS2 | SPI_READ);
 8002236:	20ff      	movs	r0, #255	@ 0xff
 8002238:	f7ff fe68 	bl	8001f0c <SPIread>
    }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000334 	.word	0x20000334

08002248 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e00a      	b.n	8002270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800225a:	f3af 8000 	nop.w
 800225e:	4601      	mov	r1, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	b2ca      	uxtb	r2, r1
 8002268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3301      	adds	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	dbf0      	blt.n	800225a <_read+0x12>
  }

  return len;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022aa:	605a      	str	r2, [r3, #4]
  return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_isatty>:

int _isatty(int file)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <_sbrk+0x5c>)
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <_sbrk+0x60>)
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <_sbrk+0x64>)
 800230a:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <_sbrk+0x68>)
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230e:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d207      	bcs.n	800232c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800231c:	f004 fdc2 	bl	8006ea4 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	220c      	movs	r2, #12
 8002324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e009      	b.n	8002340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <_sbrk+0x64>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002332:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <_sbrk+0x64>)
 800233c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20020000 	.word	0x20020000
 800234c:	00000400 	.word	0x00000400
 8002350:	20000448 	.word	0x20000448
 8002354:	200042f0 	.word	0x200042f0

08002358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	@ (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 8002386:	4a0c      	ldr	r2, [pc, #48]	@ (80023b8 <serial_putc+0x3c>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 800238c:	bf00      	nop
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <serial_putc+0x3c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f9      	beq.n	800238e <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 800239a:	bf00      	nop
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <serial_putc+0x3c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f9      	beq.n	800239c <serial_putc+0x20>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40004400 	.word	0x40004400

080023bc <serial_puts>:

void serial_puts( char *msg)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 80023c8:	e009      	b.n	80023de <serial_puts+0x22>
		serial_putc(msg[cnt]);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ffd2 	bl	800237c <serial_putc>
		cnt++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ef      	bne.n	80023ca <serial_puts+0xe>
	}
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <newLine>:

void newLine()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 80023f8:	200a      	movs	r0, #10
 80023fa:	f7ff ffbf 	bl	800237c <serial_putc>
	serial_putc(13); // retour chariot
 80023fe:	200d      	movs	r0, #13
 8002400:	f7ff ffbc 	bl	800237c <serial_putc>
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800240c:	f7ff ffa4 	bl	8002358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480c      	ldr	r0, [pc, #48]	@ (8002444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002412:	490d      	ldr	r1, [pc, #52]	@ (8002448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002428:	4c0a      	ldr	r4, [pc, #40]	@ (8002454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002436:	f004 fd3b 	bl	8006eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243a:	f7ff f925 	bl	8001688 <main>
  bx  lr    
 800243e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800244c:	08007c9c 	.word	0x08007c9c
  ldr r2, =_sbss
 8002450:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002454:	200042f0 	.word	0x200042f0

08002458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>
	...

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002460:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0d      	ldr	r2, [pc, #52]	@ (800249c <HAL_Init+0x40>)
 8002466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <HAL_Init+0x40>)
 8002472:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_Init+0x40>)
 800247e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 f8fc 	bl	8002682 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248a:	200f      	movs	r0, #15
 800248c:	f7ff fdf2 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002490:	f7ff fd7c 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023c00 	.word	0x40023c00

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	@ (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000008 	.word	0x20000008
 80024c4:	2000044c 	.word	0x2000044c

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000044c 	.word	0x2000044c

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008

08002528 <__NVIC_SetPriorityGrouping>:
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff4c 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026aa:	f7ff ff61 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	6978      	ldr	r0, [r7, #20]
 80026b6:	f7ff ffb1 	bl	800261c <NVIC_EncodePriority>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff80 	bl	80025c8 <__NVIC_SetPriority>
}
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff54 	bl	800258c <__NVIC_EnableIRQ>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e16b      	b.n	80029e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 815a 	bne.w	80029da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d005      	beq.n	800273e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	2b02      	cmp	r3, #2
 800273c:	d130      	bne.n	80027a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 0201 	and.w	r2, r3, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d017      	beq.n	80027dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80b4 	beq.w	80029da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <HAL_GPIO_Init+0x30c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a5f      	ldr	r2, [pc, #380]	@ (80029f8 <HAL_GPIO_Init+0x30c>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b5d      	ldr	r3, [pc, #372]	@ (80029f8 <HAL_GPIO_Init+0x30c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288e:	4a5b      	ldr	r2, [pc, #364]	@ (80029fc <HAL_GPIO_Init+0x310>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_GPIO_Init+0x314>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02b      	beq.n	8002912 <HAL_GPIO_Init+0x226>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a51      	ldr	r2, [pc, #324]	@ (8002a04 <HAL_GPIO_Init+0x318>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_Init+0x222>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a50      	ldr	r2, [pc, #320]	@ (8002a08 <HAL_GPIO_Init+0x31c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_Init+0x21e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a0c <HAL_GPIO_Init+0x320>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x21a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002a10 <HAL_GPIO_Init+0x324>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x216>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002a14 <HAL_GPIO_Init+0x328>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x212>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002a18 <HAL_GPIO_Init+0x32c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4b      	ldr	r2, [pc, #300]	@ (8002a1c <HAL_GPIO_Init+0x330>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x20a>
 80028f2:	2307      	movs	r3, #7
 80028f4:	e00e      	b.n	8002914 <HAL_GPIO_Init+0x228>
 80028f6:	2308      	movs	r3, #8
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_Init+0x228>
 80028fa:	2306      	movs	r3, #6
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_Init+0x228>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_Init+0x228>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x228>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_Init+0x228>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_Init+0x228>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x228>
 8002912:	2300      	movs	r3, #0
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002924:	4935      	ldr	r1, [pc, #212]	@ (80029fc <HAL_GPIO_Init+0x310>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	4b3b      	ldr	r3, [pc, #236]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002956:	4a32      	ldr	r2, [pc, #200]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295c:	4b30      	ldr	r3, [pc, #192]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002980:	4a27      	ldr	r2, [pc, #156]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d4:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <HAL_GPIO_Init+0x334>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	f67f ae90 	bls.w	8002708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3724      	adds	r7, #36	@ 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40020400 	.word	0x40020400
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020c00 	.word	0x40020c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40021400 	.word	0x40021400
 8002a18:	40021800 	.word	0x40021800
 8002a1c:	40021c00 	.word	0x40021c00
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a40:	e003      	b.n	8002a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fbc6 	bl	8002208 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e267      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d075      	beq.n	8002b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aa6:	4b88      	ldr	r3, [pc, #544]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d00c      	beq.n	8002acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab2:	4b85      	ldr	r3, [pc, #532]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d112      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b82      	ldr	r3, [pc, #520]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x108>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d157      	bne.n	8002b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e242      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x74>
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0xb0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x98>
 8002b06:	4b70      	ldr	r3, [pc, #448]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6c      	ldr	r2, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xb0>
 8002b20:	4b69      	ldr	r3, [pc, #420]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a68      	ldr	r2, [pc, #416]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a65      	ldr	r2, [pc, #404]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7ff fcc2 	bl	80024c8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7ff fcbe 	bl	80024c8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e207      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0xc0>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff fcae 	bl	80024c8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7ff fcaa 	bl	80024c8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1f3      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	4b51      	ldr	r3, [pc, #324]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0xe8>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d063      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002baa:	4b47      	ldr	r3, [pc, #284]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b44      	ldr	r3, [pc, #272]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d116      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	4b41      	ldr	r3, [pc, #260]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x152>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e1c7      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4937      	ldr	r1, [pc, #220]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bee:	e03a      	b.n	8002c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf8:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_OscConfig+0x244>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7ff fc63 	bl	80024c8 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c06:	f7ff fc5f 	bl	80024c8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1a8      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c18:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4925      	ldr	r1, [pc, #148]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_RCC_OscConfig+0x244>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7ff fc42 	bl	80024c8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c48:	f7ff fc3e 	bl	80024c8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e187      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d036      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d016      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_RCC_OscConfig+0x248>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7ff fc22 	bl	80024c8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c88:	f7ff fc1e 	bl	80024c8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e167      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x200>
 8002ca6:	e01b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_RCC_OscConfig+0x248>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7ff fc0b 	bl	80024c8 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	e00e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7ff fc07 	bl	80024c8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d907      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e150      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	42470000 	.word	0x42470000
 8002cd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b88      	ldr	r3, [pc, #544]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ea      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8097 	beq.w	8002e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b81      	ldr	r3, [pc, #516]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	4a7c      	ldr	r2, [pc, #496]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b77      	ldr	r3, [pc, #476]	@ (8002efc <HAL_RCC_OscConfig+0x474>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b74      	ldr	r3, [pc, #464]	@ (8002efc <HAL_RCC_OscConfig+0x474>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a73      	ldr	r2, [pc, #460]	@ (8002efc <HAL_RCC_OscConfig+0x474>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7ff fbc7 	bl	80024c8 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7ff fbc3 	bl	80024c8 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e10c      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <HAL_RCC_OscConfig+0x474>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2ea>
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	4a63      	ldr	r2, [pc, #396]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d70:	e01c      	b.n	8002dac <HAL_RCC_OscConfig+0x324>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x30c>
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d86:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0x324>
 8002d94:	4b58      	ldr	r3, [pc, #352]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d98:	4a57      	ldr	r2, [pc, #348]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da0:	4b55      	ldr	r3, [pc, #340]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a54      	ldr	r2, [pc, #336]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 0304 	bic.w	r3, r3, #4
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7ff fb88 	bl	80024c8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7ff fb84 	bl	80024c8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0cb      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ee      	beq.n	8002dbc <HAL_RCC_OscConfig+0x334>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7ff fb72 	bl	80024c8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7ff fb6e 	bl	80024c8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0b5      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ee      	bne.n	8002de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b39      	ldr	r3, [pc, #228]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	4a38      	ldr	r2, [pc, #224]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a1 	beq.w	8002f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e26:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d05c      	beq.n	8002eec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d141      	bne.n	8002ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <HAL_RCC_OscConfig+0x478>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff fb42 	bl	80024c8 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7ff fb3e 	bl	80024c8 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e087      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	019b      	lsls	r3, r3, #6
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	491b      	ldr	r1, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x478>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7ff fb17 	bl	80024c8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7ff fb13 	bl	80024c8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e05c      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x416>
 8002ebc:	e054      	b.n	8002f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_RCC_OscConfig+0x478>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fb00 	bl	80024c8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7ff fafc 	bl	80024c8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e045      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x444>
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e038      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_RCC_OscConfig+0x4ec>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d028      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d121      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d11a      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d111      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0cc      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b68      	ldr	r3, [pc, #416]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d90c      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b65      	ldr	r3, [pc, #404]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0b8      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fcc:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a58      	ldr	r2, [pc, #352]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe4:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	494d      	ldr	r1, [pc, #308]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d044      	beq.n	8003098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d119      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e07f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d003      	beq.n	8003036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	2b03      	cmp	r3, #3
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3b      	ldr	r3, [pc, #236]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e067      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b37      	ldr	r3, [pc, #220]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4934      	ldr	r1, [pc, #208]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003068:	f7ff fa2e 	bl	80024c8 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7ff fa2a 	bl	80024c8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04f      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b25      	ldr	r3, [pc, #148]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d20c      	bcs.n	80030c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e032      	b.n	8003126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4916      	ldr	r1, [pc, #88]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	490e      	ldr	r1, [pc, #56]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030fe:	f000 f821 	bl	8003144 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490a      	ldr	r1, [pc, #40]	@ (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	fa22 f303 	lsr.w	r3, r2, r3
 8003116:	4a09      	ldr	r2, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe ffa8 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00
 8003134:	40023800 	.word	0x40023800
 8003138:	08007c40 	.word	0x08007c40
 800313c:	20000000 	.word	0x20000000
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003148:	b094      	sub	sp, #80	@ 0x50
 800314a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003150:	2300      	movs	r3, #0
 8003152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003154:	2300      	movs	r3, #0
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315c:	4b79      	ldr	r3, [pc, #484]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d00d      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x40>
 8003168:	2b08      	cmp	r3, #8
 800316a:	f200 80e1 	bhi.w	8003330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x34>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x3a>
 8003176:	e0db      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b73      	ldr	r3, [pc, #460]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x204>)
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800317c:	e0db      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317e:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_RCC_GetSysClockFreq+0x208>)
 8003180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003182:	e0d8      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003184:	4b6f      	ldr	r3, [pc, #444]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800318e:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319a:	4b6a      	ldr	r3, [pc, #424]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	2200      	movs	r2, #0
 80031a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ae:	2300      	movs	r3, #0
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031b6:	4622      	mov	r2, r4
 80031b8:	462b      	mov	r3, r5
 80031ba:	f04f 0000 	mov.w	r0, #0
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	0159      	lsls	r1, r3, #5
 80031c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c8:	0150      	lsls	r0, r2, #5
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4621      	mov	r1, r4
 80031d0:	1a51      	subs	r1, r2, r1
 80031d2:	6139      	str	r1, [r7, #16]
 80031d4:	4629      	mov	r1, r5
 80031d6:	eb63 0301 	sbc.w	r3, r3, r1
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e8:	4659      	mov	r1, fp
 80031ea:	018b      	lsls	r3, r1, #6
 80031ec:	4651      	mov	r1, sl
 80031ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031f2:	4651      	mov	r1, sl
 80031f4:	018a      	lsls	r2, r1, #6
 80031f6:	4651      	mov	r1, sl
 80031f8:	ebb2 0801 	subs.w	r8, r2, r1
 80031fc:	4659      	mov	r1, fp
 80031fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800320e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003216:	4690      	mov	r8, r2
 8003218:	4699      	mov	r9, r3
 800321a:	4623      	mov	r3, r4
 800321c:	eb18 0303 	adds.w	r3, r8, r3
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	462b      	mov	r3, r5
 8003224:	eb49 0303 	adc.w	r3, r9, r3
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003236:	4629      	mov	r1, r5
 8003238:	024b      	lsls	r3, r1, #9
 800323a:	4621      	mov	r1, r4
 800323c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003240:	4621      	mov	r1, r4
 8003242:	024a      	lsls	r2, r1, #9
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324a:	2200      	movs	r2, #0
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003254:	f7fd fc62 	bl	8000b1c <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003260:	e058      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	2200      	movs	r2, #0
 800326a:	4618      	mov	r0, r3
 800326c:	4611      	mov	r1, r2
 800326e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
 8003278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	f04f 0000 	mov.w	r0, #0
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	0159      	lsls	r1, r3, #5
 800328a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328e:	0150      	lsls	r0, r2, #5
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4641      	mov	r1, r8
 8003296:	ebb2 0a01 	subs.w	sl, r2, r1
 800329a:	4649      	mov	r1, r9
 800329c:	eb63 0b01 	sbc.w	fp, r3, r1
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032b4:	ebb2 040a 	subs.w	r4, r2, sl
 80032b8:	eb63 050b 	sbc.w	r5, r3, fp
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	00eb      	lsls	r3, r5, #3
 80032c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ca:	00e2      	lsls	r2, r4, #3
 80032cc:	4614      	mov	r4, r2
 80032ce:	461d      	mov	r5, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	18e3      	adds	r3, r4, r3
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	464b      	mov	r3, r9
 80032d8:	eb45 0303 	adc.w	r3, r5, r3
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ea:	4629      	mov	r1, r5
 80032ec:	028b      	lsls	r3, r1, #10
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f4:	4621      	mov	r1, r4
 80032f6:	028a      	lsls	r2, r1, #10
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	61fa      	str	r2, [r7, #28]
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	f7fd fc08 	bl	8000b1c <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x200>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	3301      	adds	r3, #1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800332e:	e002      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x204>)
 8003332:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003338:	4618      	mov	r0, r3
 800333a:	3750      	adds	r7, #80	@ 0x50
 800333c:	46bd      	mov	sp, r7
 800333e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	00f42400 	.word	0x00f42400
 800334c:	007a1200 	.word	0x007a1200

08003350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003354:	4b03      	ldr	r3, [pc, #12]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000000 	.word	0x20000000

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800336c:	f7ff fff0 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	08007c50 	.word	0x08007c50

08003390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003394:	f7ff ffdc 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0b5b      	lsrs	r3, r3, #13
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	@ (80033b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08007c50 	.word	0x08007c50

080033b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	220f      	movs	r2, #15
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0203 	and.w	r2, r3, #3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033ec:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <HAL_RCC_GetClockConfig+0x5c>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	08db      	lsrs	r3, r3, #3
 80033f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <HAL_RCC_GetClockConfig+0x60>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0207 	and.w	r2, r3, #7
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	601a      	str	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	40023c00 	.word	0x40023c00

0800341c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f839 	bl	80034ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 f9c0 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04e      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_TIM_Base_Start_IT+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003512:	d01d      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_TIM_Base_Start_IT+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_TIM_Base_Start_IT+0xcc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1c      	ldr	r2, [pc, #112]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	@ (80035a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a18      	ldr	r2, [pc, #96]	@ (80035ac <HAL_TIM_Base_Start_IT+0xdc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d010      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e007      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8d2 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8c4 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8d5 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8ac 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f89e 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8af 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f886 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f878 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f889 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f860 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f852 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f863 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fb2c 	bl	8001d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f906 	bl	800394c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f834 	bl	80037cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8d8 	bl	8003938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a46      	ldr	r2, [pc, #280]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a43      	ldr	r2, [pc, #268]	@ (8003910 <TIM_Base_SetConfig+0x130>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a42      	ldr	r2, [pc, #264]	@ (8003914 <TIM_Base_SetConfig+0x134>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a41      	ldr	r2, [pc, #260]	@ (8003918 <TIM_Base_SetConfig+0x138>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a40      	ldr	r2, [pc, #256]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a35      	ldr	r2, [pc, #212]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d027      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a32      	ldr	r2, [pc, #200]	@ (8003910 <TIM_Base_SetConfig+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d023      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a31      	ldr	r2, [pc, #196]	@ (8003914 <TIM_Base_SetConfig+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <TIM_Base_SetConfig+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2f      	ldr	r2, [pc, #188]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2e      	ldr	r2, [pc, #184]	@ (8003920 <TIM_Base_SetConfig+0x140>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <TIM_Base_SetConfig+0x144>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <TIM_Base_SetConfig+0x148>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <TIM_Base_SetConfig+0x14c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <TIM_Base_SetConfig+0x150>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <TIM_Base_SetConfig+0x154>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0xf8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
  }
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	40001800 	.word	0x40001800
 8003930:	40001c00 	.word	0x40001c00
 8003934:	40002000 	.word	0x40002000

08003938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e033      	b.n	80039da <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe fb2c 	bl	8001fe4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f90b 	bl	8003bb0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039b8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08a      	sub	sp, #40	@ 0x28
 80039e6:	af02      	add	r7, sp, #8
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d17c      	bne.n	8003af8 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_USART_Transmit+0x28>
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e075      	b.n	8003afa <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_USART_Transmit+0x3a>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e06e      	b.n	8003afa <HAL_USART_Transmit+0x118>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2212      	movs	r2, #18
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a32:	f7fe fd49 	bl	80024c8 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_USART_Transmit+0x7e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003a68:	e02a      	b.n	8003ac0 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f844 	bl	8003b02 <USART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03a      	b.n	8003afa <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cf      	bne.n	8003a6a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	@ 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f814 	bl	8003b02 <USART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00a      	b.n	8003afa <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003b12:	e038      	b.n	8003b86 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d034      	beq.n	8003b86 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <USART_WaitOnFlagUntilTimeout+0x30>
 8003b22:	f7fe fcd1 	bl	80024c8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d229      	bcs.n	8003b86 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b40:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0220 	bic.w	r2, r2, #32
 8003b50:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b60:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0b7      	beq.n	8003b14 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b0c6      	sub	sp, #280	@ 0x118
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	f021 030c 	bic.w	r3, r1, #12
 8003bd4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003bfa:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003c3a:	f023 030c 	bic.w	r3, r3, #12
 8003c3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c70:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6959      	ldr	r1, [r3, #20]
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8003c84:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b8b      	ldr	r3, [pc, #556]	@ (8003ebc <USART_SetConfig+0x30c>)
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d006      	beq.n	8003ca0 <USART_SetConfig+0xf0>
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b89      	ldr	r3, [pc, #548]	@ (8003ec0 <USART_SetConfig+0x310>)
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f040 8114 	bne.w	8003ec8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca0:	f7ff fb76 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 8003ca4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cb2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003cb6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	1891      	adds	r1, r2, r2
 8003cc0:	6739      	str	r1, [r7, #112]	@ 0x70
 8003cc2:	415b      	adcs	r3, r3
 8003cc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003cca:	4621      	mov	r1, r4
 8003ccc:	eb12 0801 	adds.w	r8, r2, r1
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	eb43 0901 	adc.w	r9, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cea:	4690      	mov	r8, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb18 0303 	adds.w	r3, r8, r3
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	eb49 0303 	adc.w	r3, r9, r3
 8003cfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d0e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003d12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d16:	460b      	mov	r3, r1
 8003d18:	18db      	adds	r3, r3, r3
 8003d1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	eb42 0303 	adc.w	r3, r2, r3
 8003d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d24:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d28:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003d2c:	f7fc fef6 	bl	8000b1c <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4b63      	ldr	r3, [pc, #396]	@ (8003ec4 <USART_SetConfig+0x314>)
 8003d36:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	011c      	lsls	r4, r3, #4
 8003d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d48:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d4c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	6639      	str	r1, [r7, #96]	@ 0x60
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d5c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d94:	464b      	mov	r3, r9
 8003d96:	460a      	mov	r2, r1
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dac:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003db0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003db4:	460b      	mov	r3, r1
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dba:	4613      	mov	r3, r2
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dc6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dca:	f7fc fea7 	bl	8000b1c <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <USART_SetConfig+0x314>)
 8003dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2264      	movs	r2, #100	@ 0x64
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	1acb      	subs	r3, r1, r3
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003dea:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <USART_SetConfig+0x314>)
 8003dec:	fba3 2302 	umull	r2, r3, r3, r2
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003df8:	441c      	add	r4, r3
 8003dfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e14:	415b      	adcs	r3, r3
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	1851      	adds	r1, r2, r1
 8003e20:	6439      	str	r1, [r7, #64]	@ 0x40
 8003e22:	4649      	mov	r1, r9
 8003e24:	414b      	adcs	r3, r1
 8003e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8003e34:	4659      	mov	r1, fp
 8003e36:	00cb      	lsls	r3, r1, #3
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3e:	4651      	mov	r1, sl
 8003e40:	00ca      	lsls	r2, r1, #3
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	4642      	mov	r2, r8
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e50:	464b      	mov	r3, r9
 8003e52:	460a      	mov	r2, r1
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e70:	460b      	mov	r3, r1
 8003e72:	18db      	adds	r3, r3, r3
 8003e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e76:	4613      	mov	r3, r2
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e86:	f7fc fe49 	bl	8000b1c <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <USART_SetConfig+0x314>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	@ 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	3332      	adds	r3, #50	@ 0x32
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <USART_SetConfig+0x314>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 0207 	and.w	r2, r3, #7
 8003eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4422      	add	r2, r4
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e109      	b.n	80040ce <USART_SetConfig+0x51e>
 8003eba:	bf00      	nop
 8003ebc:	40011000 	.word	0x40011000
 8003ec0:	40011400 	.word	0x40011400
 8003ec4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7ff fa4e 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003ed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eda:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ede:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eea:	415b      	adcs	r3, r3
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1854      	adds	r4, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb43 0501 	adc.w	r5, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	00eb      	lsls	r3, r5, #3
 8003f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0a:	00e2      	lsls	r2, r4, #3
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	18e3      	adds	r3, r4, r3
 8003f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f18:	464b      	mov	r3, r9
 8003f1a:	eb45 0303 	adc.w	r3, r5, r3
 8003f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f2e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f36:	460b      	mov	r3, r1
 8003f38:	18db      	adds	r3, r3, r3
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	eb42 0303 	adc.w	r3, r2, r3
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f48:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f4c:	f7fc fde6 	bl	8000b1c <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4b61      	ldr	r3, [pc, #388]	@ (80040dc <USART_SetConfig+0x52c>)
 8003f56:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	011c      	lsls	r4, r3, #4
 8003f5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f6c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	6239      	str	r1, [r7, #32]
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f80:	4641      	mov	r1, r8
 8003f82:	eb12 0a01 	adds.w	sl, r2, r1
 8003f86:	4649      	mov	r1, r9
 8003f88:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	469b      	mov	fp, r3
 8003fa4:	4643      	mov	r3, r8
 8003fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fae:	464b      	mov	r3, r9
 8003fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fc4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fc8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003fcc:	460b      	mov	r3, r1
 8003fce:	18db      	adds	r3, r3, r3
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	eb42 0303 	adc.w	r3, r2, r3
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fde:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fe2:	f7fc fd9b 	bl	8000b1c <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <USART_SetConfig+0x52c>)
 8003fee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2264      	movs	r2, #100	@ 0x64
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	1acb      	subs	r3, r1, r3
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004002:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <USART_SetConfig+0x52c>)
 8004004:	fba3 2302 	umull	r2, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004010:	441c      	add	r4, r3
 8004012:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004016:	2200      	movs	r2, #0
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800401c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004024:	4642      	mov	r2, r8
 8004026:	464b      	mov	r3, r9
 8004028:	1891      	adds	r1, r2, r2
 800402a:	6139      	str	r1, [r7, #16]
 800402c:	415b      	adcs	r3, r3
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004034:	4641      	mov	r1, r8
 8004036:	1851      	adds	r1, r2, r1
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4649      	mov	r1, r9
 800403c:	414b      	adcs	r3, r1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800404c:	4659      	mov	r1, fp
 800404e:	00cb      	lsls	r3, r1, #3
 8004050:	4651      	mov	r1, sl
 8004052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004056:	4651      	mov	r1, sl
 8004058:	00ca      	lsls	r2, r1, #3
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	4603      	mov	r3, r0
 8004060:	4642      	mov	r2, r8
 8004062:	189b      	adds	r3, r3, r2
 8004064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004068:	464b      	mov	r3, r9
 800406a:	460a      	mov	r2, r1
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800407e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004080:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800409a:	f7fc fd3f 	bl	8000b1c <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <USART_SetConfig+0x52c>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	@ 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	3332      	adds	r3, #50	@ 0x32
 80040b6:	4a09      	ldr	r2, [pc, #36]	@ (80040dc <USART_SetConfig+0x52c>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f003 0207 	and.w	r2, r3, #7
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4422      	add	r2, r4
 80040ca:	609a      	str	r2, [r3, #8]
  }
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	51eb851f 	.word	0x51eb851f

080040e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f2:	2b84      	cmp	r3, #132	@ 0x84
 80040f4:	d005      	beq.n	8004102 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	3303      	adds	r3, #3
 8004100:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004116:	f3ef 8305 	mrs	r3, IPSR
 800411a:	607b      	str	r3, [r7, #4]
  return(result);
 800411c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004138:	f001 fa08 	bl	800554c <vTaskStartScheduler>
  
  return osOK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}

08004142 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004144:	b089      	sub	sp, #36	@ 0x24
 8004146:	af04      	add	r7, sp, #16
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <osThreadCreate+0x54>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01c      	beq.n	8004196 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685c      	ldr	r4, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691e      	ldr	r6, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ffb6 	bl	80040e0 <makeFreeRtosPriority>
 8004174:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800417e:	9202      	str	r2, [sp, #8]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	9100      	str	r1, [sp, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4632      	mov	r2, r6
 8004188:	4629      	mov	r1, r5
 800418a:	4620      	mov	r0, r4
 800418c:	f001 f810 	bl	80051b0 <xTaskCreateStatic>
 8004190:	4603      	mov	r3, r0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e01c      	b.n	80041d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685c      	ldr	r4, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff98 	bl	80040e0 <makeFreeRtosPriority>
 80041b0:	4602      	mov	r2, r0
 80041b2:	f107 030c 	add.w	r3, r7, #12
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	4632      	mov	r2, r6
 80041be:	4629      	mov	r1, r5
 80041c0:	4620      	mov	r0, r4
 80041c2:	f001 f855 	bl	8005270 <xTaskCreate>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d0:	68fb      	ldr	r3, [r7, #12]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <osDelay+0x16>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	e000      	b.n	80041f2 <osDelay+0x18>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 f974 	bl	80054e0 <vTaskDelay>
  
  return osOK;
 80041f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8004216:	f7ff ff7b 	bl	8004110 <inHandlerMode>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01c      	beq.n	800425a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	f107 0208 	add.w	r2, r7, #8
 8004226:	f107 030c 	add.w	r3, r7, #12
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	2201      	movs	r2, #1
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 ff4d 	bl	80060d0 <xTaskGenericNotifyFromISR>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <osSignalSet+0x3e>
      return 0x80000000;
 800423c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004240:	e019      	b.n	8004276 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <osSignalSet+0x70>
 8004248:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <osSignalSet+0x7c>)
 800424a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	e00c      	b.n	8004274 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	f107 0308 	add.w	r3, r7, #8
 8004260:	2201      	movs	r2, #1
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f001 fe7c 	bl	8005f60 <xTaskGenericNotify>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d002      	beq.n	8004274 <osSignalSet+0x70>
    return 0x80000000;
 800426e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004272:	e000      	b.n	8004276 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8004274:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b089      	sub	sp, #36	@ 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d103      	bne.n	80042a8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e009      	b.n	80042bc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <osSignalWait+0x38>
      ticks = 1;
 80042b8:	2301      	movs	r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80042bc:	f7ff ff28 	bl	8004110 <inHandlerMode>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80042c6:	2382      	movs	r3, #130	@ 0x82
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e01b      	b.n	8004304 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	f107 0310 	add.w	r3, r7, #16
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2000      	movs	r0, #0
 80042d8:	f001 fde8 	bl	8005eac <xTaskNotifyWait>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d008      	beq.n	80042f4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <osSignalWait+0x6a>
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e00a      	b.n	8004304 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80042ee:	2340      	movs	r3, #64	@ 0x40
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e007      	b.n	8004304 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da02      	bge.n	8004300 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80042fa:	2386      	movs	r3, #134	@ 0x86
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e001      	b.n	8004304 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8004300:	2308      	movs	r3, #8
 8004302:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	461c      	mov	r4, r3
 8004308:	f107 0310 	add.w	r3, r7, #16
 800430c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	3724      	adds	r7, #36	@ 0x24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}

0800431c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4619      	mov	r1, r3
 8004332:	2001      	movs	r0, #1
 8004334:	f000 fb0d 	bl	8004952 <xQueueCreateMutexStatic>
 8004338:	4603      	mov	r3, r0
 800433a:	e003      	b.n	8004344 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800433c:	2001      	movs	r0, #1
 800433e:	f000 faf0 	bl	8004922 <xQueueCreateMutex>
 8004342:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b085      	sub	sp, #20
 8004350:	af02      	add	r7, sp, #8
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d011      	beq.n	8004382 <osMessageCreate+0x36>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2400      	movs	r4, #0
 8004378:	9400      	str	r4, [sp, #0]
 800437a:	f000 f9e1 	bl	8004740 <xQueueGenericCreateStatic>
 800437e:	4603      	mov	r3, r0
 8004380:	e008      	b.n	8004394 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	4619      	mov	r1, r3
 800438e:	f000 fa54 	bl	800483a <xQueueGenericCreate>
 8004392:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <osMessagePut+0x1e>
    ticks = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80043ba:	f7ff fea9 	bl	8004110 <inHandlerMode>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d018      	beq.n	80043f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80043c4:	f107 0210 	add.w	r2, r7, #16
 80043c8:	f107 0108 	add.w	r1, r7, #8
 80043cc:	2300      	movs	r3, #0
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fbdc 	bl	8004b8c <xQueueGenericSendFromISR>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <osMessagePut+0x42>
      return osErrorOS;
 80043da:	23ff      	movs	r3, #255	@ 0xff
 80043dc:	e018      	b.n	8004410 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d014      	beq.n	800440e <osMessagePut+0x72>
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <osMessagePut+0x7c>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	e00b      	b.n	800440e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80043f6:	f107 0108 	add.w	r1, r7, #8
 80043fa:	2300      	movs	r3, #0
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fac2 	bl	8004988 <xQueueGenericSend>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <osMessagePut+0x72>
      return osErrorOS;
 800440a:	23ff      	movs	r3, #255	@ 0xff
 800440c:	e000      	b.n	8004410 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b08b      	sub	sp, #44	@ 0x2c
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	617b      	str	r3, [r7, #20]
    return event;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	461c      	mov	r4, r3
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800444a:	e054      	b.n	80044f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d103      	bne.n	8004464 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
 8004462:	e009      	b.n	8004478 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <osMessageGet+0x5c>
      ticks = 1;
 8004474:	2301      	movs	r3, #1
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004478:	f7ff fe4a 	bl	8004110 <inHandlerMode>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01c      	beq.n	80044bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004482:	f107 0220 	add.w	r2, r7, #32
 8004486:	f107 0314 	add.w	r3, r7, #20
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f000 fcfc 	bl	8004e8c <xQueueReceiveFromISR>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800449a:	2310      	movs	r3, #16
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e001      	b.n	80044a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01d      	beq.n	80044e6 <osMessageGet+0xca>
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <osMessageGet+0xe4>)
 80044ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	e014      	b.n	80044e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80044bc:	f107 0314 	add.w	r3, r7, #20
 80044c0:	3304      	adds	r3, #4
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	4619      	mov	r1, r3
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f000 fbfe 	bl	8004cc8 <xQueueReceive>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80044d2:	2310      	movs	r3, #16
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e006      	b.n	80044e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <osMessageGet+0xc6>
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <osMessageGet+0xc8>
 80044e2:	2340      	movs	r3, #64	@ 0x40
 80044e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	461c      	mov	r4, r3
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	372c      	adds	r7, #44	@ 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	bf00      	nop
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f103 0208 	add.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 0208 	add.w	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f103 0208 	add.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d103      	bne.n	80045c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e00c      	b.n	80045e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3308      	adds	r3, #8
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e002      	b.n	80045d4 <vListInsert+0x2e>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d2f6      	bcs.n	80045ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6892      	ldr	r2, [r2, #8]
 800462e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6852      	ldr	r2, [r2, #4]
 8004638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d103      	bne.n	800464c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004698:	f001 ff8e 	bl	80065b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a4:	68f9      	ldr	r1, [r7, #12]
 80046a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	22ff      	movs	r2, #255	@ 0xff
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	22ff      	movs	r2, #255	@ 0xff
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d114      	bne.n	8004718 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3310      	adds	r3, #16
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f970 	bl	80059e0 <xTaskRemoveFromEventList>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <xQueueGenericReset+0xd0>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	e009      	b.n	800472c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3310      	adds	r3, #16
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fef1 	bl	8004504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3324      	adds	r3, #36	@ 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff feec 	bl	8004504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800472c:	f001 ff76 	bl	800661c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004730:	2301      	movs	r3, #1
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08e      	sub	sp, #56	@ 0x38
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	e7fd      	b.n	8004786 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <xQueueGenericCreateStatic+0x56>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xQueueGenericCreateStatic+0x5a>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericCreateStatic+0x5c>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <xQueueGenericCreateStatic+0x84>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <xQueueGenericCreateStatic+0x88>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <xQueueGenericCreateStatic+0x8a>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	61fb      	str	r3, [r7, #28]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047e6:	2348      	movs	r3, #72	@ 0x48
 80047e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b48      	cmp	r3, #72	@ 0x48
 80047ee:	d00b      	beq.n	8004808 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61bb      	str	r3, [r7, #24]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004808:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800481c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f840 	bl	80048b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3730      	adds	r7, #48	@ 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800483a:	b580      	push	{r7, lr}
 800483c:	b08a      	sub	sp, #40	@ 0x28
 800483e:	af02      	add	r7, sp, #8
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <xQueueGenericCreate+0x2c>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	613b      	str	r3, [r7, #16]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	3348      	adds	r3, #72	@ 0x48
 8004874:	4618      	mov	r0, r3
 8004876:	f001 ffc1 	bl	80067fc <pvPortMalloc>
 800487a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3348      	adds	r3, #72	@ 0x48
 800488a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004894:	79fa      	ldrb	r2, [r7, #7]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f805 	bl	80048b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048a6:	69bb      	ldr	r3, [r7, #24]
	}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d103      	bne.n	80048cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048de:	2101      	movs	r1, #1
 80048e0:	69b8      	ldr	r0, [r7, #24]
 80048e2:	f7ff fec3 	bl	800466c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00e      	beq.n	800491a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800490e:	2300      	movs	r3, #0
 8004910:	2200      	movs	r2, #0
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f837 	bl	8004988 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	461a      	mov	r2, r3
 8004938:	6939      	ldr	r1, [r7, #16]
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f7ff ff7d 	bl	800483a <xQueueGenericCreate>
 8004940:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ffd3 	bl	80048ee <prvInitialiseMutex>

		return xNewQueue;
 8004948:	68fb      	ldr	r3, [r7, #12]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004952:	b580      	push	{r7, lr}
 8004954:	b088      	sub	sp, #32
 8004956:	af02      	add	r7, sp, #8
 8004958:	4603      	mov	r3, r0
 800495a:	6039      	str	r1, [r7, #0]
 800495c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2200      	movs	r2, #0
 800496e:	6939      	ldr	r1, [r7, #16]
 8004970:	6978      	ldr	r0, [r7, #20]
 8004972:	f7ff fee5 	bl	8004740 <xQueueGenericCreateStatic>
 8004976:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff ffb8 	bl	80048ee <prvInitialiseMutex>

		return xNewQueue;
 800497e:	68fb      	ldr	r3, [r7, #12]
	}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	@ 0x38
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004996:	2300      	movs	r3, #0
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10b      	bne.n	80049bc <xQueueGenericSend+0x34>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049b6:	bf00      	nop
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <xQueueGenericSend+0x42>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <xQueueGenericSend+0x46>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <xQueueGenericSend+0x48>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <xQueueGenericSend+0x64>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d103      	bne.n	80049fa <xQueueGenericSend+0x72>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <xQueueGenericSend+0x76>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <xQueueGenericSend+0x78>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xQueueGenericSend+0x94>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	623b      	str	r3, [r7, #32]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a1c:	f001 f9a0 	bl	8005d60 <xTaskGetSchedulerState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <xQueueGenericSend+0xa4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <xQueueGenericSend+0xa8>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <xQueueGenericSend+0xaa>
 8004a30:	2300      	movs	r3, #0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <xQueueGenericSend+0xc6>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	61fb      	str	r3, [r7, #28]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a4e:	f001 fdb3 	bl	80065b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <xQueueGenericSend+0xdc>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d129      	bne.n	8004ab8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6a:	f000 fa91 	bl	8004f90 <prvCopyDataToQueue>
 8004a6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	3324      	adds	r3, #36	@ 0x24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 ffaf 	bl	80059e0 <xTaskRemoveFromEventList>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a88:	4b3f      	ldr	r3, [pc, #252]	@ (8004b88 <xQueueGenericSend+0x200>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	e00a      	b.n	8004ab0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004aa0:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <xQueueGenericSend+0x200>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ab0:	f001 fdb4 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e063      	b.n	8004b80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004abe:	f001 fdad 	bl	800661c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e05c      	b.n	8004b80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 ffe9 	bl	8005aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ada:	f001 fd9f 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ade:	f000 fd97 	bl	8005610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ae2:	f001 fd69 	bl	80065b8 <vPortEnterCritical>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d103      	bne.n	8004afc <xQueueGenericSend+0x174>
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d103      	bne.n	8004b12 <xQueueGenericSend+0x18a>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b12:	f001 fd83 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b16:	1d3a      	adds	r2, r7, #4
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 ffd8 	bl	8005ad4 <xTaskCheckForTimeOut>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d124      	bne.n	8004b74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b2c:	f000 fb28 	bl	8005180 <prvIsQueueFull>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	3310      	adds	r3, #16
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 ff28 	bl	8005994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b46:	f000 fab3 	bl	80050b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b4a:	f000 fd6f 	bl	800562c <xTaskResumeAll>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af7c 	bne.w	8004a4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <xQueueGenericSend+0x200>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	e772      	b.n	8004a4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b6a:	f000 faa1 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b6e:	f000 fd5d 	bl	800562c <xTaskResumeAll>
 8004b72:	e76c      	b.n	8004a4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b76:	f000 fa9b 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b7a:	f000 fd57 	bl	800562c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3738      	adds	r7, #56	@ 0x38
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b090      	sub	sp, #64	@ 0x40
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSendFromISR+0x3e>
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericSendFromISR+0x42>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericSendFromISR+0x44>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSendFromISR+0x6e>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSendFromISR+0x72>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSendFromISR+0x74>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1c:	f001 fdac 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c20:	f3ef 8211 	mrs	r2, BASEPRI
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d302      	bcc.n	8004c4e <xQueueGenericSendFromISR+0xc2>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d12f      	bne.n	8004cae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c64:	f000 f994 	bl	8004f90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d112      	bne.n	8004c98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	3324      	adds	r3, #36	@ 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 feae 	bl	80059e0 <xTaskRemoveFromEventList>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e007      	b.n	8004ca8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	b25a      	sxtb	r2, r3
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004cac:	e001      	b.n	8004cb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3740      	adds	r7, #64	@ 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	@ 0x30
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <xQueueReceive+0x32>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	623b      	str	r3, [r7, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <xQueueReceive+0x40>
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xQueueReceive+0x44>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <xQueueReceive+0x46>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xQueueReceive+0x62>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	61fb      	str	r3, [r7, #28]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d2a:	f001 f819 	bl	8005d60 <xTaskGetSchedulerState>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <xQueueReceive+0x72>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xQueueReceive+0x76>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueReceive+0x78>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <xQueueReceive+0x94>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d5c:	f001 fc2c 	bl	80065b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01f      	beq.n	8004dac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d70:	f000 f978 	bl	8005064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	3310      	adds	r3, #16
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fe29 	bl	80059e0 <xTaskRemoveFromEventList>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d94:	4b3c      	ldr	r3, [pc, #240]	@ (8004e88 <xQueueReceive+0x1c0>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004da4:	f001 fc3a 	bl	800661c <vPortExitCritical>
				return pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e069      	b.n	8004e80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004db2:	f001 fc33 	bl	800661c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e062      	b.n	8004e80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fe6f 	bl	8005aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dce:	f001 fc25 	bl	800661c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dd2:	f000 fc1d 	bl	8005610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dd6:	f001 fbef 	bl	80065b8 <vPortEnterCritical>
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004de0:	b25b      	sxtb	r3, r3
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d103      	bne.n	8004df0 <xQueueReceive+0x128>
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d103      	bne.n	8004e06 <xQueueReceive+0x13e>
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e06:	f001 fc09 	bl	800661c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0a:	1d3a      	adds	r2, r7, #4
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fe5e 	bl	8005ad4 <xTaskCheckForTimeOut>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d123      	bne.n	8004e66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e20:	f000 f998 	bl	8005154 <prvIsQueueEmpty>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2c:	3324      	adds	r3, #36	@ 0x24
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fdae 	bl	8005994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3a:	f000 f939 	bl	80050b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e3e:	f000 fbf5 	bl	800562c <xTaskResumeAll>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d189      	bne.n	8004d5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e48:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <xQueueReceive+0x1c0>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	e780      	b.n	8004d5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e5c:	f000 f928 	bl	80050b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e60:	f000 fbe4 	bl	800562c <xTaskResumeAll>
 8004e64:	e77a      	b.n	8004d5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e68:	f000 f922 	bl	80050b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e6c:	f000 fbde 	bl	800562c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e72:	f000 f96f 	bl	8005154 <prvIsQueueEmpty>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f43f af6f 	beq.w	8004d5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3730      	adds	r7, #48	@ 0x30
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	@ 0x38
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	623b      	str	r3, [r7, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <xQueueReceiveFromISR+0x3c>
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <xQueueReceiveFromISR+0x40>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <xQueueReceiveFromISR+0x42>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	61fb      	str	r3, [r7, #28]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eea:	f001 fc45 	bl	8006778 <vPortValidateInterruptPriority>
	__asm volatile
 8004eee:	f3ef 8211 	mrs	r2, BASEPRI
 8004ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	61ba      	str	r2, [r7, #24]
 8004f04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02f      	beq.n	8004f76 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f24:	f000 f89e 	bl	8005064 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	1e5a      	subs	r2, r3, #1
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d112      	bne.n	8004f60 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	3310      	adds	r3, #16
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fd4a 	bl	80059e0 <xTaskRemoveFromEventList>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e007      	b.n	8004f70 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f64:	3301      	adds	r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	b25a      	sxtb	r2, r3
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004f70:	2301      	movs	r3, #1
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f74:	e001      	b.n	8004f7a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f383 8811 	msr	BASEPRI, r3
}
 8004f84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3738      	adds	r7, #56	@ 0x38
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10d      	bne.n	8004fca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14d      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 feee 	bl	8005d9c <xTaskPriorityDisinherit>
 8004fc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	e043      	b.n	8005052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d119      	bne.n	8005004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6858      	ldr	r0, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	f001 ff8f 	bl	8006efe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d32b      	bcc.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e026      	b.n	8005052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68d8      	ldr	r0, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f001 ff75 	bl	8006efe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	425b      	negs	r3, r3
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d207      	bcs.n	8005040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	425b      	negs	r3, r3
 800503a:	441a      	add	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d105      	bne.n	8005052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3b01      	subs	r3, #1
 8005050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d018      	beq.n	80050a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	441a      	add	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d303      	bcc.n	8005098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	461a      	mov	r2, r3
 80050a2:	6838      	ldr	r0, [r7, #0]
 80050a4:	f001 ff2b 	bl	8006efe <memcpy>
	}
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b8:	f001 fa7e 	bl	80065b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c4:	e011      	b.n	80050ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fc84 	bl	80059e0 <xTaskRemoveFromEventList>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050de:	f000 fd5d 	bl	8005b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dce9      	bgt.n	80050c6 <prvUnlockQueue+0x16>
 80050f2:	e000      	b.n	80050f6 <prvUnlockQueue+0x46>
					break;
 80050f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	22ff      	movs	r2, #255	@ 0xff
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 fa8d 	bl	800661c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005102:	f001 fa59 	bl	80065b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800510c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800510e:	e011      	b.n	8005134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d012      	beq.n	800513e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3310      	adds	r3, #16
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fc5f 	bl	80059e0 <xTaskRemoveFromEventList>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005128:	f000 fd38 	bl	8005b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	3b01      	subs	r3, #1
 8005130:	b2db      	uxtb	r3, r3
 8005132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005138:	2b00      	cmp	r3, #0
 800513a:	dce9      	bgt.n	8005110 <prvUnlockQueue+0x60>
 800513c:	e000      	b.n	8005140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800513e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	22ff      	movs	r2, #255	@ 0xff
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005148:	f001 fa68 	bl	800661c <vPortExitCritical>
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800515c:	f001 fa2c 	bl	80065b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e001      	b.n	8005172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f001 fa53 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005188:	f001 fa16 	bl	80065b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005194:	429a      	cmp	r2, r3
 8005196:	d102      	bne.n	800519e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e001      	b.n	80051a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a2:	f001 fa3b 	bl	800661c <vPortExitCritical>

	return xReturn;
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	@ 0x38
 80051b4:	af04      	add	r7, sp, #16
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	623b      	str	r3, [r7, #32]
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	61fb      	str	r3, [r7, #28]
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fa:	2354      	movs	r3, #84	@ 0x54
 80051fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b54      	cmp	r3, #84	@ 0x54
 8005202:	d00b      	beq.n	800521c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	61bb      	str	r3, [r7, #24]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800521c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800521e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01e      	beq.n	8005262 <xTaskCreateStatic+0xb2>
 8005224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01b      	beq.n	8005262 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800522a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523c:	2300      	movs	r3, #0
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	9302      	str	r3, [sp, #8]
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f850 	bl	80052fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800525a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800525c:	f000 f8d6 	bl	800540c <prvAddNewTaskToReadyList>
 8005260:	e001      	b.n	8005266 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005266:	697b      	ldr	r3, [r7, #20]
	}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	@ 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08c      	sub	sp, #48	@ 0x30
 8005274:	af04      	add	r7, sp, #16
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f001 fab9 	bl	80067fc <pvPortMalloc>
 800528a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005292:	2054      	movs	r0, #84	@ 0x54
 8005294:	f001 fab2 	bl	80067fc <pvPortMalloc>
 8005298:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80052a6:	e005      	b.n	80052b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f001 fb75 	bl	8006998 <vPortFree>
 80052ae:	e001      	b.n	80052b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d017      	beq.n	80052ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	2300      	movs	r3, #0
 80052c6:	9303      	str	r3, [sp, #12]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f80e 	bl	80052fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052de:	69f8      	ldr	r0, [r7, #28]
 80052e0:	f000 f894 	bl	800540c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e4:	2301      	movs	r3, #1
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e002      	b.n	80052f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052f0:	69bb      	ldr	r3, [r7, #24]
	}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b088      	sub	sp, #32
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005312:	3b01      	subs	r3, #1
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	617b      	str	r3, [r7, #20]
}
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	e7fd      	b.n	8005340 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01f      	beq.n	800538a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	e012      	b.n	8005376 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	7819      	ldrb	r1, [r3, #0]
 8005358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	3334      	adds	r3, #52	@ 0x34
 8005360:	460a      	mov	r2, r1
 8005362:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d006      	beq.n	800537e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d9e9      	bls.n	8005350 <prvInitialiseNewTask+0x56>
 800537c:	e000      	b.n	8005380 <prvInitialiseNewTask+0x86>
			{
				break;
 800537e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005388:	e003      	b.n	8005392 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2b06      	cmp	r3, #6
 8005396:	d901      	bls.n	800539c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005398:	2306      	movs	r3, #6
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	3304      	adds	r3, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f8c6 	bl	8004544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	3318      	adds	r3, #24
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff f8c1 	bl	8004544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	f1c3 0207 	rsb	r2, r3, #7
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f000 ffb4 	bl	8006358 <pxPortInitialiseStack>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	bf00      	nop
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005414:	f001 f8d0 	bl	80065b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005418:	4b2a      	ldr	r3, [pc, #168]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005422:	4b29      	ldr	r3, [pc, #164]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800542a:	4a27      	ldr	r2, [pc, #156]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005430:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d110      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005438:	f000 fbd4 	bl	8005be4 <prvInitialiseTaskLists>
 800543c:	e00d      	b.n	800545a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543e:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005446:	4b20      	ldr	r3, [pc, #128]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	429a      	cmp	r2, r3
 8005452:	d802      	bhi.n	800545a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800545a:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a1b      	ldr	r2, [pc, #108]	@ (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 8005462:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a15      	ldr	r2, [pc, #84]	@ (80054d8 <prvAddNewTaskToReadyList+0xcc>)
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7ff f866 	bl	800455e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005492:	f001 f8c3 	bl	800661c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d207      	bcs.n	80054bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <prvAddNewTaskToReadyList+0xd0>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000550 	.word	0x20000550
 80054c8:	20000450 	.word	0x20000450
 80054cc:	2000055c 	.word	0x2000055c
 80054d0:	2000056c 	.word	0x2000056c
 80054d4:	20000558 	.word	0x20000558
 80054d8:	20000454 	.word	0x20000454
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d018      	beq.n	8005524 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054f2:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <vTaskDelay+0x64>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <vTaskDelay+0x32>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005512:	f000 f87d 	bl	8005610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005516:	2100      	movs	r1, #0
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 feb7 	bl	800628c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800551e:	f000 f885 	bl	800562c <xTaskResumeAll>
 8005522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <vTaskDelay+0x68>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000578 	.word	0x20000578
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800555a:	463a      	mov	r2, r7
 800555c:	1d39      	adds	r1, r7, #4
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb ff58 	bl	8001418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	460a      	mov	r2, r1
 800557a:	491f      	ldr	r1, [pc, #124]	@ (80055f8 <vTaskStartScheduler+0xac>)
 800557c:	481f      	ldr	r0, [pc, #124]	@ (80055fc <vTaskStartScheduler+0xb0>)
 800557e:	f7ff fe17 	bl	80051b0 <xTaskCreateStatic>
 8005582:	4603      	mov	r3, r0
 8005584:	4a1e      	ldr	r2, [pc, #120]	@ (8005600 <vTaskStartScheduler+0xb4>)
 8005586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005588:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <vTaskStartScheduler+0xb4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e001      	b.n	800559a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d116      	bne.n	80055ce <vTaskStartScheduler+0x82>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
}
 80055b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055b4:	4b13      	ldr	r3, [pc, #76]	@ (8005604 <vTaskStartScheduler+0xb8>)
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055bc:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <vTaskStartScheduler+0xbc>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055c2:	4b12      	ldr	r3, [pc, #72]	@ (800560c <vTaskStartScheduler+0xc0>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c8:	f000 ff52 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055cc:	e00f      	b.n	80055ee <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d10b      	bne.n	80055ee <vTaskStartScheduler+0xa2>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60fb      	str	r3, [r7, #12]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <vTaskStartScheduler+0x9e>
}
 80055ee:	bf00      	nop
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	08007c38 	.word	0x08007c38
 80055fc:	08005bb5 	.word	0x08005bb5
 8005600:	20000574 	.word	0x20000574
 8005604:	20000570 	.word	0x20000570
 8005608:	2000055c 	.word	0x2000055c
 800560c:	20000554 	.word	0x20000554

08005610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005614:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <vTaskSuspendAll+0x18>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a03      	ldr	r2, [pc, #12]	@ (8005628 <vTaskSuspendAll+0x18>)
 800561c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20000578 	.word	0x20000578

0800562c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800563a:	4b42      	ldr	r3, [pc, #264]	@ (8005744 <xTaskResumeAll+0x118>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <xTaskResumeAll+0x2e>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	603b      	str	r3, [r7, #0]
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	e7fd      	b.n	8005656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800565a:	f000 ffad 	bl	80065b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800565e:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <xTaskResumeAll+0x118>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3b01      	subs	r3, #1
 8005664:	4a37      	ldr	r2, [pc, #220]	@ (8005744 <xTaskResumeAll+0x118>)
 8005666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <xTaskResumeAll+0x118>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d161      	bne.n	8005734 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005670:	4b35      	ldr	r3, [pc, #212]	@ (8005748 <xTaskResumeAll+0x11c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05d      	beq.n	8005734 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005678:	e02e      	b.n	80056d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567a:	4b34      	ldr	r3, [pc, #208]	@ (800574c <xTaskResumeAll+0x120>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3318      	adds	r3, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe ffc6 	bl	8004618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe ffc1 	bl	8004618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b2c      	ldr	r3, [pc, #176]	@ (8005750 <xTaskResumeAll+0x124>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <xTaskResumeAll+0x124>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a27      	ldr	r2, [pc, #156]	@ (8005754 <xTaskResumeAll+0x128>)
 80056b6:	441a      	add	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fe ff4d 	bl	800455e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c8:	4b23      	ldr	r3, [pc, #140]	@ (8005758 <xTaskResumeAll+0x12c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056d2:	4b22      	ldr	r3, [pc, #136]	@ (800575c <xTaskResumeAll+0x130>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d8:	4b1c      	ldr	r3, [pc, #112]	@ (800574c <xTaskResumeAll+0x120>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1cc      	bne.n	800567a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056e6:	f000 fb1b 	bl	8005d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005760 <xTaskResumeAll+0x134>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056f6:	f000 f837 	bl	8005768 <xTaskIncrementTick>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005700:	4b16      	ldr	r3, [pc, #88]	@ (800575c <xTaskResumeAll+0x130>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f1      	bne.n	80056f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <xTaskResumeAll+0x134>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005718:	4b10      	ldr	r3, [pc, #64]	@ (800575c <xTaskResumeAll+0x130>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005724:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <xTaskResumeAll+0x138>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005734:	f000 ff72 	bl	800661c <vPortExitCritical>

	return xAlreadyYielded;
 8005738:	68bb      	ldr	r3, [r7, #8]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000578 	.word	0x20000578
 8005748:	20000550 	.word	0x20000550
 800574c:	20000510 	.word	0x20000510
 8005750:	20000558 	.word	0x20000558
 8005754:	20000454 	.word	0x20000454
 8005758:	20000450 	.word	0x20000450
 800575c:	20000564 	.word	0x20000564
 8005760:	20000560 	.word	0x20000560
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005772:	4b4f      	ldr	r3, [pc, #316]	@ (80058b0 <xTaskIncrementTick+0x148>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 808f 	bne.w	800589a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800577c:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <xTaskIncrementTick+0x14c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005784:	4a4b      	ldr	r2, [pc, #300]	@ (80058b4 <xTaskIncrementTick+0x14c>)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d121      	bne.n	80057d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005790:	4b49      	ldr	r3, [pc, #292]	@ (80058b8 <xTaskIncrementTick+0x150>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	603b      	str	r3, [r7, #0]
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <xTaskIncrementTick+0x46>
 80057b2:	4b41      	ldr	r3, [pc, #260]	@ (80058b8 <xTaskIncrementTick+0x150>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	4b40      	ldr	r3, [pc, #256]	@ (80058bc <xTaskIncrementTick+0x154>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a3e      	ldr	r2, [pc, #248]	@ (80058b8 <xTaskIncrementTick+0x150>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4a3e      	ldr	r2, [pc, #248]	@ (80058bc <xTaskIncrementTick+0x154>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b3e      	ldr	r3, [pc, #248]	@ (80058c0 <xTaskIncrementTick+0x158>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a3c      	ldr	r2, [pc, #240]	@ (80058c0 <xTaskIncrementTick+0x158>)
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	f000 faa6 	bl	8005d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057d4:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <xTaskIncrementTick+0x15c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d348      	bcc.n	8005870 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057de:	4b36      	ldr	r3, [pc, #216]	@ (80058b8 <xTaskIncrementTick+0x150>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e8:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <xTaskIncrementTick+0x15c>)
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	601a      	str	r2, [r3, #0]
					break;
 80057f0:	e03e      	b.n	8005870 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f2:	4b31      	ldr	r3, [pc, #196]	@ (80058b8 <xTaskIncrementTick+0x150>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	429a      	cmp	r2, r3
 8005808:	d203      	bcs.n	8005812 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800580a:	4a2e      	ldr	r2, [pc, #184]	@ (80058c4 <xTaskIncrementTick+0x15c>)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005810:	e02e      	b.n	8005870 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	3304      	adds	r3, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fefe 	bl	8004618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3318      	adds	r3, #24
 8005828:	4618      	mov	r0, r3
 800582a:	f7fe fef5 	bl	8004618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	2201      	movs	r2, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <xTaskIncrementTick+0x160>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4313      	orrs	r3, r2
 800583c:	4a22      	ldr	r2, [pc, #136]	@ (80058c8 <xTaskIncrementTick+0x160>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a1f      	ldr	r2, [pc, #124]	@ (80058cc <xTaskIncrementTick+0x164>)
 800584e:	441a      	add	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f7fe fe81 	bl	800455e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005860:	4b1b      	ldr	r3, [pc, #108]	@ (80058d0 <xTaskIncrementTick+0x168>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	429a      	cmp	r2, r3
 8005868:	d3b9      	bcc.n	80057de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800586a:	2301      	movs	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586e:	e7b6      	b.n	80057de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005870:	4b17      	ldr	r3, [pc, #92]	@ (80058d0 <xTaskIncrementTick+0x168>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005876:	4915      	ldr	r1, [pc, #84]	@ (80058cc <xTaskIncrementTick+0x164>)
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d901      	bls.n	800588c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800588c:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <xTaskIncrementTick+0x16c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e004      	b.n	80058a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800589a:	4b0f      	ldr	r3, [pc, #60]	@ (80058d8 <xTaskIncrementTick+0x170>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4a0d      	ldr	r2, [pc, #52]	@ (80058d8 <xTaskIncrementTick+0x170>)
 80058a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058a4:	697b      	ldr	r3, [r7, #20]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000578 	.word	0x20000578
 80058b4:	20000554 	.word	0x20000554
 80058b8:	20000508 	.word	0x20000508
 80058bc:	2000050c 	.word	0x2000050c
 80058c0:	20000568 	.word	0x20000568
 80058c4:	20000570 	.word	0x20000570
 80058c8:	20000558 	.word	0x20000558
 80058cc:	20000454 	.word	0x20000454
 80058d0:	20000450 	.word	0x20000450
 80058d4:	20000564 	.word	0x20000564
 80058d8:	20000560 	.word	0x20000560

080058dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058e2:	4b27      	ldr	r3, [pc, #156]	@ (8005980 <vTaskSwitchContext+0xa4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ea:	4b26      	ldr	r3, [pc, #152]	@ (8005984 <vTaskSwitchContext+0xa8>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058f0:	e040      	b.n	8005974 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058f2:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <vTaskSwitchContext+0xa8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f8:	4b23      	ldr	r3, [pc, #140]	@ (8005988 <vTaskSwitchContext+0xac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	fab3 f383 	clz	r3, r3
 8005904:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005906:	7afb      	ldrb	r3, [r7, #11]
 8005908:	f1c3 031f 	rsb	r3, r3, #31
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	491f      	ldr	r1, [pc, #124]	@ (800598c <vTaskSwitchContext+0xb0>)
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <vTaskSwitchContext+0x5a>
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a11      	ldr	r2, [pc, #68]	@ (800598c <vTaskSwitchContext+0xb0>)
 8005946:	4413      	add	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	3308      	adds	r3, #8
 800595c:	429a      	cmp	r2, r3
 800595e:	d104      	bne.n	800596a <vTaskSwitchContext+0x8e>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a07      	ldr	r2, [pc, #28]	@ (8005990 <vTaskSwitchContext+0xb4>)
 8005972:	6013      	str	r3, [r2, #0]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000578 	.word	0x20000578
 8005984:	20000564 	.word	0x20000564
 8005988:	20000558 	.word	0x20000558
 800598c:	20000454 	.word	0x20000454
 8005990:	20000450 	.word	0x20000450

08005994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	e7fd      	b.n	80059b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059bc:	4b07      	ldr	r3, [pc, #28]	@ (80059dc <vTaskPlaceOnEventList+0x48>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3318      	adds	r3, #24
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fe fdee 	bl	80045a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059ca:	2101      	movs	r1, #1
 80059cc:	6838      	ldr	r0, [r7, #0]
 80059ce:	f000 fc5d 	bl	800628c <prvAddCurrentTaskToDelayedList>
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000450 	.word	0x20000450

080059e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60fb      	str	r3, [r7, #12]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fe00 	bl	8004618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <xTaskRemoveFromEventList+0xb0>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11c      	bne.n	8005a5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fdf7 	bl	8004618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	2201      	movs	r2, #1
 8005a30:	409a      	lsls	r2, r3
 8005a32:	4b18      	ldr	r3, [pc, #96]	@ (8005a94 <xTaskRemoveFromEventList+0xb4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <xTaskRemoveFromEventList+0xb4>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4a13      	ldr	r2, [pc, #76]	@ (8005a98 <xTaskRemoveFromEventList+0xb8>)
 8005a4a:	441a      	add	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe fd83 	bl	800455e <vListInsertEnd>
 8005a58:	e005      	b.n	8005a66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4619      	mov	r1, r3
 8005a60:	480e      	ldr	r0, [pc, #56]	@ (8005a9c <xTaskRemoveFromEventList+0xbc>)
 8005a62:	f7fe fd7c 	bl	800455e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <xTaskRemoveFromEventList+0xc0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d905      	bls.n	8005a80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <xTaskRemoveFromEventList+0xc4>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e001      	b.n	8005a84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a84:	697b      	ldr	r3, [r7, #20]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000578 	.word	0x20000578
 8005a94:	20000558 	.word	0x20000558
 8005a98:	20000454 	.word	0x20000454
 8005a9c:	20000510 	.word	0x20000510
 8005aa0:	20000450 	.word	0x20000450
 8005aa4:	20000564 	.word	0x20000564

08005aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ab0:	4b06      	ldr	r3, [pc, #24]	@ (8005acc <vTaskInternalSetTimeOutState+0x24>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <vTaskInternalSetTimeOutState+0x28>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	605a      	str	r2, [r3, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000568 	.word	0x20000568
 8005ad0:	20000554 	.word	0x20000554

08005ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10b      	bne.n	8005afc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	613b      	str	r3, [r7, #16]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10b      	bne.n	8005b1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60fb      	str	r3, [r7, #12]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b1a:	f000 fd4d 	bl	80065b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <xTaskCheckForTimeOut+0xc0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d102      	bne.n	8005b3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e023      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b15      	ldr	r3, [pc, #84]	@ (8005b98 <xTaskCheckForTimeOut+0xc4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d007      	beq.n	8005b5a <xTaskCheckForTimeOut+0x86>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	e015      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d20b      	bcs.n	8005b7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff99 	bl	8005aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e004      	b.n	8005b86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b82:	2301      	movs	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b86:	f000 fd49 	bl	800661c <vPortExitCritical>

	return xReturn;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000554 	.word	0x20000554
 8005b98:	20000568 	.word	0x20000568

08005b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ba0:	4b03      	ldr	r3, [pc, #12]	@ (8005bb0 <vTaskMissedYield+0x14>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000564 	.word	0x20000564

08005bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bbc:	f000 f852 	bl	8005c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <prvIdleTask+0x28>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d9f9      	bls.n	8005bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <prvIdleTask+0x2c>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bd8:	e7f0      	b.n	8005bbc <prvIdleTask+0x8>
 8005bda:	bf00      	nop
 8005bdc:	20000454 	.word	0x20000454
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	e00c      	b.n	8005c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4a12      	ldr	r2, [pc, #72]	@ (8005c44 <prvInitialiseTaskLists+0x60>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe fc80 	bl	8004504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3301      	adds	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d9ef      	bls.n	8005bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c10:	480d      	ldr	r0, [pc, #52]	@ (8005c48 <prvInitialiseTaskLists+0x64>)
 8005c12:	f7fe fc77 	bl	8004504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c16:	480d      	ldr	r0, [pc, #52]	@ (8005c4c <prvInitialiseTaskLists+0x68>)
 8005c18:	f7fe fc74 	bl	8004504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c1c:	480c      	ldr	r0, [pc, #48]	@ (8005c50 <prvInitialiseTaskLists+0x6c>)
 8005c1e:	f7fe fc71 	bl	8004504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c22:	480c      	ldr	r0, [pc, #48]	@ (8005c54 <prvInitialiseTaskLists+0x70>)
 8005c24:	f7fe fc6e 	bl	8004504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c28:	480b      	ldr	r0, [pc, #44]	@ (8005c58 <prvInitialiseTaskLists+0x74>)
 8005c2a:	f7fe fc6b 	bl	8004504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <prvInitialiseTaskLists+0x78>)
 8005c30:	4a05      	ldr	r2, [pc, #20]	@ (8005c48 <prvInitialiseTaskLists+0x64>)
 8005c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <prvInitialiseTaskLists+0x7c>)
 8005c36:	4a05      	ldr	r2, [pc, #20]	@ (8005c4c <prvInitialiseTaskLists+0x68>)
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000454 	.word	0x20000454
 8005c48:	200004e0 	.word	0x200004e0
 8005c4c:	200004f4 	.word	0x200004f4
 8005c50:	20000510 	.word	0x20000510
 8005c54:	20000524 	.word	0x20000524
 8005c58:	2000053c 	.word	0x2000053c
 8005c5c:	20000508 	.word	0x20000508
 8005c60:	2000050c 	.word	0x2000050c

08005c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c6a:	e019      	b.n	8005ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c6c:	f000 fca4 	bl	80065b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	4b10      	ldr	r3, [pc, #64]	@ (8005cb4 <prvCheckTasksWaitingTermination+0x50>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fccb 	bl	8004618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x54>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x54>)
 8005c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	4a0a      	ldr	r2, [pc, #40]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c96:	f000 fcc1 	bl	800661c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f810 	bl	8005cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <prvCheckTasksWaitingTermination+0x58>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e1      	bne.n	8005c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000524 	.word	0x20000524
 8005cb8:	20000550 	.word	0x20000550
 8005cbc:	20000538 	.word	0x20000538

08005cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fe5e 	bl	8006998 <vPortFree>
				vPortFree( pxTCB );
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fe5b 	bl	8006998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ce2:	e019      	b.n	8005d18 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d103      	bne.n	8005cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fe52 	bl	8006998 <vPortFree>
	}
 8005cf4:	e010      	b.n	8005d18 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d00b      	beq.n	8005d18 <prvDeleteTCB+0x58>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <prvDeleteTCB+0x54>
	}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <prvResetNextTaskUnblockTime+0x38>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <prvResetNextTaskUnblockTime+0x3c>)
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d38:	e008      	b.n	8005d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3a:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <prvResetNextTaskUnblockTime+0x38>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <prvResetNextTaskUnblockTime+0x3c>)
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000508 	.word	0x20000508
 8005d5c:	20000570 	.word	0x20000570

08005d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <xTaskGetSchedulerState+0x34>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e008      	b.n	8005d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d74:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <xTaskGetSchedulerState+0x38>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	e001      	b.n	8005d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d86:	687b      	ldr	r3, [r7, #4]
	}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	2000055c 	.word	0x2000055c
 8005d98:	20000578 	.word	0x20000578

08005d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d070      	beq.n	8005e94 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005db2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <xTaskPriorityDisinherit+0x104>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d00b      	beq.n	8005dd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df8:	1e5a      	subs	r2, r3, #1
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d044      	beq.n	8005e94 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d140      	bne.n	8005e94 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fbfe 	bl	8004618 <uxListRemove>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e26:	491f      	ldr	r1, [pc, #124]	@ (8005ea4 <xTaskPriorityDisinherit+0x108>)
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <xTaskPriorityDisinherit+0xb2>
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e42:	43da      	mvns	r2, r3
 8005e44:	4b18      	ldr	r3, [pc, #96]	@ (8005ea8 <xTaskPriorityDisinherit+0x10c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ea8 <xTaskPriorityDisinherit+0x10c>)
 8005e4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5a:	f1c3 0207 	rsb	r2, r3, #7
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	2201      	movs	r2, #1
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <xTaskPriorityDisinherit+0x10c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <xTaskPriorityDisinherit+0x10c>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a08      	ldr	r2, [pc, #32]	@ (8005ea4 <xTaskPriorityDisinherit+0x108>)
 8005e82:	441a      	add	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe fb67 	bl	800455e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e94:	697b      	ldr	r3, [r7, #20]
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000450 	.word	0x20000450
 8005ea4:	20000454 	.word	0x20000454
 8005ea8:	20000558 	.word	0x20000558

08005eac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005eba:	f000 fb7d 	bl	80065b8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005ebe:	4b26      	ldr	r3, [pc, #152]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d01a      	beq.n	8005f02 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005ecc:	4b22      	ldr	r3, [pc, #136]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	43d2      	mvns	r2, r2
 8005ed6:	400a      	ands	r2, r1
 8005ed8:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eea:	2101      	movs	r1, #1
 8005eec:	6838      	ldr	r0, [r7, #0]
 8005eee:	f000 f9cd 	bl	800628c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f5c <xTaskNotifyWait+0xb0>)
 8005ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f02:	f000 fb8b 	bl	800661c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005f06:	f000 fb57 	bl	80065b8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d002      	beq.n	8005f2e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e008      	b.n	8005f40 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	43d2      	mvns	r2, r2
 8005f38:	400a      	ands	r2, r1
 8005f3a:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <xTaskNotifyWait+0xac>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8005f4a:	f000 fb67 	bl	800661c <vPortExitCritical>

		return xReturn;
 8005f4e:	697b      	ldr	r3, [r7, #20]
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000450 	.word	0x20000450
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	@ 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <xTaskGenericNotify+0x32>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	61bb      	str	r3, [r7, #24]
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	e7fd      	b.n	8005f8e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005f96:	f000 fb0f 	bl	80065b8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d827      	bhi.n	800600e <xTaskGenericNotify+0xae>
 8005fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc4 <xTaskGenericNotify+0x64>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fe7 	.word	0x08005fe7
 8005fd0:	08005ff3 	.word	0x08005ff3
 8005fd4:	08005ffb 	.word	0x08005ffb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005fe4:	e027      	b.n	8006036 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005ff0:	e021      	b.n	8006036 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005ff8:	e01d      	b.n	8006036 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ffa:	7ffb      	ldrb	r3, [r7, #31]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d003      	beq.n	8006008 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006006:	e016      	b.n	8006036 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006008:	2300      	movs	r3, #0
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800600c:	e013      	b.n	8006036 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d00d      	beq.n	8006034 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	617b      	str	r3, [r7, #20]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xTaskGenericNotify+0xcc>
					break;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <xTaskGenericNotify+0xd6>

					break;
 8006034:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d13a      	bne.n	80060b2 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	3304      	adds	r3, #4
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fae9 	bl	8004618 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	2201      	movs	r2, #1
 800604c:	409a      	lsls	r2, r3
 800604e:	4b1c      	ldr	r3, [pc, #112]	@ (80060c0 <xTaskGenericNotify+0x160>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	4a1a      	ldr	r2, [pc, #104]	@ (80060c0 <xTaskGenericNotify+0x160>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a17      	ldr	r2, [pc, #92]	@ (80060c4 <xTaskGenericNotify+0x164>)
 8006066:	441a      	add	r2, r3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fa75 	bl	800455e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <xTaskGenericNotify+0x134>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	613b      	str	r3, [r7, #16]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <xTaskGenericNotify+0x168>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d907      	bls.n	80060b2 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <xTaskGenericNotify+0x16c>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80060b2:	f000 fab3 	bl	800661c <vPortExitCritical>

		return xReturn;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3728      	adds	r7, #40	@ 0x28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000558 	.word	0x20000558
 80060c4:	20000454 	.word	0x20000454
 80060c8:	20000450 	.word	0x20000450
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	@ 0x38
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80060e0:	2301      	movs	r3, #1
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006102:	f000 fb39 	bl	8006778 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800610a:	f3ef 8211 	mrs	r2, BASEPRI
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	623a      	str	r2, [r7, #32]
 8006120:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006122:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d829      	bhi.n	80061a0 <xTaskGenericNotifyFromISR+0xd0>
 800614c:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <xTaskGenericNotifyFromISR+0x84>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	080061c3 	.word	0x080061c3
 8006158:	08006169 	.word	0x08006169
 800615c:	08006177 	.word	0x08006177
 8006160:	08006183 	.word	0x08006183
 8006164:	0800618b 	.word	0x0800618b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	431a      	orrs	r2, r3
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006174:	e028      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006180:	e022      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006188:	e01e      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800618a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800618e:	2b02      	cmp	r3, #2
 8006190:	d003      	beq.n	800619a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006198:	e016      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800619e:	e013      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d00d      	beq.n	80061c6 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	61bb      	str	r3, [r7, #24]
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	e7fd      	b.n	80061be <xTaskGenericNotifyFromISR+0xee>
					break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <xTaskGenericNotifyFromISR+0xf8>
					break;
 80061c6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80061c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d146      	bne.n	800625e <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	617b      	str	r3, [r7, #20]
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f0:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <xTaskGenericNotifyFromISR+0x1a4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11c      	bne.n	8006232 <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fa0b 	bl	8004618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	2201      	movs	r2, #1
 8006208:	409a      	lsls	r2, r3
 800620a:	4b1b      	ldr	r3, [pc, #108]	@ (8006278 <xTaskGenericNotifyFromISR+0x1a8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4313      	orrs	r3, r2
 8006210:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <xTaskGenericNotifyFromISR+0x1a8>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4a16      	ldr	r2, [pc, #88]	@ (800627c <xTaskGenericNotifyFromISR+0x1ac>)
 8006222:	441a      	add	r2, r3
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f7fe f997 	bl	800455e <vListInsertEnd>
 8006230:	e005      	b.n	800623e <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	3318      	adds	r3, #24
 8006236:	4619      	mov	r1, r3
 8006238:	4811      	ldr	r0, [pc, #68]	@ (8006280 <xTaskGenericNotifyFromISR+0x1b0>)
 800623a:	f7fe f990 	bl	800455e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <xTaskGenericNotifyFromISR+0x1b4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	429a      	cmp	r2, r3
 800624a:	d908      	bls.n	800625e <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800624c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006258:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <xTaskGenericNotifyFromISR+0x1b8>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f383 8811 	msr	BASEPRI, r3
}
 8006268:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800626a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800626c:	4618      	mov	r0, r3
 800626e:	3738      	adds	r7, #56	@ 0x38
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000578 	.word	0x20000578
 8006278:	20000558 	.word	0x20000558
 800627c:	20000454 	.word	0x20000454
 8006280:	20000510 	.word	0x20000510
 8006284:	20000450 	.word	0x20000450
 8006288:	20000564 	.word	0x20000564

0800628c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006296:	4b29      	ldr	r3, [pc, #164]	@ (800633c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800629c:	4b28      	ldr	r3, [pc, #160]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe f9b8 	bl	8004618 <uxListRemove>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062ae:	4b24      	ldr	r3, [pc, #144]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	2201      	movs	r2, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	43da      	mvns	r2, r3
 80062bc:	4b21      	ldr	r3, [pc, #132]	@ (8006344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4013      	ands	r3, r2
 80062c2:	4a20      	ldr	r2, [pc, #128]	@ (8006344 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d10a      	bne.n	80062e4 <prvAddCurrentTaskToDelayedList+0x58>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	481a      	ldr	r0, [pc, #104]	@ (8006348 <prvAddCurrentTaskToDelayedList+0xbc>)
 80062de:	f7fe f93e 	bl	800455e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062e2:	e026      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062ec:	4b14      	ldr	r3, [pc, #80]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d209      	bcs.n	8006310 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062fc:	4b13      	ldr	r3, [pc, #76]	@ (800634c <prvAddCurrentTaskToDelayedList+0xc0>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b0f      	ldr	r3, [pc, #60]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7fe f94c 	bl	80045a6 <vListInsert>
}
 800630e:	e010      	b.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006310:	4b0f      	ldr	r3, [pc, #60]	@ (8006350 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f7fe f942 	bl	80045a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006322:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d202      	bcs.n	8006332 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800632c:	4a09      	ldr	r2, [pc, #36]	@ (8006354 <prvAddCurrentTaskToDelayedList+0xc8>)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000554 	.word	0x20000554
 8006340:	20000450 	.word	0x20000450
 8006344:	20000558 	.word	0x20000558
 8006348:	2000053c 	.word	0x2000053c
 800634c:	2000050c 	.word	0x2000050c
 8006350:	20000508 	.word	0x20000508
 8006354:	20000570 	.word	0x20000570

08006358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b04      	subs	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b04      	subs	r3, #4
 8006376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006388:	4a0c      	ldr	r2, [pc, #48]	@ (80063bc <pxPortInitialiseStack+0x64>)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b14      	subs	r3, #20
 8006392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3b04      	subs	r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f06f 0202 	mvn.w	r2, #2
 80063a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b20      	subs	r3, #32
 80063ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	080063c1 	.word	0x080063c1

080063c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ca:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <prvTaskExitError+0x58>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d00b      	beq.n	80063ec <prvTaskExitError+0x2c>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	60fb      	str	r3, [r7, #12]
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <prvTaskExitError+0x28>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
}
 80063fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006400:	bf00      	nop
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0fc      	beq.n	8006402 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000000c 	.word	0x2000000c
 800641c:	00000000 	.word	0x00000000

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000450 	.word	0x20000450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	@ (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b47      	ldr	r3, [pc, #284]	@ (8006594 <xPortStartScheduler+0x124>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a47      	ldr	r2, [pc, #284]	@ (8006598 <xPortStartScheduler+0x128>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10b      	bne.n	8006498 <xPortStartScheduler+0x28>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006498:	4b3e      	ldr	r3, [pc, #248]	@ (8006594 <xPortStartScheduler+0x124>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3f      	ldr	r2, [pc, #252]	@ (800659c <xPortStartScheduler+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d10b      	bne.n	80064ba <xPortStartScheduler+0x4a>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064ba:	4b39      	ldr	r3, [pc, #228]	@ (80065a0 <xPortStartScheduler+0x130>)
 80064bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	22ff      	movs	r2, #255	@ 0xff
 80064ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4b31      	ldr	r3, [pc, #196]	@ (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064e2:	4b31      	ldr	r3, [pc, #196]	@ (80065a8 <xPortStartScheduler+0x138>)
 80064e4:	2207      	movs	r2, #7
 80064e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e8:	e009      	b.n	80064fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80064ea:	4b2f      	ldr	r3, [pc, #188]	@ (80065a8 <xPortStartScheduler+0x138>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a2d      	ldr	r2, [pc, #180]	@ (80065a8 <xPortStartScheduler+0x138>)
 80064f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b80      	cmp	r3, #128	@ 0x80
 8006508:	d0ef      	beq.n	80064ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800650a:	4b27      	ldr	r3, [pc, #156]	@ (80065a8 <xPortStartScheduler+0x138>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1c3 0307 	rsb	r3, r3, #7
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00b      	beq.n	800652e <xPortStartScheduler+0xbe>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60bb      	str	r3, [r7, #8]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800652e:	4b1e      	ldr	r3, [pc, #120]	@ (80065a8 <xPortStartScheduler+0x138>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <xPortStartScheduler+0x138>)
 8006536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006538:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <xPortStartScheduler+0x138>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006540:	4a19      	ldr	r2, [pc, #100]	@ (80065a8 <xPortStartScheduler+0x138>)
 8006542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800654c:	4b17      	ldr	r3, [pc, #92]	@ (80065ac <xPortStartScheduler+0x13c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	@ (80065ac <xPortStartScheduler+0x13c>)
 8006552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006558:	4b14      	ldr	r3, [pc, #80]	@ (80065ac <xPortStartScheduler+0x13c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a13      	ldr	r2, [pc, #76]	@ (80065ac <xPortStartScheduler+0x13c>)
 800655e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006564:	f000 f8da 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006568:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <xPortStartScheduler+0x140>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800656e:	f000 f8f9 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <xPortStartScheduler+0x144>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a0f      	ldr	r2, [pc, #60]	@ (80065b4 <xPortStartScheduler+0x144>)
 8006578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800657c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800657e:	f7ff ff63 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006582:	f7ff f9ab 	bl	80058dc <vTaskSwitchContext>
	prvTaskExitError();
 8006586:	f7ff ff1b 	bl	80063c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	e000ed00 	.word	0xe000ed00
 8006598:	410fc271 	.word	0x410fc271
 800659c:	410fc270 	.word	0x410fc270
 80065a0:	e000e400 	.word	0xe000e400
 80065a4:	2000057c 	.word	0x2000057c
 80065a8:	20000580 	.word	0x20000580
 80065ac:	e000ed20 	.word	0xe000ed20
 80065b0:	2000000c 	.word	0x2000000c
 80065b4:	e000ef34 	.word	0xe000ef34

080065b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <vPortEnterCritical+0x5c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006614 <vPortEnterCritical+0x5c>)
 80065da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <vPortEnterCritical+0x5c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d110      	bne.n	8006606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006618 <vPortEnterCritical+0x60>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <vPortEnterCritical+0x4e>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	603b      	str	r3, [r7, #0]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortEnterCritical+0x4a>
	}
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	2000000c 	.word	0x2000000c
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006622:	4b12      	ldr	r3, [pc, #72]	@ (800666c <vPortExitCritical+0x50>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10b      	bne.n	8006642 <vPortExitCritical+0x26>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006642:	4b0a      	ldr	r3, [pc, #40]	@ (800666c <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a08      	ldr	r2, [pc, #32]	@ (800666c <vPortExitCritical+0x50>)
 800664a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800664c:	4b07      	ldr	r3, [pc, #28]	@ (800666c <vPortExitCritical+0x50>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <vPortExitCritical+0x44>
 8006654:	2300      	movs	r3, #0
 8006656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	2000000c 	.word	0x2000000c

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7ff f91c 	bl	80058dc <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000450 	.word	0x20000450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7ff f839 	bl	8005768 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <SysTick_Handler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	@ (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d915      	bls.n	80067b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a18      	ldr	r2, [pc, #96]	@ (80067ec <vPortValidateInterruptPriority+0x74>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b16      	ldr	r3, [pc, #88]	@ (80067f0 <vPortValidateInterruptPriority+0x78>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20b      	bcs.n	80067b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	e7fd      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b6:	4b0f      	ldr	r3, [pc, #60]	@ (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067be:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <vPortValidateInterruptPriority+0x80>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d90b      	bls.n	80067de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	603b      	str	r3, [r7, #0]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <vPortValidateInterruptPriority+0x62>
	}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	e000e3f0 	.word	0xe000e3f0
 80067f0:	2000057c 	.word	0x2000057c
 80067f4:	e000ed0c 	.word	0xe000ed0c
 80067f8:	20000580 	.word	0x20000580

080067fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006808:	f7fe ff02 	bl	8005610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800680c:	4b5c      	ldr	r3, [pc, #368]	@ (8006980 <pvPortMalloc+0x184>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006814:	f000 f924 	bl	8006a60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006818:	4b5a      	ldr	r3, [pc, #360]	@ (8006984 <pvPortMalloc+0x188>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 8095 	bne.w	8006950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01e      	beq.n	800686a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800682c:	2208      	movs	r2, #8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4413      	add	r3, r2
 8006832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	2b00      	cmp	r3, #0
 800683c:	d015      	beq.n	800686a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f023 0307 	bic.w	r3, r3, #7
 8006844:	3308      	adds	r3, #8
 8006846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <pvPortMalloc+0x6e>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	617b      	str	r3, [r7, #20]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d06f      	beq.n	8006950 <pvPortMalloc+0x154>
 8006870:	4b45      	ldr	r3, [pc, #276]	@ (8006988 <pvPortMalloc+0x18c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d86a      	bhi.n	8006950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800687a:	4b44      	ldr	r3, [pc, #272]	@ (800698c <pvPortMalloc+0x190>)
 800687c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800687e:	4b43      	ldr	r3, [pc, #268]	@ (800698c <pvPortMalloc+0x190>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006884:	e004      	b.n	8006890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d903      	bls.n	80068a2 <pvPortMalloc+0xa6>
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f1      	bne.n	8006886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068a2:	4b37      	ldr	r3, [pc, #220]	@ (8006980 <pvPortMalloc+0x184>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d051      	beq.n	8006950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2208      	movs	r2, #8
 80068b2:	4413      	add	r3, r2
 80068b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	1ad2      	subs	r2, r2, r3
 80068c6:	2308      	movs	r3, #8
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d920      	bls.n	8006910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4413      	add	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <pvPortMalloc+0xfc>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800690a:	69b8      	ldr	r0, [r7, #24]
 800690c:	f000 f90a 	bl	8006b24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006910:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <pvPortMalloc+0x18c>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	4a1b      	ldr	r2, [pc, #108]	@ (8006988 <pvPortMalloc+0x18c>)
 800691c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800691e:	4b1a      	ldr	r3, [pc, #104]	@ (8006988 <pvPortMalloc+0x18c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b1b      	ldr	r3, [pc, #108]	@ (8006990 <pvPortMalloc+0x194>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d203      	bcs.n	8006932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800692a:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <pvPortMalloc+0x18c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <pvPortMalloc+0x194>)
 8006930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <pvPortMalloc+0x188>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	431a      	orrs	r2, r3
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <pvPortMalloc+0x198>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	4a11      	ldr	r2, [pc, #68]	@ (8006994 <pvPortMalloc+0x198>)
 800694e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006950:	f7fe fe6c 	bl	800562c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <pvPortMalloc+0x17a>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	60fb      	str	r3, [r7, #12]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <pvPortMalloc+0x176>
	return pvReturn;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	@ 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	2000418c 	.word	0x2000418c
 8006984:	200041a0 	.word	0x200041a0
 8006988:	20004190 	.word	0x20004190
 800698c:	20004184 	.word	0x20004184
 8006990:	20004194 	.word	0x20004194
 8006994:	20004198 	.word	0x20004198

08006998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d04f      	beq.n	8006a4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069aa:	2308      	movs	r3, #8
 80069ac:	425b      	negs	r3, r3
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4b25      	ldr	r3, [pc, #148]	@ (8006a54 <vPortFree+0xbc>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <vPortFree+0x46>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60fb      	str	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00b      	beq.n	80069fe <vPortFree+0x66>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	4b14      	ldr	r3, [pc, #80]	@ (8006a54 <vPortFree+0xbc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01e      	beq.n	8006a4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d11a      	bne.n	8006a4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	4b0e      	ldr	r3, [pc, #56]	@ (8006a54 <vPortFree+0xbc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	401a      	ands	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a24:	f7fe fdf4 	bl	8005610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <vPortFree+0xc0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <vPortFree+0xc0>)
 8006a34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a36:	6938      	ldr	r0, [r7, #16]
 8006a38:	f000 f874 	bl	8006b24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a3c:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <vPortFree+0xc4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a06      	ldr	r2, [pc, #24]	@ (8006a5c <vPortFree+0xc4>)
 8006a44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a46:	f7fe fdf1 	bl	800562c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a4a:	bf00      	nop
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200041a0 	.word	0x200041a0
 8006a58:	20004190 	.word	0x20004190
 8006a5c:	2000419c 	.word	0x2000419c

08006a60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006a6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a6c:	4b27      	ldr	r3, [pc, #156]	@ (8006b0c <prvHeapInit+0xac>)
 8006a6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3307      	adds	r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0307 	bic.w	r3, r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006b0c <prvHeapInit+0xac>)
 8006a90:	4413      	add	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a98:	4a1d      	ldr	r2, [pc, #116]	@ (8006b10 <prvHeapInit+0xb0>)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b10 <prvHeapInit+0xb0>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aac:	2208      	movs	r2, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a15      	ldr	r2, [pc, #84]	@ (8006b14 <prvHeapInit+0xb4>)
 8006ac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ac2:	4b14      	ldr	r3, [pc, #80]	@ (8006b14 <prvHeapInit+0xb4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aca:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <prvHeapInit+0xb4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <prvHeapInit+0xb4>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	4a0a      	ldr	r2, [pc, #40]	@ (8006b18 <prvHeapInit+0xb8>)
 8006aee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a09      	ldr	r2, [pc, #36]	@ (8006b1c <prvHeapInit+0xbc>)
 8006af6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006af8:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <prvHeapInit+0xc0>)
 8006afa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006afe:	601a      	str	r2, [r3, #0]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20000584 	.word	0x20000584
 8006b10:	20004184 	.word	0x20004184
 8006b14:	2000418c 	.word	0x2000418c
 8006b18:	20004194 	.word	0x20004194
 8006b1c:	20004190 	.word	0x20004190
 8006b20:	200041a0 	.word	0x200041a0

08006b24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b2c:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <prvInsertBlockIntoFreeList+0xac>)
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e002      	b.n	8006b38 <prvInsertBlockIntoFreeList+0x14>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d8f7      	bhi.n	8006b32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d108      	bne.n	8006b66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d118      	bne.n	8006bac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d00d      	beq.n	8006ba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	e008      	b.n	8006bb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e003      	b.n	8006bb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d002      	beq.n	8006bc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20004184 	.word	0x20004184
 8006bd4:	2000418c 	.word	0x2000418c

08006bd8 <std>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	e9c0 3300 	strd	r3, r3, [r0]
 8006be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006be6:	6083      	str	r3, [r0, #8]
 8006be8:	8181      	strh	r1, [r0, #12]
 8006bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bec:	81c2      	strh	r2, [r0, #14]
 8006bee:	6183      	str	r3, [r0, #24]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	305c      	adds	r0, #92	@ 0x5c
 8006bf6:	f000 f906 	bl	8006e06 <memset>
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x58>)
 8006bfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x5c>)
 8006c00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <std+0x60>)
 8006c04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <std+0x64>)
 8006c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <std+0x68>)
 8006c0c:	6224      	str	r4, [r4, #32]
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d006      	beq.n	8006c20 <std+0x48>
 8006c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c16:	4294      	cmp	r4, r2
 8006c18:	d002      	beq.n	8006c20 <std+0x48>
 8006c1a:	33d0      	adds	r3, #208	@ 0xd0
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d105      	bne.n	8006c2c <std+0x54>
 8006c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f000 b966 	b.w	8006ef8 <__retarget_lock_init_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	08006d81 	.word	0x08006d81
 8006c34:	08006da3 	.word	0x08006da3
 8006c38:	08006ddb 	.word	0x08006ddb
 8006c3c:	08006dff 	.word	0x08006dff
 8006c40:	200041a4 	.word	0x200041a4

08006c44 <stdio_exit_handler>:
 8006c44:	4a02      	ldr	r2, [pc, #8]	@ (8006c50 <stdio_exit_handler+0xc>)
 8006c46:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <stdio_exit_handler+0x10>)
 8006c48:	4803      	ldr	r0, [pc, #12]	@ (8006c58 <stdio_exit_handler+0x14>)
 8006c4a:	f000 b869 	b.w	8006d20 <_fwalk_sglue>
 8006c4e:	bf00      	nop
 8006c50:	20000010 	.word	0x20000010
 8006c54:	080077b5 	.word	0x080077b5
 8006c58:	20000020 	.word	0x20000020

08006c5c <cleanup_stdio>:
 8006c5c:	6841      	ldr	r1, [r0, #4]
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c90 <cleanup_stdio+0x34>)
 8006c60:	4299      	cmp	r1, r3
 8006c62:	b510      	push	{r4, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	d001      	beq.n	8006c6c <cleanup_stdio+0x10>
 8006c68:	f000 fda4 	bl	80077b4 <_fflush_r>
 8006c6c:	68a1      	ldr	r1, [r4, #8]
 8006c6e:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <cleanup_stdio+0x38>)
 8006c70:	4299      	cmp	r1, r3
 8006c72:	d002      	beq.n	8006c7a <cleanup_stdio+0x1e>
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fd9d 	bl	80077b4 <_fflush_r>
 8006c7a:	68e1      	ldr	r1, [r4, #12]
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <cleanup_stdio+0x3c>)
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d004      	beq.n	8006c8c <cleanup_stdio+0x30>
 8006c82:	4620      	mov	r0, r4
 8006c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c88:	f000 bd94 	b.w	80077b4 <_fflush_r>
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	200041a4 	.word	0x200041a4
 8006c94:	2000420c 	.word	0x2000420c
 8006c98:	20004274 	.word	0x20004274

08006c9c <global_stdio_init.part.0>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <global_stdio_init.part.0+0x30>)
 8006ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd0 <global_stdio_init.part.0+0x34>)
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd4 <global_stdio_init.part.0+0x38>)
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2104      	movs	r1, #4
 8006cac:	f7ff ff94 	bl	8006bd8 <std>
 8006cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	2109      	movs	r1, #9
 8006cb8:	f7ff ff8e 	bl	8006bd8 <std>
 8006cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc6:	2112      	movs	r1, #18
 8006cc8:	f7ff bf86 	b.w	8006bd8 <std>
 8006ccc:	200042dc 	.word	0x200042dc
 8006cd0:	200041a4 	.word	0x200041a4
 8006cd4:	08006c45 	.word	0x08006c45

08006cd8 <__sfp_lock_acquire>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__sfp_lock_acquire+0x8>)
 8006cda:	f000 b90e 	b.w	8006efa <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200042e5 	.word	0x200042e5

08006ce4 <__sfp_lock_release>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	@ (8006cec <__sfp_lock_release+0x8>)
 8006ce6:	f000 b909 	b.w	8006efc <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	200042e5 	.word	0x200042e5

08006cf0 <__sinit>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	f7ff fff0 	bl	8006cd8 <__sfp_lock_acquire>
 8006cf8:	6a23      	ldr	r3, [r4, #32]
 8006cfa:	b11b      	cbz	r3, 8006d04 <__sinit+0x14>
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f7ff bff0 	b.w	8006ce4 <__sfp_lock_release>
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <__sinit+0x28>)
 8006d06:	6223      	str	r3, [r4, #32]
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <__sinit+0x2c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f5      	bne.n	8006cfc <__sinit+0xc>
 8006d10:	f7ff ffc4 	bl	8006c9c <global_stdio_init.part.0>
 8006d14:	e7f2      	b.n	8006cfc <__sinit+0xc>
 8006d16:	bf00      	nop
 8006d18:	08006c5d 	.word	0x08006c5d
 8006d1c:	200042dc 	.word	0x200042dc

08006d20 <_fwalk_sglue>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4607      	mov	r7, r0
 8006d26:	4688      	mov	r8, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d30:	f1b9 0901 	subs.w	r9, r9, #1
 8006d34:	d505      	bpl.n	8006d42 <_fwalk_sglue+0x22>
 8006d36:	6824      	ldr	r4, [r4, #0]
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	d1f7      	bne.n	8006d2c <_fwalk_sglue+0xc>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d907      	bls.n	8006d58 <_fwalk_sglue+0x38>
 8006d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	d003      	beq.n	8006d58 <_fwalk_sglue+0x38>
 8006d50:	4629      	mov	r1, r5
 8006d52:	4638      	mov	r0, r7
 8006d54:	47c0      	blx	r8
 8006d56:	4306      	orrs	r6, r0
 8006d58:	3568      	adds	r5, #104	@ 0x68
 8006d5a:	e7e9      	b.n	8006d30 <_fwalk_sglue+0x10>

08006d5c <iprintf>:
 8006d5c:	b40f      	push	{r0, r1, r2, r3}
 8006d5e:	b507      	push	{r0, r1, r2, lr}
 8006d60:	4906      	ldr	r1, [pc, #24]	@ (8006d7c <iprintf+0x20>)
 8006d62:	ab04      	add	r3, sp, #16
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6a:	6881      	ldr	r1, [r0, #8]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f000 f9f7 	bl	8007160 <_vfiprintf_r>
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d78:	b004      	add	sp, #16
 8006d7a:	4770      	bx	lr
 8006d7c:	2000001c 	.word	0x2000001c

08006d80 <__sread>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	460c      	mov	r4, r1
 8006d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d88:	f000 f868 	bl	8006e5c <_read_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	bfab      	itete	ge
 8006d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d92:	89a3      	ldrhlt	r3, [r4, #12]
 8006d94:	181b      	addge	r3, r3, r0
 8006d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d9a:	bfac      	ite	ge
 8006d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d9e:	81a3      	strhlt	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__swrite>:
 8006da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da6:	461f      	mov	r7, r3
 8006da8:	898b      	ldrh	r3, [r1, #12]
 8006daa:	05db      	lsls	r3, r3, #23
 8006dac:	4605      	mov	r5, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4616      	mov	r6, r2
 8006db2:	d505      	bpl.n	8006dc0 <__swrite+0x1e>
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	2302      	movs	r3, #2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f000 f83c 	bl	8006e38 <_lseek_r>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	4632      	mov	r2, r6
 8006dce:	463b      	mov	r3, r7
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	f000 b853 	b.w	8006e80 <_write_r>

08006dda <__sseek>:
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de2:	f000 f829 	bl	8006e38 <_lseek_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	bf15      	itete	ne
 8006dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006df6:	81a3      	strheq	r3, [r4, #12]
 8006df8:	bf18      	it	ne
 8006dfa:	81a3      	strhne	r3, [r4, #12]
 8006dfc:	bd10      	pop	{r4, pc}

08006dfe <__sclose>:
 8006dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e02:	f000 b809 	b.w	8006e18 <_close_r>

08006e06 <memset>:
 8006e06:	4402      	add	r2, r0
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d100      	bne.n	8006e10 <memset+0xa>
 8006e0e:	4770      	bx	lr
 8006e10:	f803 1b01 	strb.w	r1, [r3], #1
 8006e14:	e7f9      	b.n	8006e0a <memset+0x4>
	...

08006e18 <_close_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d06      	ldr	r5, [pc, #24]	@ (8006e34 <_close_r+0x1c>)
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4608      	mov	r0, r1
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	f7fb fa2d 	bl	8002282 <_close>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_close_r+0x1a>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_close_r+0x1a>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	200042e0 	.word	0x200042e0

08006e38 <_lseek_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4d07      	ldr	r5, [pc, #28]	@ (8006e58 <_lseek_r+0x20>)
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	4608      	mov	r0, r1
 8006e40:	4611      	mov	r1, r2
 8006e42:	2200      	movs	r2, #0
 8006e44:	602a      	str	r2, [r5, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f7fb fa42 	bl	80022d0 <_lseek>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_lseek_r+0x1e>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_lseek_r+0x1e>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	200042e0 	.word	0x200042e0

08006e5c <_read_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d07      	ldr	r5, [pc, #28]	@ (8006e7c <_read_r+0x20>)
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f7fb f9ec 	bl	8002248 <_read>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_read_r+0x1e>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_read_r+0x1e>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	200042e0 	.word	0x200042e0

08006e80 <_write_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d07      	ldr	r5, [pc, #28]	@ (8006ea0 <_write_r+0x20>)
 8006e84:	4604      	mov	r4, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	602a      	str	r2, [r5, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f7fa fbe6 	bl	8001660 <_write>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_write_r+0x1e>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_write_r+0x1e>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	200042e0 	.word	0x200042e0

08006ea4 <__errno>:
 8006ea4:	4b01      	ldr	r3, [pc, #4]	@ (8006eac <__errno+0x8>)
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	2000001c 	.word	0x2000001c

08006eb0 <__libc_init_array>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ee8 <__libc_init_array+0x38>)
 8006eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8006eec <__libc_init_array+0x3c>)
 8006eb6:	1b64      	subs	r4, r4, r5
 8006eb8:	10a4      	asrs	r4, r4, #2
 8006eba:	2600      	movs	r6, #0
 8006ebc:	42a6      	cmp	r6, r4
 8006ebe:	d109      	bne.n	8006ed4 <__libc_init_array+0x24>
 8006ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ef0 <__libc_init_array+0x40>)
 8006ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef4 <__libc_init_array+0x44>)
 8006ec4:	f000 fdc6 	bl	8007a54 <_init>
 8006ec8:	1b64      	subs	r4, r4, r5
 8006eca:	10a4      	asrs	r4, r4, #2
 8006ecc:	2600      	movs	r6, #0
 8006ece:	42a6      	cmp	r6, r4
 8006ed0:	d105      	bne.n	8006ede <__libc_init_array+0x2e>
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}
 8006ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed8:	4798      	blx	r3
 8006eda:	3601      	adds	r6, #1
 8006edc:	e7ee      	b.n	8006ebc <__libc_init_array+0xc>
 8006ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee2:	4798      	blx	r3
 8006ee4:	3601      	adds	r6, #1
 8006ee6:	e7f2      	b.n	8006ece <__libc_init_array+0x1e>
 8006ee8:	08007c94 	.word	0x08007c94
 8006eec:	08007c94 	.word	0x08007c94
 8006ef0:	08007c94 	.word	0x08007c94
 8006ef4:	08007c98 	.word	0x08007c98

08006ef8 <__retarget_lock_init_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <__retarget_lock_acquire_recursive>:
 8006efa:	4770      	bx	lr

08006efc <__retarget_lock_release_recursive>:
 8006efc:	4770      	bx	lr

08006efe <memcpy>:
 8006efe:	440a      	add	r2, r1
 8006f00:	4291      	cmp	r1, r2
 8006f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f06:	d100      	bne.n	8006f0a <memcpy+0xc>
 8006f08:	4770      	bx	lr
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f14:	4291      	cmp	r1, r2
 8006f16:	d1f9      	bne.n	8006f0c <memcpy+0xe>
 8006f18:	bd10      	pop	{r4, pc}
	...

08006f1c <_free_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d041      	beq.n	8006fa8 <_free_r+0x8c>
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f0c      	subs	r4, r1, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfb8      	it	lt
 8006f2e:	18e4      	addlt	r4, r4, r3
 8006f30:	f000 f8e0 	bl	80070f4 <__malloc_lock>
 8006f34:	4a1d      	ldr	r2, [pc, #116]	@ (8006fac <_free_r+0x90>)
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	b933      	cbnz	r3, 8006f48 <_free_r+0x2c>
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	6014      	str	r4, [r2, #0]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f44:	f000 b8dc 	b.w	8007100 <__malloc_unlock>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d908      	bls.n	8006f5e <_free_r+0x42>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	1821      	adds	r1, r4, r0
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf01      	itttt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	1809      	addeq	r1, r1, r0
 8006f5a:	6021      	streq	r1, [r4, #0]
 8006f5c:	e7ed      	b.n	8006f3a <_free_r+0x1e>
 8006f5e:	461a      	mov	r2, r3
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b10b      	cbz	r3, 8006f68 <_free_r+0x4c>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d9fa      	bls.n	8006f5e <_free_r+0x42>
 8006f68:	6811      	ldr	r1, [r2, #0]
 8006f6a:	1850      	adds	r0, r2, r1
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d10b      	bne.n	8006f88 <_free_r+0x6c>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	4401      	add	r1, r0
 8006f74:	1850      	adds	r0, r2, r1
 8006f76:	4283      	cmp	r3, r0
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	d1e0      	bne.n	8006f3e <_free_r+0x22>
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	6053      	str	r3, [r2, #4]
 8006f82:	4408      	add	r0, r1
 8006f84:	6010      	str	r0, [r2, #0]
 8006f86:	e7da      	b.n	8006f3e <_free_r+0x22>
 8006f88:	d902      	bls.n	8006f90 <_free_r+0x74>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	e7d6      	b.n	8006f3e <_free_r+0x22>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	1821      	adds	r1, r4, r0
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf04      	itt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	6063      	str	r3, [r4, #4]
 8006f9e:	bf04      	itt	eq
 8006fa0:	1809      	addeq	r1, r1, r0
 8006fa2:	6021      	streq	r1, [r4, #0]
 8006fa4:	6054      	str	r4, [r2, #4]
 8006fa6:	e7ca      	b.n	8006f3e <_free_r+0x22>
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	200042ec 	.word	0x200042ec

08006fb0 <sbrk_aligned>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8006ff0 <sbrk_aligned+0x40>)
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	6831      	ldr	r1, [r6, #0]
 8006fb8:	4605      	mov	r5, r0
 8006fba:	b911      	cbnz	r1, 8006fc2 <sbrk_aligned+0x12>
 8006fbc:	f000 fcb6 	bl	800792c <_sbrk_r>
 8006fc0:	6030      	str	r0, [r6, #0]
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 fcb1 	bl	800792c <_sbrk_r>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d103      	bne.n	8006fd6 <sbrk_aligned+0x26>
 8006fce:	f04f 34ff 	mov.w	r4, #4294967295
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	1cc4      	adds	r4, r0, #3
 8006fd8:	f024 0403 	bic.w	r4, r4, #3
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d0f8      	beq.n	8006fd2 <sbrk_aligned+0x22>
 8006fe0:	1a21      	subs	r1, r4, r0
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 fca2 	bl	800792c <_sbrk_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d1f2      	bne.n	8006fd2 <sbrk_aligned+0x22>
 8006fec:	e7ef      	b.n	8006fce <sbrk_aligned+0x1e>
 8006fee:	bf00      	nop
 8006ff0:	200042e8 	.word	0x200042e8

08006ff4 <_malloc_r>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	1ccd      	adds	r5, r1, #3
 8006ffa:	f025 0503 	bic.w	r5, r5, #3
 8006ffe:	3508      	adds	r5, #8
 8007000:	2d0c      	cmp	r5, #12
 8007002:	bf38      	it	cc
 8007004:	250c      	movcc	r5, #12
 8007006:	2d00      	cmp	r5, #0
 8007008:	4606      	mov	r6, r0
 800700a:	db01      	blt.n	8007010 <_malloc_r+0x1c>
 800700c:	42a9      	cmp	r1, r5
 800700e:	d904      	bls.n	800701a <_malloc_r+0x26>
 8007010:	230c      	movs	r3, #12
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	2000      	movs	r0, #0
 8007016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800701a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070f0 <_malloc_r+0xfc>
 800701e:	f000 f869 	bl	80070f4 <__malloc_lock>
 8007022:	f8d8 3000 	ldr.w	r3, [r8]
 8007026:	461c      	mov	r4, r3
 8007028:	bb44      	cbnz	r4, 800707c <_malloc_r+0x88>
 800702a:	4629      	mov	r1, r5
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff ffbf 	bl	8006fb0 <sbrk_aligned>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	4604      	mov	r4, r0
 8007036:	d158      	bne.n	80070ea <_malloc_r+0xf6>
 8007038:	f8d8 4000 	ldr.w	r4, [r8]
 800703c:	4627      	mov	r7, r4
 800703e:	2f00      	cmp	r7, #0
 8007040:	d143      	bne.n	80070ca <_malloc_r+0xd6>
 8007042:	2c00      	cmp	r4, #0
 8007044:	d04b      	beq.n	80070de <_malloc_r+0xea>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	4639      	mov	r1, r7
 800704a:	4630      	mov	r0, r6
 800704c:	eb04 0903 	add.w	r9, r4, r3
 8007050:	f000 fc6c 	bl	800792c <_sbrk_r>
 8007054:	4581      	cmp	r9, r0
 8007056:	d142      	bne.n	80070de <_malloc_r+0xea>
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	1a6d      	subs	r5, r5, r1
 800705c:	4629      	mov	r1, r5
 800705e:	4630      	mov	r0, r6
 8007060:	f7ff ffa6 	bl	8006fb0 <sbrk_aligned>
 8007064:	3001      	adds	r0, #1
 8007066:	d03a      	beq.n	80070de <_malloc_r+0xea>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	442b      	add	r3, r5
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	f8d8 3000 	ldr.w	r3, [r8]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	bb62      	cbnz	r2, 80070d0 <_malloc_r+0xdc>
 8007076:	f8c8 7000 	str.w	r7, [r8]
 800707a:	e00f      	b.n	800709c <_malloc_r+0xa8>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	1b52      	subs	r2, r2, r5
 8007080:	d420      	bmi.n	80070c4 <_malloc_r+0xd0>
 8007082:	2a0b      	cmp	r2, #11
 8007084:	d917      	bls.n	80070b6 <_malloc_r+0xc2>
 8007086:	1961      	adds	r1, r4, r5
 8007088:	42a3      	cmp	r3, r4
 800708a:	6025      	str	r5, [r4, #0]
 800708c:	bf18      	it	ne
 800708e:	6059      	strne	r1, [r3, #4]
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	bf08      	it	eq
 8007094:	f8c8 1000 	streq.w	r1, [r8]
 8007098:	5162      	str	r2, [r4, r5]
 800709a:	604b      	str	r3, [r1, #4]
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f82f 	bl	8007100 <__malloc_unlock>
 80070a2:	f104 000b 	add.w	r0, r4, #11
 80070a6:	1d23      	adds	r3, r4, #4
 80070a8:	f020 0007 	bic.w	r0, r0, #7
 80070ac:	1ac2      	subs	r2, r0, r3
 80070ae:	bf1c      	itt	ne
 80070b0:	1a1b      	subne	r3, r3, r0
 80070b2:	50a3      	strne	r3, [r4, r2]
 80070b4:	e7af      	b.n	8007016 <_malloc_r+0x22>
 80070b6:	6862      	ldr	r2, [r4, #4]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	bf0c      	ite	eq
 80070bc:	f8c8 2000 	streq.w	r2, [r8]
 80070c0:	605a      	strne	r2, [r3, #4]
 80070c2:	e7eb      	b.n	800709c <_malloc_r+0xa8>
 80070c4:	4623      	mov	r3, r4
 80070c6:	6864      	ldr	r4, [r4, #4]
 80070c8:	e7ae      	b.n	8007028 <_malloc_r+0x34>
 80070ca:	463c      	mov	r4, r7
 80070cc:	687f      	ldr	r7, [r7, #4]
 80070ce:	e7b6      	b.n	800703e <_malloc_r+0x4a>
 80070d0:	461a      	mov	r2, r3
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d1fb      	bne.n	80070d0 <_malloc_r+0xdc>
 80070d8:	2300      	movs	r3, #0
 80070da:	6053      	str	r3, [r2, #4]
 80070dc:	e7de      	b.n	800709c <_malloc_r+0xa8>
 80070de:	230c      	movs	r3, #12
 80070e0:	6033      	str	r3, [r6, #0]
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f80c 	bl	8007100 <__malloc_unlock>
 80070e8:	e794      	b.n	8007014 <_malloc_r+0x20>
 80070ea:	6005      	str	r5, [r0, #0]
 80070ec:	e7d6      	b.n	800709c <_malloc_r+0xa8>
 80070ee:	bf00      	nop
 80070f0:	200042ec 	.word	0x200042ec

080070f4 <__malloc_lock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	@ (80070fc <__malloc_lock+0x8>)
 80070f6:	f7ff bf00 	b.w	8006efa <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	200042e4 	.word	0x200042e4

08007100 <__malloc_unlock>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__malloc_unlock+0x8>)
 8007102:	f7ff befb 	b.w	8006efc <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	200042e4 	.word	0x200042e4

0800710c <__sfputc_r>:
 800710c:	6893      	ldr	r3, [r2, #8]
 800710e:	3b01      	subs	r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	b410      	push	{r4}
 8007114:	6093      	str	r3, [r2, #8]
 8007116:	da08      	bge.n	800712a <__sfputc_r+0x1e>
 8007118:	6994      	ldr	r4, [r2, #24]
 800711a:	42a3      	cmp	r3, r4
 800711c:	db01      	blt.n	8007122 <__sfputc_r+0x16>
 800711e:	290a      	cmp	r1, #10
 8007120:	d103      	bne.n	800712a <__sfputc_r+0x1e>
 8007122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007126:	f000 bb6d 	b.w	8007804 <__swbuf_r>
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	1c58      	adds	r0, r3, #1
 800712e:	6010      	str	r0, [r2, #0]
 8007130:	7019      	strb	r1, [r3, #0]
 8007132:	4608      	mov	r0, r1
 8007134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007138:	4770      	bx	lr

0800713a <__sfputs_r>:
 800713a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	4614      	mov	r4, r2
 8007142:	18d5      	adds	r5, r2, r3
 8007144:	42ac      	cmp	r4, r5
 8007146:	d101      	bne.n	800714c <__sfputs_r+0x12>
 8007148:	2000      	movs	r0, #0
 800714a:	e007      	b.n	800715c <__sfputs_r+0x22>
 800714c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007150:	463a      	mov	r2, r7
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffda 	bl	800710c <__sfputc_r>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d1f3      	bne.n	8007144 <__sfputs_r+0xa>
 800715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007160 <_vfiprintf_r>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	460d      	mov	r5, r1
 8007166:	b09d      	sub	sp, #116	@ 0x74
 8007168:	4614      	mov	r4, r2
 800716a:	4698      	mov	r8, r3
 800716c:	4606      	mov	r6, r0
 800716e:	b118      	cbz	r0, 8007178 <_vfiprintf_r+0x18>
 8007170:	6a03      	ldr	r3, [r0, #32]
 8007172:	b90b      	cbnz	r3, 8007178 <_vfiprintf_r+0x18>
 8007174:	f7ff fdbc 	bl	8006cf0 <__sinit>
 8007178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800717a:	07d9      	lsls	r1, r3, #31
 800717c:	d405      	bmi.n	800718a <_vfiprintf_r+0x2a>
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	059a      	lsls	r2, r3, #22
 8007182:	d402      	bmi.n	800718a <_vfiprintf_r+0x2a>
 8007184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007186:	f7ff feb8 	bl	8006efa <__retarget_lock_acquire_recursive>
 800718a:	89ab      	ldrh	r3, [r5, #12]
 800718c:	071b      	lsls	r3, r3, #28
 800718e:	d501      	bpl.n	8007194 <_vfiprintf_r+0x34>
 8007190:	692b      	ldr	r3, [r5, #16]
 8007192:	b99b      	cbnz	r3, 80071bc <_vfiprintf_r+0x5c>
 8007194:	4629      	mov	r1, r5
 8007196:	4630      	mov	r0, r6
 8007198:	f000 fb72 	bl	8007880 <__swsetup_r>
 800719c:	b170      	cbz	r0, 80071bc <_vfiprintf_r+0x5c>
 800719e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071a0:	07dc      	lsls	r4, r3, #31
 80071a2:	d504      	bpl.n	80071ae <_vfiprintf_r+0x4e>
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	b01d      	add	sp, #116	@ 0x74
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	0598      	lsls	r0, r3, #22
 80071b2:	d4f7      	bmi.n	80071a4 <_vfiprintf_r+0x44>
 80071b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071b6:	f7ff fea1 	bl	8006efc <__retarget_lock_release_recursive>
 80071ba:	e7f3      	b.n	80071a4 <_vfiprintf_r+0x44>
 80071bc:	2300      	movs	r3, #0
 80071be:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c0:	2320      	movs	r3, #32
 80071c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ca:	2330      	movs	r3, #48	@ 0x30
 80071cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800737c <_vfiprintf_r+0x21c>
 80071d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071d4:	f04f 0901 	mov.w	r9, #1
 80071d8:	4623      	mov	r3, r4
 80071da:	469a      	mov	sl, r3
 80071dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e0:	b10a      	cbz	r2, 80071e6 <_vfiprintf_r+0x86>
 80071e2:	2a25      	cmp	r2, #37	@ 0x25
 80071e4:	d1f9      	bne.n	80071da <_vfiprintf_r+0x7a>
 80071e6:	ebba 0b04 	subs.w	fp, sl, r4
 80071ea:	d00b      	beq.n	8007204 <_vfiprintf_r+0xa4>
 80071ec:	465b      	mov	r3, fp
 80071ee:	4622      	mov	r2, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ffa1 	bl	800713a <__sfputs_r>
 80071f8:	3001      	adds	r0, #1
 80071fa:	f000 80a7 	beq.w	800734c <_vfiprintf_r+0x1ec>
 80071fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007200:	445a      	add	r2, fp
 8007202:	9209      	str	r2, [sp, #36]	@ 0x24
 8007204:	f89a 3000 	ldrb.w	r3, [sl]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 809f 	beq.w	800734c <_vfiprintf_r+0x1ec>
 800720e:	2300      	movs	r3, #0
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007218:	f10a 0a01 	add.w	sl, sl, #1
 800721c:	9304      	str	r3, [sp, #16]
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007224:	931a      	str	r3, [sp, #104]	@ 0x68
 8007226:	4654      	mov	r4, sl
 8007228:	2205      	movs	r2, #5
 800722a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722e:	4853      	ldr	r0, [pc, #332]	@ (800737c <_vfiprintf_r+0x21c>)
 8007230:	f7f8 ffce 	bl	80001d0 <memchr>
 8007234:	9a04      	ldr	r2, [sp, #16]
 8007236:	b9d8      	cbnz	r0, 8007270 <_vfiprintf_r+0x110>
 8007238:	06d1      	lsls	r1, r2, #27
 800723a:	bf44      	itt	mi
 800723c:	2320      	movmi	r3, #32
 800723e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007242:	0713      	lsls	r3, r2, #28
 8007244:	bf44      	itt	mi
 8007246:	232b      	movmi	r3, #43	@ 0x2b
 8007248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800724c:	f89a 3000 	ldrb.w	r3, [sl]
 8007250:	2b2a      	cmp	r3, #42	@ 0x2a
 8007252:	d015      	beq.n	8007280 <_vfiprintf_r+0x120>
 8007254:	9a07      	ldr	r2, [sp, #28]
 8007256:	4654      	mov	r4, sl
 8007258:	2000      	movs	r0, #0
 800725a:	f04f 0c0a 	mov.w	ip, #10
 800725e:	4621      	mov	r1, r4
 8007260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007264:	3b30      	subs	r3, #48	@ 0x30
 8007266:	2b09      	cmp	r3, #9
 8007268:	d94b      	bls.n	8007302 <_vfiprintf_r+0x1a2>
 800726a:	b1b0      	cbz	r0, 800729a <_vfiprintf_r+0x13a>
 800726c:	9207      	str	r2, [sp, #28]
 800726e:	e014      	b.n	800729a <_vfiprintf_r+0x13a>
 8007270:	eba0 0308 	sub.w	r3, r0, r8
 8007274:	fa09 f303 	lsl.w	r3, r9, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	46a2      	mov	sl, r4
 800727e:	e7d2      	b.n	8007226 <_vfiprintf_r+0xc6>
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	1d19      	adds	r1, r3, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	9103      	str	r1, [sp, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	bfbb      	ittet	lt
 800728c:	425b      	neglt	r3, r3
 800728e:	f042 0202 	orrlt.w	r2, r2, #2
 8007292:	9307      	strge	r3, [sp, #28]
 8007294:	9307      	strlt	r3, [sp, #28]
 8007296:	bfb8      	it	lt
 8007298:	9204      	strlt	r2, [sp, #16]
 800729a:	7823      	ldrb	r3, [r4, #0]
 800729c:	2b2e      	cmp	r3, #46	@ 0x2e
 800729e:	d10a      	bne.n	80072b6 <_vfiprintf_r+0x156>
 80072a0:	7863      	ldrb	r3, [r4, #1]
 80072a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a4:	d132      	bne.n	800730c <_vfiprintf_r+0x1ac>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	1d1a      	adds	r2, r3, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	9203      	str	r2, [sp, #12]
 80072ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072b2:	3402      	adds	r4, #2
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800738c <_vfiprintf_r+0x22c>
 80072ba:	7821      	ldrb	r1, [r4, #0]
 80072bc:	2203      	movs	r2, #3
 80072be:	4650      	mov	r0, sl
 80072c0:	f7f8 ff86 	bl	80001d0 <memchr>
 80072c4:	b138      	cbz	r0, 80072d6 <_vfiprintf_r+0x176>
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	eba0 000a 	sub.w	r0, r0, sl
 80072cc:	2240      	movs	r2, #64	@ 0x40
 80072ce:	4082      	lsls	r2, r0
 80072d0:	4313      	orrs	r3, r2
 80072d2:	3401      	adds	r4, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072da:	4829      	ldr	r0, [pc, #164]	@ (8007380 <_vfiprintf_r+0x220>)
 80072dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072e0:	2206      	movs	r2, #6
 80072e2:	f7f8 ff75 	bl	80001d0 <memchr>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d03f      	beq.n	800736a <_vfiprintf_r+0x20a>
 80072ea:	4b26      	ldr	r3, [pc, #152]	@ (8007384 <_vfiprintf_r+0x224>)
 80072ec:	bb1b      	cbnz	r3, 8007336 <_vfiprintf_r+0x1d6>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	3307      	adds	r3, #7
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	3308      	adds	r3, #8
 80072f8:	9303      	str	r3, [sp, #12]
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	443b      	add	r3, r7
 80072fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007300:	e76a      	b.n	80071d8 <_vfiprintf_r+0x78>
 8007302:	fb0c 3202 	mla	r2, ip, r2, r3
 8007306:	460c      	mov	r4, r1
 8007308:	2001      	movs	r0, #1
 800730a:	e7a8      	b.n	800725e <_vfiprintf_r+0xfe>
 800730c:	2300      	movs	r3, #0
 800730e:	3401      	adds	r4, #1
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	4619      	mov	r1, r3
 8007314:	f04f 0c0a 	mov.w	ip, #10
 8007318:	4620      	mov	r0, r4
 800731a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800731e:	3a30      	subs	r2, #48	@ 0x30
 8007320:	2a09      	cmp	r2, #9
 8007322:	d903      	bls.n	800732c <_vfiprintf_r+0x1cc>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0c6      	beq.n	80072b6 <_vfiprintf_r+0x156>
 8007328:	9105      	str	r1, [sp, #20]
 800732a:	e7c4      	b.n	80072b6 <_vfiprintf_r+0x156>
 800732c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007330:	4604      	mov	r4, r0
 8007332:	2301      	movs	r3, #1
 8007334:	e7f0      	b.n	8007318 <_vfiprintf_r+0x1b8>
 8007336:	ab03      	add	r3, sp, #12
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	462a      	mov	r2, r5
 800733c:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <_vfiprintf_r+0x228>)
 800733e:	a904      	add	r1, sp, #16
 8007340:	4630      	mov	r0, r6
 8007342:	f3af 8000 	nop.w
 8007346:	4607      	mov	r7, r0
 8007348:	1c78      	adds	r0, r7, #1
 800734a:	d1d6      	bne.n	80072fa <_vfiprintf_r+0x19a>
 800734c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800734e:	07d9      	lsls	r1, r3, #31
 8007350:	d405      	bmi.n	800735e <_vfiprintf_r+0x1fe>
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	059a      	lsls	r2, r3, #22
 8007356:	d402      	bmi.n	800735e <_vfiprintf_r+0x1fe>
 8007358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800735a:	f7ff fdcf 	bl	8006efc <__retarget_lock_release_recursive>
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	065b      	lsls	r3, r3, #25
 8007362:	f53f af1f 	bmi.w	80071a4 <_vfiprintf_r+0x44>
 8007366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007368:	e71e      	b.n	80071a8 <_vfiprintf_r+0x48>
 800736a:	ab03      	add	r3, sp, #12
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	462a      	mov	r2, r5
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <_vfiprintf_r+0x228>)
 8007372:	a904      	add	r1, sp, #16
 8007374:	4630      	mov	r0, r6
 8007376:	f000 f879 	bl	800746c <_printf_i>
 800737a:	e7e4      	b.n	8007346 <_vfiprintf_r+0x1e6>
 800737c:	08007c58 	.word	0x08007c58
 8007380:	08007c62 	.word	0x08007c62
 8007384:	00000000 	.word	0x00000000
 8007388:	0800713b 	.word	0x0800713b
 800738c:	08007c5e 	.word	0x08007c5e

08007390 <_printf_common>:
 8007390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	4616      	mov	r6, r2
 8007396:	4698      	mov	r8, r3
 8007398:	688a      	ldr	r2, [r1, #8]
 800739a:	690b      	ldr	r3, [r1, #16]
 800739c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bfb8      	it	lt
 80073a4:	4613      	movlt	r3, r2
 80073a6:	6033      	str	r3, [r6, #0]
 80073a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073ac:	4607      	mov	r7, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	b10a      	cbz	r2, 80073b6 <_printf_common+0x26>
 80073b2:	3301      	adds	r3, #1
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	0699      	lsls	r1, r3, #26
 80073ba:	bf42      	ittt	mi
 80073bc:	6833      	ldrmi	r3, [r6, #0]
 80073be:	3302      	addmi	r3, #2
 80073c0:	6033      	strmi	r3, [r6, #0]
 80073c2:	6825      	ldr	r5, [r4, #0]
 80073c4:	f015 0506 	ands.w	r5, r5, #6
 80073c8:	d106      	bne.n	80073d8 <_printf_common+0x48>
 80073ca:	f104 0a19 	add.w	sl, r4, #25
 80073ce:	68e3      	ldr	r3, [r4, #12]
 80073d0:	6832      	ldr	r2, [r6, #0]
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	dc26      	bgt.n	8007426 <_printf_common+0x96>
 80073d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073dc:	6822      	ldr	r2, [r4, #0]
 80073de:	3b00      	subs	r3, #0
 80073e0:	bf18      	it	ne
 80073e2:	2301      	movne	r3, #1
 80073e4:	0692      	lsls	r2, r2, #26
 80073e6:	d42b      	bmi.n	8007440 <_printf_common+0xb0>
 80073e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073ec:	4641      	mov	r1, r8
 80073ee:	4638      	mov	r0, r7
 80073f0:	47c8      	blx	r9
 80073f2:	3001      	adds	r0, #1
 80073f4:	d01e      	beq.n	8007434 <_printf_common+0xa4>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	6922      	ldr	r2, [r4, #16]
 80073fa:	f003 0306 	and.w	r3, r3, #6
 80073fe:	2b04      	cmp	r3, #4
 8007400:	bf02      	ittt	eq
 8007402:	68e5      	ldreq	r5, [r4, #12]
 8007404:	6833      	ldreq	r3, [r6, #0]
 8007406:	1aed      	subeq	r5, r5, r3
 8007408:	68a3      	ldr	r3, [r4, #8]
 800740a:	bf0c      	ite	eq
 800740c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007410:	2500      	movne	r5, #0
 8007412:	4293      	cmp	r3, r2
 8007414:	bfc4      	itt	gt
 8007416:	1a9b      	subgt	r3, r3, r2
 8007418:	18ed      	addgt	r5, r5, r3
 800741a:	2600      	movs	r6, #0
 800741c:	341a      	adds	r4, #26
 800741e:	42b5      	cmp	r5, r6
 8007420:	d11a      	bne.n	8007458 <_printf_common+0xc8>
 8007422:	2000      	movs	r0, #0
 8007424:	e008      	b.n	8007438 <_printf_common+0xa8>
 8007426:	2301      	movs	r3, #1
 8007428:	4652      	mov	r2, sl
 800742a:	4641      	mov	r1, r8
 800742c:	4638      	mov	r0, r7
 800742e:	47c8      	blx	r9
 8007430:	3001      	adds	r0, #1
 8007432:	d103      	bne.n	800743c <_printf_common+0xac>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743c:	3501      	adds	r5, #1
 800743e:	e7c6      	b.n	80073ce <_printf_common+0x3e>
 8007440:	18e1      	adds	r1, r4, r3
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	2030      	movs	r0, #48	@ 0x30
 8007446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800744a:	4422      	add	r2, r4
 800744c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007454:	3302      	adds	r3, #2
 8007456:	e7c7      	b.n	80073e8 <_printf_common+0x58>
 8007458:	2301      	movs	r3, #1
 800745a:	4622      	mov	r2, r4
 800745c:	4641      	mov	r1, r8
 800745e:	4638      	mov	r0, r7
 8007460:	47c8      	blx	r9
 8007462:	3001      	adds	r0, #1
 8007464:	d0e6      	beq.n	8007434 <_printf_common+0xa4>
 8007466:	3601      	adds	r6, #1
 8007468:	e7d9      	b.n	800741e <_printf_common+0x8e>
	...

0800746c <_printf_i>:
 800746c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007470:	7e0f      	ldrb	r7, [r1, #24]
 8007472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007474:	2f78      	cmp	r7, #120	@ 0x78
 8007476:	4691      	mov	r9, r2
 8007478:	4680      	mov	r8, r0
 800747a:	460c      	mov	r4, r1
 800747c:	469a      	mov	sl, r3
 800747e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007482:	d807      	bhi.n	8007494 <_printf_i+0x28>
 8007484:	2f62      	cmp	r7, #98	@ 0x62
 8007486:	d80a      	bhi.n	800749e <_printf_i+0x32>
 8007488:	2f00      	cmp	r7, #0
 800748a:	f000 80d2 	beq.w	8007632 <_printf_i+0x1c6>
 800748e:	2f58      	cmp	r7, #88	@ 0x58
 8007490:	f000 80b9 	beq.w	8007606 <_printf_i+0x19a>
 8007494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800749c:	e03a      	b.n	8007514 <_printf_i+0xa8>
 800749e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074a2:	2b15      	cmp	r3, #21
 80074a4:	d8f6      	bhi.n	8007494 <_printf_i+0x28>
 80074a6:	a101      	add	r1, pc, #4	@ (adr r1, 80074ac <_printf_i+0x40>)
 80074a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074ac:	08007505 	.word	0x08007505
 80074b0:	08007519 	.word	0x08007519
 80074b4:	08007495 	.word	0x08007495
 80074b8:	08007495 	.word	0x08007495
 80074bc:	08007495 	.word	0x08007495
 80074c0:	08007495 	.word	0x08007495
 80074c4:	08007519 	.word	0x08007519
 80074c8:	08007495 	.word	0x08007495
 80074cc:	08007495 	.word	0x08007495
 80074d0:	08007495 	.word	0x08007495
 80074d4:	08007495 	.word	0x08007495
 80074d8:	08007619 	.word	0x08007619
 80074dc:	08007543 	.word	0x08007543
 80074e0:	080075d3 	.word	0x080075d3
 80074e4:	08007495 	.word	0x08007495
 80074e8:	08007495 	.word	0x08007495
 80074ec:	0800763b 	.word	0x0800763b
 80074f0:	08007495 	.word	0x08007495
 80074f4:	08007543 	.word	0x08007543
 80074f8:	08007495 	.word	0x08007495
 80074fc:	08007495 	.word	0x08007495
 8007500:	080075db 	.word	0x080075db
 8007504:	6833      	ldr	r3, [r6, #0]
 8007506:	1d1a      	adds	r2, r3, #4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6032      	str	r2, [r6, #0]
 800750c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007514:	2301      	movs	r3, #1
 8007516:	e09d      	b.n	8007654 <_printf_i+0x1e8>
 8007518:	6833      	ldr	r3, [r6, #0]
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	1d19      	adds	r1, r3, #4
 800751e:	6031      	str	r1, [r6, #0]
 8007520:	0606      	lsls	r6, r0, #24
 8007522:	d501      	bpl.n	8007528 <_printf_i+0xbc>
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	e003      	b.n	8007530 <_printf_i+0xc4>
 8007528:	0645      	lsls	r5, r0, #25
 800752a:	d5fb      	bpl.n	8007524 <_printf_i+0xb8>
 800752c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007530:	2d00      	cmp	r5, #0
 8007532:	da03      	bge.n	800753c <_printf_i+0xd0>
 8007534:	232d      	movs	r3, #45	@ 0x2d
 8007536:	426d      	negs	r5, r5
 8007538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800753c:	4859      	ldr	r0, [pc, #356]	@ (80076a4 <_printf_i+0x238>)
 800753e:	230a      	movs	r3, #10
 8007540:	e011      	b.n	8007566 <_printf_i+0xfa>
 8007542:	6821      	ldr	r1, [r4, #0]
 8007544:	6833      	ldr	r3, [r6, #0]
 8007546:	0608      	lsls	r0, r1, #24
 8007548:	f853 5b04 	ldr.w	r5, [r3], #4
 800754c:	d402      	bmi.n	8007554 <_printf_i+0xe8>
 800754e:	0649      	lsls	r1, r1, #25
 8007550:	bf48      	it	mi
 8007552:	b2ad      	uxthmi	r5, r5
 8007554:	2f6f      	cmp	r7, #111	@ 0x6f
 8007556:	4853      	ldr	r0, [pc, #332]	@ (80076a4 <_printf_i+0x238>)
 8007558:	6033      	str	r3, [r6, #0]
 800755a:	bf14      	ite	ne
 800755c:	230a      	movne	r3, #10
 800755e:	2308      	moveq	r3, #8
 8007560:	2100      	movs	r1, #0
 8007562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007566:	6866      	ldr	r6, [r4, #4]
 8007568:	60a6      	str	r6, [r4, #8]
 800756a:	2e00      	cmp	r6, #0
 800756c:	bfa2      	ittt	ge
 800756e:	6821      	ldrge	r1, [r4, #0]
 8007570:	f021 0104 	bicge.w	r1, r1, #4
 8007574:	6021      	strge	r1, [r4, #0]
 8007576:	b90d      	cbnz	r5, 800757c <_printf_i+0x110>
 8007578:	2e00      	cmp	r6, #0
 800757a:	d04b      	beq.n	8007614 <_printf_i+0x1a8>
 800757c:	4616      	mov	r6, r2
 800757e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007582:	fb03 5711 	mls	r7, r3, r1, r5
 8007586:	5dc7      	ldrb	r7, [r0, r7]
 8007588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800758c:	462f      	mov	r7, r5
 800758e:	42bb      	cmp	r3, r7
 8007590:	460d      	mov	r5, r1
 8007592:	d9f4      	bls.n	800757e <_printf_i+0x112>
 8007594:	2b08      	cmp	r3, #8
 8007596:	d10b      	bne.n	80075b0 <_printf_i+0x144>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07df      	lsls	r7, r3, #31
 800759c:	d508      	bpl.n	80075b0 <_printf_i+0x144>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4299      	cmp	r1, r3
 80075a4:	bfde      	ittt	le
 80075a6:	2330      	movle	r3, #48	@ 0x30
 80075a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b0:	1b92      	subs	r2, r2, r6
 80075b2:	6122      	str	r2, [r4, #16]
 80075b4:	f8cd a000 	str.w	sl, [sp]
 80075b8:	464b      	mov	r3, r9
 80075ba:	aa03      	add	r2, sp, #12
 80075bc:	4621      	mov	r1, r4
 80075be:	4640      	mov	r0, r8
 80075c0:	f7ff fee6 	bl	8007390 <_printf_common>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d14a      	bne.n	800765e <_printf_i+0x1f2>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295
 80075cc:	b004      	add	sp, #16
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f043 0320 	orr.w	r3, r3, #32
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	4833      	ldr	r0, [pc, #204]	@ (80076a8 <_printf_i+0x23c>)
 80075dc:	2778      	movs	r7, #120	@ 0x78
 80075de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	6831      	ldr	r1, [r6, #0]
 80075e6:	061f      	lsls	r7, r3, #24
 80075e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80075ec:	d402      	bmi.n	80075f4 <_printf_i+0x188>
 80075ee:	065f      	lsls	r7, r3, #25
 80075f0:	bf48      	it	mi
 80075f2:	b2ad      	uxthmi	r5, r5
 80075f4:	6031      	str	r1, [r6, #0]
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	bf44      	itt	mi
 80075fa:	f043 0320 	orrmi.w	r3, r3, #32
 80075fe:	6023      	strmi	r3, [r4, #0]
 8007600:	b11d      	cbz	r5, 800760a <_printf_i+0x19e>
 8007602:	2310      	movs	r3, #16
 8007604:	e7ac      	b.n	8007560 <_printf_i+0xf4>
 8007606:	4827      	ldr	r0, [pc, #156]	@ (80076a4 <_printf_i+0x238>)
 8007608:	e7e9      	b.n	80075de <_printf_i+0x172>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	f023 0320 	bic.w	r3, r3, #32
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	e7f6      	b.n	8007602 <_printf_i+0x196>
 8007614:	4616      	mov	r6, r2
 8007616:	e7bd      	b.n	8007594 <_printf_i+0x128>
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	6825      	ldr	r5, [r4, #0]
 800761c:	6961      	ldr	r1, [r4, #20]
 800761e:	1d18      	adds	r0, r3, #4
 8007620:	6030      	str	r0, [r6, #0]
 8007622:	062e      	lsls	r6, r5, #24
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	d501      	bpl.n	800762c <_printf_i+0x1c0>
 8007628:	6019      	str	r1, [r3, #0]
 800762a:	e002      	b.n	8007632 <_printf_i+0x1c6>
 800762c:	0668      	lsls	r0, r5, #25
 800762e:	d5fb      	bpl.n	8007628 <_printf_i+0x1bc>
 8007630:	8019      	strh	r1, [r3, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	4616      	mov	r6, r2
 8007638:	e7bc      	b.n	80075b4 <_printf_i+0x148>
 800763a:	6833      	ldr	r3, [r6, #0]
 800763c:	1d1a      	adds	r2, r3, #4
 800763e:	6032      	str	r2, [r6, #0]
 8007640:	681e      	ldr	r6, [r3, #0]
 8007642:	6862      	ldr	r2, [r4, #4]
 8007644:	2100      	movs	r1, #0
 8007646:	4630      	mov	r0, r6
 8007648:	f7f8 fdc2 	bl	80001d0 <memchr>
 800764c:	b108      	cbz	r0, 8007652 <_printf_i+0x1e6>
 800764e:	1b80      	subs	r0, r0, r6
 8007650:	6060      	str	r0, [r4, #4]
 8007652:	6863      	ldr	r3, [r4, #4]
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	2300      	movs	r3, #0
 8007658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800765c:	e7aa      	b.n	80075b4 <_printf_i+0x148>
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	4632      	mov	r2, r6
 8007662:	4649      	mov	r1, r9
 8007664:	4640      	mov	r0, r8
 8007666:	47d0      	blx	sl
 8007668:	3001      	adds	r0, #1
 800766a:	d0ad      	beq.n	80075c8 <_printf_i+0x15c>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	079b      	lsls	r3, r3, #30
 8007670:	d413      	bmi.n	800769a <_printf_i+0x22e>
 8007672:	68e0      	ldr	r0, [r4, #12]
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	4298      	cmp	r0, r3
 8007678:	bfb8      	it	lt
 800767a:	4618      	movlt	r0, r3
 800767c:	e7a6      	b.n	80075cc <_printf_i+0x160>
 800767e:	2301      	movs	r3, #1
 8007680:	4632      	mov	r2, r6
 8007682:	4649      	mov	r1, r9
 8007684:	4640      	mov	r0, r8
 8007686:	47d0      	blx	sl
 8007688:	3001      	adds	r0, #1
 800768a:	d09d      	beq.n	80075c8 <_printf_i+0x15c>
 800768c:	3501      	adds	r5, #1
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	9903      	ldr	r1, [sp, #12]
 8007692:	1a5b      	subs	r3, r3, r1
 8007694:	42ab      	cmp	r3, r5
 8007696:	dcf2      	bgt.n	800767e <_printf_i+0x212>
 8007698:	e7eb      	b.n	8007672 <_printf_i+0x206>
 800769a:	2500      	movs	r5, #0
 800769c:	f104 0619 	add.w	r6, r4, #25
 80076a0:	e7f5      	b.n	800768e <_printf_i+0x222>
 80076a2:	bf00      	nop
 80076a4:	08007c69 	.word	0x08007c69
 80076a8:	08007c7a 	.word	0x08007c7a

080076ac <__sflush_r>:
 80076ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	0716      	lsls	r6, r2, #28
 80076b6:	4605      	mov	r5, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	d454      	bmi.n	8007766 <__sflush_r+0xba>
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc02      	bgt.n	80076c8 <__sflush_r+0x1c>
 80076c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dd48      	ble.n	800775a <__sflush_r+0xae>
 80076c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d045      	beq.n	800775a <__sflush_r+0xae>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076d4:	682f      	ldr	r7, [r5, #0]
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	d030      	beq.n	800773e <__sflush_r+0x92>
 80076dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	0759      	lsls	r1, r3, #29
 80076e2:	d505      	bpl.n	80076f0 <__sflush_r+0x44>
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076ea:	b10b      	cbz	r3, 80076f0 <__sflush_r+0x44>
 80076ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	2300      	movs	r3, #0
 80076f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f4:	6a21      	ldr	r1, [r4, #32]
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	d106      	bne.n	800770e <__sflush_r+0x62>
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	291d      	cmp	r1, #29
 8007704:	d82b      	bhi.n	800775e <__sflush_r+0xb2>
 8007706:	4a2a      	ldr	r2, [pc, #168]	@ (80077b0 <__sflush_r+0x104>)
 8007708:	410a      	asrs	r2, r1
 800770a:	07d6      	lsls	r6, r2, #31
 800770c:	d427      	bmi.n	800775e <__sflush_r+0xb2>
 800770e:	2200      	movs	r2, #0
 8007710:	6062      	str	r2, [r4, #4]
 8007712:	04d9      	lsls	r1, r3, #19
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	d504      	bpl.n	8007724 <__sflush_r+0x78>
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	d101      	bne.n	8007722 <__sflush_r+0x76>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b903      	cbnz	r3, 8007724 <__sflush_r+0x78>
 8007722:	6560      	str	r0, [r4, #84]	@ 0x54
 8007724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	b1b9      	cbz	r1, 800775a <__sflush_r+0xae>
 800772a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800772e:	4299      	cmp	r1, r3
 8007730:	d002      	beq.n	8007738 <__sflush_r+0x8c>
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff fbf2 	bl	8006f1c <_free_r>
 8007738:	2300      	movs	r3, #0
 800773a:	6363      	str	r3, [r4, #52]	@ 0x34
 800773c:	e00d      	b.n	800775a <__sflush_r+0xae>
 800773e:	2301      	movs	r3, #1
 8007740:	4628      	mov	r0, r5
 8007742:	47b0      	blx	r6
 8007744:	4602      	mov	r2, r0
 8007746:	1c50      	adds	r0, r2, #1
 8007748:	d1c9      	bne.n	80076de <__sflush_r+0x32>
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0c6      	beq.n	80076de <__sflush_r+0x32>
 8007750:	2b1d      	cmp	r3, #29
 8007752:	d001      	beq.n	8007758 <__sflush_r+0xac>
 8007754:	2b16      	cmp	r3, #22
 8007756:	d11e      	bne.n	8007796 <__sflush_r+0xea>
 8007758:	602f      	str	r7, [r5, #0]
 800775a:	2000      	movs	r0, #0
 800775c:	e022      	b.n	80077a4 <__sflush_r+0xf8>
 800775e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007762:	b21b      	sxth	r3, r3
 8007764:	e01b      	b.n	800779e <__sflush_r+0xf2>
 8007766:	690f      	ldr	r7, [r1, #16]
 8007768:	2f00      	cmp	r7, #0
 800776a:	d0f6      	beq.n	800775a <__sflush_r+0xae>
 800776c:	0793      	lsls	r3, r2, #30
 800776e:	680e      	ldr	r6, [r1, #0]
 8007770:	bf08      	it	eq
 8007772:	694b      	ldreq	r3, [r1, #20]
 8007774:	600f      	str	r7, [r1, #0]
 8007776:	bf18      	it	ne
 8007778:	2300      	movne	r3, #0
 800777a:	eba6 0807 	sub.w	r8, r6, r7
 800777e:	608b      	str	r3, [r1, #8]
 8007780:	f1b8 0f00 	cmp.w	r8, #0
 8007784:	dde9      	ble.n	800775a <__sflush_r+0xae>
 8007786:	6a21      	ldr	r1, [r4, #32]
 8007788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800778a:	4643      	mov	r3, r8
 800778c:	463a      	mov	r2, r7
 800778e:	4628      	mov	r0, r5
 8007790:	47b0      	blx	r6
 8007792:	2800      	cmp	r0, #0
 8007794:	dc08      	bgt.n	80077a8 <__sflush_r+0xfc>
 8007796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	4407      	add	r7, r0
 80077aa:	eba8 0800 	sub.w	r8, r8, r0
 80077ae:	e7e7      	b.n	8007780 <__sflush_r+0xd4>
 80077b0:	dfbffffe 	.word	0xdfbffffe

080077b4 <_fflush_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b913      	cbnz	r3, 80077c4 <_fflush_r+0x10>
 80077be:	2500      	movs	r5, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	b118      	cbz	r0, 80077ce <_fflush_r+0x1a>
 80077c6:	6a03      	ldr	r3, [r0, #32]
 80077c8:	b90b      	cbnz	r3, 80077ce <_fflush_r+0x1a>
 80077ca:	f7ff fa91 	bl	8006cf0 <__sinit>
 80077ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f3      	beq.n	80077be <_fflush_r+0xa>
 80077d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077d8:	07d0      	lsls	r0, r2, #31
 80077da:	d404      	bmi.n	80077e6 <_fflush_r+0x32>
 80077dc:	0599      	lsls	r1, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_fflush_r+0x32>
 80077e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077e2:	f7ff fb8a 	bl	8006efa <__retarget_lock_acquire_recursive>
 80077e6:	4628      	mov	r0, r5
 80077e8:	4621      	mov	r1, r4
 80077ea:	f7ff ff5f 	bl	80076ac <__sflush_r>
 80077ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f0:	07da      	lsls	r2, r3, #31
 80077f2:	4605      	mov	r5, r0
 80077f4:	d4e4      	bmi.n	80077c0 <_fflush_r+0xc>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	059b      	lsls	r3, r3, #22
 80077fa:	d4e1      	bmi.n	80077c0 <_fflush_r+0xc>
 80077fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077fe:	f7ff fb7d 	bl	8006efc <__retarget_lock_release_recursive>
 8007802:	e7dd      	b.n	80077c0 <_fflush_r+0xc>

08007804 <__swbuf_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	460e      	mov	r6, r1
 8007808:	4614      	mov	r4, r2
 800780a:	4605      	mov	r5, r0
 800780c:	b118      	cbz	r0, 8007816 <__swbuf_r+0x12>
 800780e:	6a03      	ldr	r3, [r0, #32]
 8007810:	b90b      	cbnz	r3, 8007816 <__swbuf_r+0x12>
 8007812:	f7ff fa6d 	bl	8006cf0 <__sinit>
 8007816:	69a3      	ldr	r3, [r4, #24]
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	071a      	lsls	r2, r3, #28
 800781e:	d501      	bpl.n	8007824 <__swbuf_r+0x20>
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b943      	cbnz	r3, 8007836 <__swbuf_r+0x32>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f82a 	bl	8007880 <__swsetup_r>
 800782c:	b118      	cbz	r0, 8007836 <__swbuf_r+0x32>
 800782e:	f04f 37ff 	mov.w	r7, #4294967295
 8007832:	4638      	mov	r0, r7
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	6922      	ldr	r2, [r4, #16]
 800783a:	1a98      	subs	r0, r3, r2
 800783c:	6963      	ldr	r3, [r4, #20]
 800783e:	b2f6      	uxtb	r6, r6
 8007840:	4283      	cmp	r3, r0
 8007842:	4637      	mov	r7, r6
 8007844:	dc05      	bgt.n	8007852 <__swbuf_r+0x4e>
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff ffb3 	bl	80077b4 <_fflush_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	d1ed      	bne.n	800782e <__swbuf_r+0x2a>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	3b01      	subs	r3, #1
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	6022      	str	r2, [r4, #0]
 800785e:	701e      	strb	r6, [r3, #0]
 8007860:	6962      	ldr	r2, [r4, #20]
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	429a      	cmp	r2, r3
 8007866:	d004      	beq.n	8007872 <__swbuf_r+0x6e>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d5e1      	bpl.n	8007832 <__swbuf_r+0x2e>
 800786e:	2e0a      	cmp	r6, #10
 8007870:	d1df      	bne.n	8007832 <__swbuf_r+0x2e>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff ff9d 	bl	80077b4 <_fflush_r>
 800787a:	2800      	cmp	r0, #0
 800787c:	d0d9      	beq.n	8007832 <__swbuf_r+0x2e>
 800787e:	e7d6      	b.n	800782e <__swbuf_r+0x2a>

08007880 <__swsetup_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <__swsetup_r+0xa8>)
 8007884:	4605      	mov	r5, r0
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	460c      	mov	r4, r1
 800788a:	b118      	cbz	r0, 8007894 <__swsetup_r+0x14>
 800788c:	6a03      	ldr	r3, [r0, #32]
 800788e:	b90b      	cbnz	r3, 8007894 <__swsetup_r+0x14>
 8007890:	f7ff fa2e 	bl	8006cf0 <__sinit>
 8007894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007898:	0719      	lsls	r1, r3, #28
 800789a:	d422      	bmi.n	80078e2 <__swsetup_r+0x62>
 800789c:	06da      	lsls	r2, r3, #27
 800789e:	d407      	bmi.n	80078b0 <__swsetup_r+0x30>
 80078a0:	2209      	movs	r2, #9
 80078a2:	602a      	str	r2, [r5, #0]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	e033      	b.n	8007918 <__swsetup_r+0x98>
 80078b0:	0758      	lsls	r0, r3, #29
 80078b2:	d512      	bpl.n	80078da <__swsetup_r+0x5a>
 80078b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b6:	b141      	cbz	r1, 80078ca <__swsetup_r+0x4a>
 80078b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <__swsetup_r+0x46>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff fb2b 	bl	8006f1c <_free_r>
 80078c6:	2300      	movs	r3, #0
 80078c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	b94b      	cbnz	r3, 80078fa <__swsetup_r+0x7a>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f0:	d003      	beq.n	80078fa <__swsetup_r+0x7a>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f84f 	bl	8007998 <__smakebuf_r>
 80078fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fe:	f013 0201 	ands.w	r2, r3, #1
 8007902:	d00a      	beq.n	800791a <__swsetup_r+0x9a>
 8007904:	2200      	movs	r2, #0
 8007906:	60a2      	str	r2, [r4, #8]
 8007908:	6962      	ldr	r2, [r4, #20]
 800790a:	4252      	negs	r2, r2
 800790c:	61a2      	str	r2, [r4, #24]
 800790e:	6922      	ldr	r2, [r4, #16]
 8007910:	b942      	cbnz	r2, 8007924 <__swsetup_r+0xa4>
 8007912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007916:	d1c5      	bne.n	80078a4 <__swsetup_r+0x24>
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	0799      	lsls	r1, r3, #30
 800791c:	bf58      	it	pl
 800791e:	6962      	ldrpl	r2, [r4, #20]
 8007920:	60a2      	str	r2, [r4, #8]
 8007922:	e7f4      	b.n	800790e <__swsetup_r+0x8e>
 8007924:	2000      	movs	r0, #0
 8007926:	e7f7      	b.n	8007918 <__swsetup_r+0x98>
 8007928:	2000001c 	.word	0x2000001c

0800792c <_sbrk_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_sbrk_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7fa fcd8 	bl	80022ec <_sbrk>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_sbrk_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_sbrk_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	200042e0 	.word	0x200042e0

0800794c <__swhatbuf_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	460c      	mov	r4, r1
 8007950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007954:	2900      	cmp	r1, #0
 8007956:	b096      	sub	sp, #88	@ 0x58
 8007958:	4615      	mov	r5, r2
 800795a:	461e      	mov	r6, r3
 800795c:	da0d      	bge.n	800797a <__swhatbuf_r+0x2e>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	bf14      	ite	ne
 800796a:	2340      	movne	r3, #64	@ 0x40
 800796c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007970:	2000      	movs	r0, #0
 8007972:	6031      	str	r1, [r6, #0]
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	b016      	add	sp, #88	@ 0x58
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	466a      	mov	r2, sp
 800797c:	f000 f848 	bl	8007a10 <_fstat_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	dbec      	blt.n	800795e <__swhatbuf_r+0x12>
 8007984:	9901      	ldr	r1, [sp, #4]
 8007986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800798a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800798e:	4259      	negs	r1, r3
 8007990:	4159      	adcs	r1, r3
 8007992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007996:	e7eb      	b.n	8007970 <__swhatbuf_r+0x24>

08007998 <__smakebuf_r>:
 8007998:	898b      	ldrh	r3, [r1, #12]
 800799a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799c:	079d      	lsls	r5, r3, #30
 800799e:	4606      	mov	r6, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	d507      	bpl.n	80079b4 <__smakebuf_r+0x1c>
 80079a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	2301      	movs	r3, #1
 80079ae:	6163      	str	r3, [r4, #20]
 80079b0:	b003      	add	sp, #12
 80079b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b4:	ab01      	add	r3, sp, #4
 80079b6:	466a      	mov	r2, sp
 80079b8:	f7ff ffc8 	bl	800794c <__swhatbuf_r>
 80079bc:	9f00      	ldr	r7, [sp, #0]
 80079be:	4605      	mov	r5, r0
 80079c0:	4639      	mov	r1, r7
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff fb16 	bl	8006ff4 <_malloc_r>
 80079c8:	b948      	cbnz	r0, 80079de <__smakebuf_r+0x46>
 80079ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ce:	059a      	lsls	r2, r3, #22
 80079d0:	d4ee      	bmi.n	80079b0 <__smakebuf_r+0x18>
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	e7e2      	b.n	80079a4 <__smakebuf_r+0xc>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	6020      	str	r0, [r4, #0]
 80079e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079ee:	b15b      	cbz	r3, 8007a08 <__smakebuf_r+0x70>
 80079f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f81d 	bl	8007a34 <_isatty_r>
 80079fa:	b128      	cbz	r0, 8007a08 <__smakebuf_r+0x70>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	431d      	orrs	r5, r3
 8007a0c:	81a5      	strh	r5, [r4, #12]
 8007a0e:	e7cf      	b.n	80079b0 <__smakebuf_r+0x18>

08007a10 <_fstat_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	@ (8007a30 <_fstat_r+0x20>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	f7fa fc3c 	bl	800229a <_fstat>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d102      	bne.n	8007a2c <_fstat_r+0x1c>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	b103      	cbz	r3, 8007a2c <_fstat_r+0x1c>
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	200042e0 	.word	0x200042e0

08007a34 <_isatty_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	@ (8007a50 <_isatty_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7fa fc3b 	bl	80022ba <_isatty>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_isatty_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_isatty_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	200042e0 	.word	0x200042e0

08007a54 <_init>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr

08007a60 <_fini>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr
