
freertos_cmsis1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00008f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f44  08007f44  00008f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007f48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00004284  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200042f0  200042f0  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d2f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4f  00000000  00000000  0001ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00021920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1b  00000000  00000000  00022ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f38  00000000  00000000  00023bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017510  00000000  00000000  00047b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65eb  00000000  00000000  0005f043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013562e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a24  00000000  00000000  00135674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf4 	.word	0x08007cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007cf4 	.word	0x08007cf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	@ (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	@ (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	@ (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	@ 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

	// Enable USART3 clock
	__HAL_RCC_USART3_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b3f      	ldr	r3, [pc, #252]	@ (8001118 <UART_Init+0x108>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a3e      	ldr	r2, [pc, #248]	@ (8001118 <UART_Init+0x108>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40
 8001026:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <UART_Init+0x108>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]

	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <UART_Init+0x108>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a37      	ldr	r2, [pc, #220]	@ (8001118 <UART_Init+0x108>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b35      	ldr	r3, [pc, #212]	@ (8001118 <UART_Init+0x108>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

	// Configure USART3 TX and RX pins
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 800105e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001062:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001070:	2307      	movs	r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4828      	ldr	r0, [pc, #160]	@ (800111c <UART_Init+0x10c>)
 800107c:	f001 fc84 	bl	8002988 <HAL_GPIO_Init>

	// Configure USART3
	USART3->CR1 &= ~USART_CR1_UE; // Disable USART3
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <UART_Init+0x110>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <UART_Init+0x110>)
 8001086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800108a:	60d3      	str	r3, [r2, #12]

	// Communication bidirectionnelle, 8 bits de donnée, 1 bit de stop, pas de parité
	USART3->CR1 &= ~USART_CR1_M; // 8 bits de donnée
 800108c:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <UART_Init+0x110>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <UART_Init+0x110>)
 8001092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001096:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~USART_CR1_PCE; // Pas de parité
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <UART_Init+0x110>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <UART_Init+0x110>)
 800109e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010a2:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_STOP; // 1 bit de stop
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <UART_Init+0x110>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <UART_Init+0x110>)
 80010aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010ae:	6113      	str	r3, [r2, #16]

	USART3->CR1 |= USART_CR1_RXNEIE; // Activate RXNIE for interruptions
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <UART_Init+0x110>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <UART_Init+0x110>)
 80010b6:	f043 0320 	orr.w	r3, r3, #32
 80010ba:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_LBDL; // 10 bits for break
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <UART_Init+0x110>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <UART_Init+0x110>)
 80010c2:	f023 0320 	bic.w	r3, r3, #32
 80010c6:	6113      	str	r3, [r2, #16]
	// Vitesse de communication de 9600bauds et oversampling à 16
	// BRR = fclk / (16 * baudrate)
	// Ici, fclk = 84MHz, baudrate = 9600
	// BRR = 84MHz / (16 * 9600) = 546.875
	// Integer part = 546, Fractional part = 0.875 * 16 = 14
	USART3->BRR = 0x00001117; // 273d (546d = 0x222)
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <UART_Init+0x110>)
 80010ca:	f241 1217 	movw	r2, #4375	@ 0x1117
 80010ce:	609a      	str	r2, [r3, #8]
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE; // Enable Tx and Rx
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <UART_Init+0x110>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <UART_Init+0x110>)
 80010d6:	f043 030c 	orr.w	r3, r3, #12
 80010da:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_UE;
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <UART_Init+0x110>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <UART_Init+0x110>)
 80010e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e6:	60d3      	str	r3, [r2, #12]

	HAL_Delay(1); // Attente de 1ms
 80010e8:	2001      	movs	r0, #1
 80010ea:	f001 fb47 	bl	800277c <HAL_Delay>
	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80010ee:	f7ff ff05 	bl	8000efc <__NVIC_GetPriorityGrouping>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2200      	movs	r2, #0
 80010f6:	2106      	movs	r1, #6
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff55 	bl	8000fa8 <NVIC_EncodePriority>
 80010fe:	4603      	mov	r3, r0
 8001100:	4619      	mov	r1, r3
 8001102:	2027      	movs	r0, #39	@ 0x27
 8001104:	f7ff ff26 	bl	8000f54 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 8001108:	2027      	movs	r0, #39	@ 0x27
 800110a:	f7ff ff05 	bl	8000f18 <__NVIC_EnableIRQ>

	//
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400
 8001120:	40004800 	.word	0x40004800

08001124 <sync_break>:
	USART3->CR1 |= USART_CR1_RXNEIE;
}

/*--- Transmit LIN Request ---*/
void sync_break(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	// Send break character
	USART3->CR1 |= USART_CR1_SBK; // Send break
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <sync_break+0x20>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <sync_break+0x20>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	60d3      	str	r3, [r2, #12]
	//while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete
//	serial_puts("SYNCH_BREAK: Sent break");
//	newLine();
    // Send Sync field (0x55)
    USART3->DR = 0x55;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <sync_break+0x20>)
 8001136:	2255      	movs	r2, #85	@ 0x55
 8001138:	605a      	str	r2, [r3, #4]
//	serial_puts("SYNCH_BREAK: Sent synch");
//	newLine();
    //while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete

}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40004800 	.word	0x40004800

08001148 <SendHeader>:

void SendHeader(LINMSG *msg)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	sync_break(); // send break and synch
 8001150:	f7ff ffe8 	bl	8001124 <sync_break>
	UART_PutChar(msg->ID); // send Id
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f819 	bl	8001190 <UART_PutChar>
//	serial_puts("HEADER: Sent header");
//	newLine();
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <SendRequest>:

void SendRequest(LINMSG *msg)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <SendRequest+0x24>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a05      	ldr	r2, [pc, #20]	@ (800118c <SendRequest+0x24>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	60d3      	str	r3, [r2, #12]
	SendHeader(msg);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe3 	bl	8001148 <SendHeader>
	// activate interrupt
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40004800 	.word	0x40004800

08001190 <UART_PutChar>:


/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	LINMSG msg;
	msg.ID = 0x67;
 800119a:	2367      	movs	r3, #103	@ 0x67
 800119c:	733b      	strb	r3, [r7, #12]
	msg.data[0] = data;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	73bb      	strb	r3, [r7, #14]
	msg.length = 8;
 80011a2:	2308      	movs	r3, #8
 80011a4:	737b      	strb	r3, [r7, #13]

	//Load data to register
	USART3->DR = data;
 80011a6:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <UART_PutChar+0x48>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 80011ac:	bf00      	nop
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <UART_PutChar+0x48>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f9      	beq.n	80011ae <UART_PutChar+0x1e>
	while(!(USART3->SR & 0x00000040));
 80011ba:	bf00      	nop
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <UART_PutChar+0x48>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f9      	beq.n	80011bc <UART_PutChar+0x2c>

}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40004800 	.word	0x40004800

080011dc <CAN_config_filter>:
//    CAN1->FMR &= 0x0;
//
//}
//
void CAN_config_filter(uint8_t IDE, uint32_t Filter_ID_high, uint32_t Filter_ID_low,
  uint32_t Filter_Mask_high, uint32_t Filter_Mask_low) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
  // We will use filter 0 for 0x100 to 0x10F (Mask mode)
  // Filter 1 for 0x200 and 0x205 (ID List mode)
  // ////////////////////////////////////////////////////////

  // Deactivate Filter 0 and 1
  CAN1 -> FA1R &= 0xFFFFFFFC;
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <CAN_config_filter+0x100>)
 80011ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80011f2:	4a3a      	ldr	r2, [pc, #232]	@ (80012dc <CAN_config_filter+0x100>)
 80011f4:	f023 0303 	bic.w	r3, r3, #3
 80011f8:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // initialize mode for all filters
  CAN1 -> FMR |= 0x1;
 80011fc:	4b37      	ldr	r3, [pc, #220]	@ (80012dc <CAN_config_filter+0x100>)
 80011fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001202:	4a36      	ldr	r2, [pc, #216]	@ (80012dc <CAN_config_filter+0x100>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  if (IDE == 0) {
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d12c      	bne.n	800126c <CAN_config_filter+0x90>
    // ///////////////////////////
    // Filters with 32 bits mode//
    // ///////////////////////////

    CAN1 -> FS1R |= 0x00000003; // 32 bits filter for filter 0 ,1
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <CAN_config_filter+0x100>)
 8001214:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001218:	4a30      	ldr	r2, [pc, #192]	@ (80012dc <CAN_config_filter+0x100>)
 800121a:	f043 0303 	orr.w	r3, r3, #3
 800121e:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <CAN_config_filter+0x100>)
 8001224:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001228:	4a2c      	ldr	r2, [pc, #176]	@ (80012dc <CAN_config_filter+0x100>)
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <CAN_config_filter+0x100>)
 8001234:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <CAN_config_filter+0x100>)
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    /*
     **/
    CAN1 -> sFilterRegister[0].FR1 = (Filter_ID_high << 21); //ID
 8001242:	4a26      	ldr	r2, [pc, #152]	@ (80012dc <CAN_config_filter+0x100>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	055b      	lsls	r3, r3, #21
 8001248:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
    CAN1 -> sFilterRegister[0].FR2 = (Filter_Mask_high << 21); // Mask
 800124c:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <CAN_config_filter+0x100>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	055b      	lsls	r3, r3, #21
 8001252:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244

    CAN1 -> sFilterRegister[1].FR1 = (Filter_ID_low << 21); //ID
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <CAN_config_filter+0x100>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	055b      	lsls	r3, r3, #21
 800125c:	f8c2 3248 	str.w	r3, [r2, #584]	@ 0x248
    CAN1 -> sFilterRegister[1].FR2 = (Filter_Mask_low << 21); // ID
 8001260:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <CAN_config_filter+0x100>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	055b      	lsls	r3, r3, #21
 8001266:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 800126a:	e020      	b.n	80012ae <CAN_config_filter+0xd2>
    //CAN1->sFilterRegister[1].FR2 |= 0x2; //ID with RTR = 1

  } else {
    // Filters with dual 16 bits config
    CAN1 -> FS1R &= 0xFFFFFFC; // Dual 16 bits filter for filter 0 ,1
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <CAN_config_filter+0x100>)
 800126e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001272:	4a1a      	ldr	r2, [pc, #104]	@ (80012dc <CAN_config_filter+0x100>)
 8001274:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <CAN_config_filter+0x100>)
 8001282:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <CAN_config_filter+0x100>)
 8001288:	f023 0303 	bic.w	r3, r3, #3
 800128c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <CAN_config_filter+0x100>)
 8001292:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001296:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <CAN_config_filter+0x100>)
 8001298:	f023 0303 	bic.w	r3, r3, #3
 800129c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    //CAN1->sFilterRegister[0].FR1 =  (Filter_ID_low << 5) ; //((Filter_Mask_low <<5) <<16) || (Filter_ID_low << 5); //ID
    CAN1 -> sFilterRegister[0].FR1 = (Filter_Mask_low << 16) | (Filter_ID_low); //((Filter_Mask_low <<5) <<16); // Mask
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	041a      	lsls	r2, r3, #16
 80012a4:	490d      	ldr	r1, [pc, #52]	@ (80012dc <CAN_config_filter+0x100>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	f8c1 3240 	str.w	r3, [r1, #576]	@ 0x240

  }

  // Activate Filter 0 and 1
  CAN1 -> FA1R |= 0x00000003;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <CAN_config_filter+0x100>)
 80012b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80012b4:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <CAN_config_filter+0x100>)
 80012b6:	f043 0303 	orr.w	r3, r3, #3
 80012ba:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // Leave Filter init
  CAN1 -> FMR &= 0xFFFFFFFE;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <CAN_config_filter+0x100>)
 80012c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012c4:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <CAN_config_filter+0x100>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40006400 	.word	0x40006400

080012e0 <CAN_config>:

void CAN_config(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
    0
  };

  //EnableCANCLock
  __HAL_RCC_CAN1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <CAN_config+0xf8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a36      	ldr	r2, [pc, #216]	@ (80013d8 <CAN_config+0xf8>)
 8001300:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <CAN_config+0xf8>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]

  //ConfigureGPIOs
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <CAN_config+0xf8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a2f      	ldr	r2, [pc, #188]	@ (80013d8 <CAN_config+0xf8>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <CAN_config+0xf8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  /*CAN1GPIOConfiguration
  PB8------>CAN1_RX
  PB9------>CAN1_TX*/

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800132e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001340:	2309      	movs	r3, #9
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4824      	ldr	r0, [pc, #144]	@ (80013dc <CAN_config+0xfc>)
 800134c:	f001 fb1c 	bl	8002988 <HAL_GPIO_Init>

  //ClearSleepbittowakeup
  CAN1 -> MCR &= 0xFFFFFFFD;
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <CAN_config+0x100>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <CAN_config+0x100>)
 8001356:	f023 0302 	bic.w	r3, r3, #2
 800135a:	6013      	str	r3, [r2, #0]
  //WaitforCANtowakeup
  while (CAN1 -> MSR & 0x00000002);
 800135c:	bf00      	nop
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <CAN_config+0x100>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <CAN_config+0x7e>
  //Switchtoconfigmode
  CAN1 -> MCR |= 0x00000001;
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <CAN_config+0x100>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <CAN_config+0x100>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]
  //Waitforconfigmod
  while (!(CAN1 -> MSR & 0x1));
 8001376:	bf00      	nop
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <CAN_config+0x100>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f9      	beq.n	8001378 <CAN_config+0x98>

  //Setconfig
  CAN1 -> MCR &= 0x00000001;
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <CAN_config+0x100>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <CAN_config+0x100>)
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

  CAN1 -> BTR = 0x00250010; //Par ordre : loop back activé
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <CAN_config+0x100>)
 8001392:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <CAN_config+0x104>)
 8001394:	61da      	str	r2, [r3, #28]

  //INTERRUPTION//
  //Set Interrupt RXFIFO0 (FMPIE0) and TX box empty

  CAN1 -> IER |= 0x2;
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <CAN_config+0x100>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <CAN_config+0x100>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6153      	str	r3, [r2, #20]
  ///Activate Interrupton NVIC
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2106      	movs	r1, #6
 80013a6:	2014      	movs	r0, #20
 80013a8:	f001 fac4 	bl	8002934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013ac:	2014      	movs	r0, #20
 80013ae:	f001 fadd 	bl	800296c <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_SetPriority(CAN1_TX_IRQn,0,2);
  //HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
  ////////////////
  // Go to normal mode
  CAN1 -> MCR &= 0xFFFFFFFE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <CAN_config+0x100>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <CAN_config+0x100>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
  //Wait f o r normal mod
  while (CAN1 -> MSR & 0x1);
 80013be:	bf00      	nop
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <CAN_config+0x100>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f9      	bne.n	80013c0 <CAN_config+0xe0>

  //      initializeBuffer(&farriere_portA);
  //      initializeBuffer(&farriere_portB);
  //      initializeBuffer(&farriere_portC);
  //      initializeBuffer(&etat_commodo);
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40006400 	.word	0x40006400
 80013e4:	00250010 	.word	0x00250010

080013e8 <CAN_readFrame>:
    CAN1 -> sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
    CAN1 -> sTxMailBox[0].TIR |= 1; //Sendthemessage
  } else return (0);
}

uint8_t CAN_readFrame() {
 80013e8:	b490      	push	{r4, r7}
 80013ea:	af00      	add	r7, sp, #0
  CAN_RxMessage.STDID = CAN1 -> sFIFOMailBox[0].RIR >> 3;
 80013ec:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <CAN_readFrame+0x104>)
 80013ee:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	4a3e      	ldr	r2, [pc, #248]	@ (80014f0 <CAN_readFrame+0x108>)
 80013f6:	6013      	str	r3, [r2, #0]
  CAN_RxMessage.RTR = (CAN1 -> sFIFOMailBox[0].RIR >> 1) & 0x1;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ec <CAN_readFrame+0x104>)
 80013fa:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80013fe:	085b      	lsrs	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b39      	ldr	r3, [pc, #228]	@ (80014f0 <CAN_readFrame+0x108>)
 800140a:	711a      	strb	r2, [r3, #4]
  CAN_RxMessage.DLC = CAN1 -> sFIFOMailBox[0].RDTR & 0xF;
 800140c:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <CAN_readFrame+0x104>)
 800140e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <CAN_readFrame+0x108>)
 800141c:	715a      	strb	r2, [r3, #5]
  CAN_RxMessage.data[0] = CAN1 -> sFIFOMailBox[0].RDLR & 0xFF;
 800141e:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <CAN_readFrame+0x104>)
 8001420:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <CAN_readFrame+0x108>)
 8001428:	719a      	strb	r2, [r3, #6]
  CAN_RxMessage.data[1] = (CAN1 -> sFIFOMailBox[0].RDLR >> 8) & 0xFF;
 800142a:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <CAN_readFrame+0x104>)
 800142c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <CAN_readFrame+0x108>)
 8001436:	71da      	strb	r2, [r3, #7]
  CAN_RxMessage.data[2] = (CAN1 -> sFIFOMailBox[0].RDLR >> 16) & 0xFF;
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <CAN_readFrame+0x104>)
 800143a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800143e:	0c1b      	lsrs	r3, r3, #16
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <CAN_readFrame+0x108>)
 8001444:	721a      	strb	r2, [r3, #8]
  CAN_RxMessage.data[3] = (CAN1 -> sFIFOMailBox[0].RDLR >> 24) & 0xFF;
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <CAN_readFrame+0x104>)
 8001448:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800144c:	0e1b      	lsrs	r3, r3, #24
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <CAN_readFrame+0x108>)
 8001452:	725a      	strb	r2, [r3, #9]
  CAN_RxMessage.data[4] = CAN1 -> sFIFOMailBox[0].RDHR & 0xFF;
 8001454:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <CAN_readFrame+0x104>)
 8001456:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <CAN_readFrame+0x108>)
 800145e:	729a      	strb	r2, [r3, #10]
  CAN_RxMessage.data[5] = (CAN1 -> sFIFOMailBox[0].RDHR >> 8) & 0xFF;
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <CAN_readFrame+0x104>)
 8001462:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <CAN_readFrame+0x108>)
 800146c:	72da      	strb	r2, [r3, #11]
  CAN_RxMessage.data[6] = (CAN1 -> sFIFOMailBox[0].RDHR >> 16) & 0xFF;
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <CAN_readFrame+0x104>)
 8001470:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001474:	0c1b      	lsrs	r3, r3, #16
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <CAN_readFrame+0x108>)
 800147a:	731a      	strb	r2, [r3, #12]
  CAN_RxMessage.data[7] = (CAN1 -> sFIFOMailBox[0].RDHR >> 24) & 0xFF;
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <CAN_readFrame+0x104>)
 800147e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001482:	0e1b      	lsrs	r3, r3, #24
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <CAN_readFrame+0x108>)
 8001488:	735a      	strb	r2, [r3, #13]

  CAN_RxMessages[total_received] = CAN_RxMessage;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <CAN_readFrame+0x10c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <CAN_readFrame+0x110>)
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <CAN_readFrame+0x108>)
 8001496:	461c      	mov	r4, r3
 8001498:	4613      	mov	r3, r2
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  total_received = (total_received + 1) % BUFFER_LIMIT;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <CAN_readFrame+0x10c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	1c59      	adds	r1, r3, #1
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <CAN_readFrame+0x114>)
 80014a8:	fb83 2301 	smull	r2, r3, r3, r1
 80014ac:	109a      	asrs	r2, r3, #2
 80014ae:	17cb      	asrs	r3, r1, #31
 80014b0:	1ad2      	subs	r2, r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1aca      	subs	r2, r1, r3
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <CAN_readFrame+0x10c>)
 80014be:	601a      	str	r2, [r3, #0]
  can_read_data = 1;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <CAN_readFrame+0x118>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
  if (total_received >= (BUFFER_LIMIT - 3)) { //== read_index
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <CAN_readFrame+0x10c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	dd02      	ble.n	80014d4 <CAN_readFrame+0xec>
    emergency_data_read = 1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <CAN_readFrame+0x11c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
  }

  CAN1 -> RF0R |= 0x20;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <CAN_readFrame+0x104>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <CAN_readFrame+0x104>)
 80014da:	f043 0320 	orr.w	r3, r3, #32
 80014de:	60d3      	str	r3, [r2, #12]

}
 80014e0:	bf00      	nop
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc90      	pop	{r4, r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40006400 	.word	0x40006400
 80014f0:	2000034c 	.word	0x2000034c
 80014f4:	20000088 	.word	0x20000088
 80014f8:	2000035c 	.word	0x2000035c
 80014fc:	66666667 	.word	0x66666667
 8001500:	200003fd 	.word	0x200003fd
 8001504:	200003fc 	.word	0x200003fc

08001508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <vApplicationGetIdleTaskMemory+0x2c>)
 8001518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4a06      	ldr	r2, [pc, #24]	@ (8001538 <vApplicationGetIdleTaskMemory+0x30>)
 800151e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2280      	movs	r2, #128	@ 0x80
 8001524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000008c 	.word	0x2000008c
 8001538:	200000e0 	.word	0x200000e0

0800153c <init_ACC>:
 * It sets the accelerometer to 100Hz, activates all axes, and configures interrupts wich are
 * triggered on the INT1 pin of the LIS3DSH.
 * 
 * @return void
 */
void init_ACC(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 8001540:	20a4      	movs	r0, #164	@ 0xa4
 8001542:	f000 fd9d 	bl	8002080 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001546:	20a4      	movs	r0, #164	@ 0xa4
 8001548:	f000 fd9a 	bl	8002080 <SPIread>

    //CTRL_REG4
    SPIwrite(CTRL_REG4, 0x67); // 100 Hz, tous les axes actifs
 800154c:	2167      	movs	r1, #103	@ 0x67
 800154e:	2020      	movs	r0, #32
 8001550:	f000 fd4e 	bl	8001ff0 <SPIwrite>

    //CTRL_REG5
    SPIwrite(CTRL_REG5, 0x00);//40h
 8001554:	2100      	movs	r1, #0
 8001556:	2024      	movs	r0, #36	@ 0x24
 8001558:	f000 fd4a 	bl	8001ff0 <SPIwrite>

    //INTERRUPT
    SPIwrite(CTRL_REG3, 0x68); // Enable DRDY interrupt on INT1 + IEL
 800155c:	2168      	movs	r1, #104	@ 0x68
 800155e:	2023      	movs	r0, #35	@ 0x23
 8001560:	f000 fd46 	bl	8001ff0 <SPIwrite>

    //SM1 config
    SPIwrite(THRS_SM1_1, 0x50); // Threshold for SM1 (1.25G)
 8001564:	2150      	movs	r1, #80	@ 0x50
 8001566:	2057      	movs	r0, #87	@ 0x57
 8001568:	f000 fd42 	bl	8001ff0 <SPIwrite>
    SPIwrite(MASK1_A, 0x08); // Mask SM1 interrupt (Z axis)
 800156c:	2108      	movs	r1, #8
 800156e:	205a      	movs	r0, #90	@ 0x5a
 8001570:	f000 fd3e 	bl	8001ff0 <SPIwrite>
    SPIwrite(MASK1_B, 0x08);
 8001574:	2108      	movs	r1, #8
 8001576:	2059      	movs	r0, #89	@ 0x59
 8001578:	f000 fd3a 	bl	8001ff0 <SPIwrite>
    SPIwrite(SETT1, 0x23);
 800157c:	2123      	movs	r1, #35	@ 0x23
 800157e:	205b      	movs	r0, #91	@ 0x5b
 8001580:	f000 fd36 	bl	8001ff0 <SPIwrite>
    //ST1x config
    SPIwrite(0x40,0x05);// NOP next: > THRS1
 8001584:	2105      	movs	r1, #5
 8001586:	2040      	movs	r0, #64	@ 0x40
 8001588:	f000 fd32 	bl	8001ff0 <SPIwrite>
    SPIwrite(0x41,0x11);// Continue
 800158c:	2111      	movs	r1, #17
 800158e:	2041      	movs	r0, #65	@ 0x41
 8001590:	f000 fd2e 	bl	8001ff0 <SPIwrite>
    SPIwrite(CTRL_REG1, 0x01); // Enable inertial interrupt
 8001594:	2101      	movs	r1, #1
 8001596:	2021      	movs	r0, #33	@ 0x21
 8001598:	f000 fd2a 	bl	8001ff0 <SPIwrite>

    //SM2 config
    SPIwrite(THRS_SM2_1, 0x35); // Threshold for SM2 (0.8G)
 800159c:	2135      	movs	r1, #53	@ 0x35
 800159e:	2077      	movs	r0, #119	@ 0x77
 80015a0:	f000 fd26 	bl	8001ff0 <SPIwrite>
    SPIwrite(MASK2_A, 0x08); // Mask SM2 interrupt (Z axis)
 80015a4:	2108      	movs	r1, #8
 80015a6:	207a      	movs	r0, #122	@ 0x7a
 80015a8:	f000 fd22 	bl	8001ff0 <SPIwrite>
    SPIwrite(MASK2_B, 0x08);
 80015ac:	2108      	movs	r1, #8
 80015ae:	2079      	movs	r0, #121	@ 0x79
 80015b0:	f000 fd1e 	bl	8001ff0 <SPIwrite>
    SPIwrite(SETT2, 0x23);
 80015b4:	2123      	movs	r1, #35	@ 0x23
 80015b6:	207b      	movs	r0, #123	@ 0x7b
 80015b8:	f000 fd1a 	bl	8001ff0 <SPIwrite>
    //ST2x config
    SPIwrite(0x60,0x07);// NOP next: < THRS1
 80015bc:	2107      	movs	r1, #7
 80015be:	2060      	movs	r0, #96	@ 0x60
 80015c0:	f000 fd16 	bl	8001ff0 <SPIwrite>
    SPIwrite(0x61,0x11);
 80015c4:	2111      	movs	r1, #17
 80015c6:	2061      	movs	r0, #97	@ 0x61
 80015c8:	f000 fd12 	bl	8001ff0 <SPIwrite>
    SPIwrite(CTRL_REG2, 0x01); // Enable inertial interrupt
 80015cc:	2101      	movs	r1, #1
 80015ce:	2022      	movs	r0, #34	@ 0x22
 80015d0:	f000 fd0e 	bl	8001ff0 <SPIwrite>

    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 80015d4:	20a4      	movs	r0, #164	@ 0xa4
 80015d6:	f000 fd53 	bl	8002080 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 80015da:	20a4      	movs	r0, #164	@ 0xa4
 80015dc:	f000 fd50 	bl	8002080 <SPIread>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <read_ACC_X>:
 * 
 * This function reads the X acceleration value from the accelerometer.
 * 
 * @return the X acceleration raw value
 */
int16_t read_ACC_X(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 80015ea:	20a4      	movs	r0, #164	@ 0xa4
 80015ec:	f000 fd48 	bl	8002080 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 80015f0:	20a4      	movs	r0, #164	@ 0xa4
 80015f2:	f000 fd45 	bl	8002080 <SPIread>

    //trame de lecture
    int16_t X;
    X = SPIread(OUT_X_H | SPI_READ);
 80015f6:	20a9      	movs	r0, #169	@ 0xa9
 80015f8:	f000 fd42 	bl	8002080 <SPIread>
 80015fc:	4603      	mov	r3, r0
 80015fe:	80fb      	strh	r3, [r7, #6]
    X = X << 8;
 8001600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	80fb      	strh	r3, [r7, #6]
    X |= SPIread(OUT_X_L | SPI_READ);
 8001608:	20a8      	movs	r0, #168	@ 0xa8
 800160a:	f000 fd39 	bl	8002080 <SPIread>
 800160e:	4603      	mov	r3, r0
 8001610:	b21a      	sxth	r2, r3
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4313      	orrs	r3, r2
 8001616:	80fb      	strh	r3, [r7, #6]
    return X;
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <read_ACC_Y>:
 * 
 * This function reads the Y acceleration value from the accelerometer.
 * 
 * @return the Y acceleration raw value
 */
int16_t read_ACC_Y(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 800162a:	20a4      	movs	r0, #164	@ 0xa4
 800162c:	f000 fd28 	bl	8002080 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001630:	20a4      	movs	r0, #164	@ 0xa4
 8001632:	f000 fd25 	bl	8002080 <SPIread>

    //trame de lecture
    int16_t Y;
    Y = SPIread(OUT_Y_H | SPI_READ);
 8001636:	20ab      	movs	r0, #171	@ 0xab
 8001638:	f000 fd22 	bl	8002080 <SPIread>
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
    Y = Y << 8;
 8001640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	80fb      	strh	r3, [r7, #6]
    Y |= SPIread(OUT_Y_L | SPI_READ);
 8001648:	20aa      	movs	r0, #170	@ 0xaa
 800164a:	f000 fd19 	bl	8002080 <SPIread>
 800164e:	4603      	mov	r3, r0
 8001650:	b21a      	sxth	r2, r3
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4313      	orrs	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
    return Y;
 8001658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <read_ACC_Z>:
 * 
 * This function reads the Z acceleration value from the accelerometer.
 * 
 * @return the Z acceleration raw value
 */
int16_t read_ACC_Z(void){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
    //setup
    SPIread(CTRL_REG5 | SPI_READ);
 800166a:	20a4      	movs	r0, #164	@ 0xa4
 800166c:	f000 fd08 	bl	8002080 <SPIread>
    SPIread(CTRL_REG5 | SPI_READ);
 8001670:	20a4      	movs	r0, #164	@ 0xa4
 8001672:	f000 fd05 	bl	8002080 <SPIread>

    //trame de lecture
    int16_t Z;
    Z = SPIread(OUT_Z_H | SPI_READ);
 8001676:	20ad      	movs	r0, #173	@ 0xad
 8001678:	f000 fd02 	bl	8002080 <SPIread>
 800167c:	4603      	mov	r3, r0
 800167e:	80fb      	strh	r3, [r7, #6]
    Z = Z << 8;
 8001680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	80fb      	strh	r3, [r7, #6]
    Z |= SPIread(OUT_Z_L | SPI_READ);
 8001688:	20ac      	movs	r0, #172	@ 0xac
 800168a:	f000 fcf9 	bl	8002080 <SPIread>
 800168e:	4603      	mov	r3, r0
 8001690:	b21a      	sxth	r2, r3
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4313      	orrs	r3, r2
 8001696:	80fb      	strh	r3, [r7, #6]
    return Z;
 8001698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	0000      	movs	r0, r0
	...

080016a8 <get_ACC_X>:
 * 
 * This function reads the acceleration value of the X axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_X(void){ // get the acceleration of the X axe in g
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    return read_ACC_X() / 16.384;
 80016ac:	f7ff ff9a 	bl	80015e4 <read_ACC_X>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff2e 	bl	8000514 <__aeabi_i2d>
 80016b8:	a307      	add	r3, pc, #28	@ (adr r3, 80016d8 <get_ACC_X+0x30>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7ff f8bd 	bl	800083c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016dc:	4030624d 	.word	0x4030624d

080016e0 <get_ACC_Y>:
 * 
 * This function reads the acceleration value of the Y axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_Y(void){ // get the acceleration of the Y axe in g
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    return read_ACC_Y() / 16.384;
 80016e4:	f7ff ff9e 	bl	8001624 <read_ACC_Y>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff12 	bl	8000514 <__aeabi_i2d>
 80016f0:	a307      	add	r3, pc, #28	@ (adr r3, 8001710 <get_ACC_Y+0x30>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff f8a1 	bl	800083c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001702:	eeb0 0a47 	vmov.f32	s0, s14
 8001706:	eef0 0a67 	vmov.f32	s1, s15
 800170a:	bd80      	pop	{r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	4030624d 	.word	0x4030624d

08001718 <get_ACC_Z>:
 * 
 * This function reads the acceleration value of the Z axe converted in g.
 * 
 * @return the acceleration value in g
 */
double get_ACC_Z(void){ // get the acceleration of the Z axe in g
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
    return read_ACC_Z() / 16.384;
 800171c:	f7ff ffa2 	bl	8001664 <read_ACC_Z>
 8001720:	4603      	mov	r3, r0
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fef6 	bl	8000514 <__aeabi_i2d>
 8001728:	a307      	add	r3, pc, #28	@ (adr r3, 8001748 <get_ACC_Z+0x30>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7ff f885 	bl	800083c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	ec43 2b17 	vmov	d7, r2, r3
}
 800173a:	eeb0 0a47 	vmov.f32	s0, s14
 800173e:	eef0 0a67 	vmov.f32	s1, s15
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f3af 8000 	nop.w
 8001748:	d2f1a9fc 	.word	0xd2f1a9fc
 800174c:	4030624d 	.word	0x4030624d

08001750 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	HAL_USART_Transmit(&husart2, (uint8_t *)ptr, len, 10);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	b29a      	uxth	r2, r3
 8001760:	230a      	movs	r3, #10
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <_write+0x24>)
 8001766:	f002 fa8a 	bl	8003c7e <HAL_USART_Transmit>
	return len;
 800176a:	687b      	ldr	r3, [r7, #4]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200002e0 	.word	0x200002e0

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b0ac      	sub	sp, #176	@ 0xb0
 800177c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177e:	f000 ffbb 	bl	80026f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001782:	f000 f8b1 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001786:	f000 f945 	bl	8001a14 <MX_GPIO_Init>
  MX_USART2_Init();
 800178a:	f000 f917 	bl	80019bc <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  UART_Init();
 800178e:	f7ff fc3f 	bl	8001010 <UART_Init>
  CAN_config();
 8001792:	f7ff fda5 	bl	80012e0 <CAN_config>
  CAN_config_filter(0, 0, 0x0, 0x10520312, 0x10035110);
 8001796:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <main+0x134>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4b45      	ldr	r3, [pc, #276]	@ (80018b0 <main+0x138>)
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fd1b 	bl	80011dc <CAN_config_filter>
  init_SPI();
 80017a6:	f000 fbb7 	bl	8001f18 <init_SPI>
  init_ACC();
 80017aa:	f7ff fec7 	bl	800153c <init_ACC>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80017ba:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fefa 	bl	80045b8 <osMutexCreate>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <main+0x13c>)
 80017c8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of linCanQueue */
  osMessageQDef(linCanQueue, 16, uint16_t);
 80017ca:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <main+0x140>)
 80017cc:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80017d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linCanQueueHandle = osMessageCreate(osMessageQ(linCanQueue), NULL);
 80017d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 ff03 	bl	80045e8 <osMessageCreate>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <main+0x144>)
 80017e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of linSenderTask */
  osThreadDef(linSenderTask, StartLinSenderTask, osPriorityNormal, 0, 128);
 80017e8:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <main+0x148>)
 80017ea:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80017ee:	461d      	mov	r5, r3
 80017f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  linSenderTaskHandle = osThreadCreate(osThread(linSenderTask), NULL);
 80017fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fdeb 	bl	80043de <osThreadCreate>
 8001808:	4603      	mov	r3, r0
 800180a:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <main+0x14c>)
 800180c:	6013      	str	r3, [r2, #0]

  /* definition and creation of canReceiverTask */
  osThreadDef(canReceiverTask, StartCanReceiverTask, osPriorityIdle, 0, 128);
 800180e:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <main+0x150>)
 8001810:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001814:	461d      	mov	r5, r3
 8001816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800181e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001822:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fdd8 	bl	80043de <osThreadCreate>
 800182e:	4603      	mov	r3, r0
 8001830:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <main+0x154>)
 8001832:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <main+0x158>)
 8001836:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800183a:	461d      	mov	r5, r3
 800183c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001848:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fdc5 	bl	80043de <osThreadCreate>
 8001854:	4603      	mov	r3, r0
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <main+0x15c>)
 8001858:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTrackerTask */
  osThreadDef(canTrackerTask, StartCanTrackerTask, osPriorityIdle, 0, 128);
 800185a:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <main+0x160>)
 800185c:	f107 0420 	add.w	r4, r7, #32
 8001860:	461d      	mov	r5, r3
 8001862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001866:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTrackerTaskHandle = osThreadCreate(osThread(canTrackerTask), NULL);
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fdb2 	bl	80043de <osThreadCreate>
 800187a:	4603      	mov	r3, r0
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <main+0x164>)
 800187e:	6013      	str	r3, [r2, #0]

  /* definition and creation of acceleroTask */
  osThreadDef(acceleroTask, StartAcceleroTask, osPriorityIdle, 0, 128);
 8001880:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <main+0x168>)
 8001882:	1d3c      	adds	r4, r7, #4
 8001884:	461d      	mov	r5, r3
 8001886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800188e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  acceleroTaskHandle = osThreadCreate(osThread(acceleroTask), NULL);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fda1 	bl	80043de <osThreadCreate>
 800189c:	4603      	mov	r3, r0
 800189e:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <main+0x16c>)
 80018a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80018a2:	f002 fd95 	bl	80043d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <main+0x12e>
 80018aa:	bf00      	nop
 80018ac:	10035110 	.word	0x10035110
 80018b0:	10520312 	.word	0x10520312
 80018b4:	2000033c 	.word	0x2000033c
 80018b8:	08007d0c 	.word	0x08007d0c
 80018bc:	20000338 	.word	0x20000338
 80018c0:	08007d2c 	.word	0x08007d2c
 80018c4:	20000324 	.word	0x20000324
 80018c8:	08007d58 	.word	0x08007d58
 80018cc:	20000328 	.word	0x20000328
 80018d0:	08007d80 	.word	0x08007d80
 80018d4:	2000032c 	.word	0x2000032c
 80018d8:	08007dac 	.word	0x08007dac
 80018dc:	20000330 	.word	0x20000330
 80018e0:	08007dd8 	.word	0x08007dd8
 80018e4:	20000334 	.word	0x20000334

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	@ 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2230      	movs	r2, #48	@ 0x30
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 fbd5 	bl	80070a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	4a27      	ldr	r2, [pc, #156]	@ (80019b4 <SystemClock_Config+0xcc>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	@ 0x40
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <SystemClock_Config+0xd0>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001948:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	2302      	movs	r3, #2
 8001950:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001952:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001958:	2308      	movs	r3, #8
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800195c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001960:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001962:	2302      	movs	r3, #2
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001966:	2307      	movs	r3, #7
 8001968:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4618      	mov	r0, r3
 8001970:	f001 f9d8 	bl	8002d24 <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800197a:	f000 fac7 	bl	8001f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	230f      	movs	r3, #15
 8001980:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2302      	movs	r3, #2
 8001984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800198a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800198e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2105      	movs	r1, #5
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fc39 	bl	8003214 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019a8:	f000 fab0 	bl	8001f0c <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019c2:	4a13      	ldr	r2, [pc, #76]	@ (8001a10 <MX_USART2_Init+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 19200;
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019c8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80019cc:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80019d4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <MX_USART2_Init+0x50>)
 80019fa:	f002 f8ff 	bl	8003bfc <HAL_USART_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001a04:	f000 fa82 	bl	8001f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200002e0 	.word	0x200002e0
 8001a10:	40004400 	.word	0x40004400

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a18      	ldr	r2, [pc, #96]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <MX_GPIO_Init+0x9c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	4808      	ldr	r0, [pc, #32]	@ (8001ab4 <MX_GPIO_Init+0xa0>)
 8001a94:	f000 ff78 	bl	8002988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2105      	movs	r1, #5
 8001a9c:	2006      	movs	r0, #6
 8001a9e:	f000 ff49 	bl	8002934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aa2:	2006      	movs	r0, #6
 8001aa4:	f000 ff62 	bl	800296c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <StartLinSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLinSenderTask */
void StartLinSenderTask(void const * argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	int8_t lin_received_cnt = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
	uint8_t can_send_lin = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77bb      	strb	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8001ac8:	463b      	mov	r3, r7
 8001aca:	f04f 32ff 	mov.w	r2, #4294967295
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fd25 	bl	8004520 <osSignalWait>
	  lin_received_cnt++;
 8001ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	77fb      	strb	r3, [r7, #31]
	  can_send_lin = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77bb      	strb	r3, [r7, #30]
	  int data = (unsigned int) CAN_RxMessage.data[0];
 8001ae6:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <StartLinSenderTask+0x110>)
 8001ae8:	799b      	ldrb	r3, [r3, #6]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	61bb      	str	r3, [r7, #24]

	  Tx_Msg.ID = LIN_SLAVE_WRITE_RTC_PID;
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001af0:	2245      	movs	r2, #69	@ 0x45
 8001af2:	701a      	strb	r2, [r3, #0]
	  Tx_Msg.length = LIN_SLAVE_WRITE_RTC_LENGTH;
 8001af4:	4b35      	ldr	r3, [pc, #212]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001af6:	2206      	movs	r2, #6
 8001af8:	705a      	strb	r2, [r3, #1]

	  switch (CAN_RxMessage.STDID) {
 8001afa:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <StartLinSenderTask+0x110>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a34      	ldr	r2, [pc, #208]	@ (8001bd0 <StartLinSenderTask+0x118>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d027      	beq.n	8001b54 <StartLinSenderTask+0x9c>
 8001b04:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <StartLinSenderTask+0x11c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d149      	bne.n	8001b9e <StartLinSenderTask+0xe6>
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b38      	cmp	r3, #56	@ 0x38
 8001b0e:	d016      	beq.n	8001b3e <StartLinSenderTask+0x86>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b38      	cmp	r3, #56	@ 0x38
 8001b14:	dc1a      	bgt.n	8001b4c <StartLinSenderTask+0x94>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b1a:	d009      	beq.n	8001b30 <StartLinSenderTask+0x78>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b34      	cmp	r3, #52	@ 0x34
 8001b20:	d114      	bne.n	8001b4c <StartLinSenderTask+0x94>

		case COMMODO_CLIGNOTANT_RETURN_BASE:
				switch (data) {
					case COMMODO_CLIGNOTANT_REPOS_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_STOP;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b24:	2203      	movs	r2, #3
 8001b26:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO STOP \n\r");
 8001b28:	482b      	ldr	r0, [pc, #172]	@ (8001bd8 <StartLinSenderTask+0x120>)
 8001b2a:	f005 fa67 	bl	8006ffc <iprintf>
						break;
 8001b2e:	e010      	b.n	8001b52 <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_DROIT_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_DROIT;
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b32:	2202      	movs	r2, #2
 8001b34:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO DROIT \n\r");
 8001b36:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <StartLinSenderTask+0x124>)
 8001b38:	f005 fa60 	bl	8006ffc <iprintf>
						break;
 8001b3c:	e009      	b.n	8001b52 <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_GAUCHE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_GAUCHE;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO GAUCHE \n\r");
 8001b44:	4826      	ldr	r0, [pc, #152]	@ (8001be0 <StartLinSenderTask+0x128>)
 8001b46:	f005 fa59 	bl	8006ffc <iprintf>
						break;
 8001b4a:	e002      	b.n	8001b52 <StartLinSenderTask+0x9a>
					default:
						can_send_lin = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77bb      	strb	r3, [r7, #30]
						break;
 8001b50:	bf00      	nop
				}
			break;
 8001b52:	e027      	b.n	8001ba4 <StartLinSenderTask+0xec>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2bb3      	cmp	r3, #179	@ 0xb3
 8001b58:	d016      	beq.n	8001b88 <StartLinSenderTask+0xd0>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2bb3      	cmp	r3, #179	@ 0xb3
 8001b5e:	dc1a      	bgt.n	8001b96 <StartLinSenderTask+0xde>
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d009      	beq.n	8001b7a <StartLinSenderTask+0xc2>
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b6a:	d114      	bne.n	8001b96 <StartLinSenderTask+0xde>

		case COMMODO_PHARE_RETURN_BASE:
				switch (data) {
					case COMMODO_PHARE_ALLUMER_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_AVANT;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b6e:	2204      	movs	r2, #4
 8001b70:	701a      	strb	r2, [r3, #0]
						printf("PHARES AVANT \n\r");
 8001b72:	481c      	ldr	r0, [pc, #112]	@ (8001be4 <StartLinSenderTask+0x12c>)
 8001b74:	f005 fa42 	bl	8006ffc <iprintf>
						break;
 8001b78:	e010      	b.n	8001b9c <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_VEILLEUSE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_ARRIERE;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	701a      	strb	r2, [r3, #0]
						printf("PHARES ARRIERES \n\r");
 8001b80:	4819      	ldr	r0, [pc, #100]	@ (8001be8 <StartLinSenderTask+0x130>)
 8001b82:	f005 fa3b 	bl	8006ffc <iprintf>
						break;
 8001b86:	e009      	b.n	8001b9c <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_AUTO_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_STOP;
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001b8a:	2206      	movs	r2, #6
 8001b8c:	701a      	strb	r2, [r3, #0]
						printf("PHARES STOP \n\r");
 8001b8e:	4817      	ldr	r0, [pc, #92]	@ (8001bec <StartLinSenderTask+0x134>)
 8001b90:	f005 fa34 	bl	8006ffc <iprintf>
						break;
 8001b94:	e002      	b.n	8001b9c <StartLinSenderTask+0xe4>
					default:
						can_send_lin = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	77bb      	strb	r3, [r7, #30]
						break;
 8001b9a:	bf00      	nop
				}
			break;
 8001b9c:	e002      	b.n	8001ba4 <StartLinSenderTask+0xec>
		default:
			can_send_lin = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	77bb      	strb	r3, [r7, #30]
			break;
 8001ba2:	bf00      	nop
	}

//	  Rx_Msg.ID = LIN_SLAVE_READ_RTC_PID;
//	  Rx_Msg.length = LIN_SLAVE_READ_RTC_LENGTH;
	  if(can_send_lin){
 8001ba4:	7fbb      	ldrb	r3, [r7, #30]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <StartLinSenderTask+0x106>

		  SendRequest(&Tx_Msg);
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <StartLinSenderTask+0x114>)
 8001bac:	f7ff fadc 	bl	8001168 <SendRequest>
		  HAL_Delay(500);
 8001bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bb4:	f000 fde2 	bl	800277c <HAL_Delay>
		  printf("\n\r=================================\n\r");
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <StartLinSenderTask+0x138>)
 8001bba:	f005 fa1f 	bl	8006ffc <iprintf>
	  }


	  osDelay(1000);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc2:	f002 fc58 	bl	8004476 <osDelay>
  {
 8001bc6:	e77f      	b.n	8001ac8 <StartLinSenderTask+0x10>
 8001bc8:	2000034c 	.word	0x2000034c
 8001bcc:	20000340 	.word	0x20000340
 8001bd0:	10005101 	.word	0x10005101
 8001bd4:	10005110 	.word	0x10005110
 8001bd8:	08007df4 	.word	0x08007df4
 8001bdc:	08007e04 	.word	0x08007e04
 8001be0:	08007e14 	.word	0x08007e14
 8001be4:	08007e28 	.word	0x08007e28
 8001be8:	08007e38 	.word	0x08007e38
 8001bec:	08007e4c 	.word	0x08007e4c
 8001bf0:	08007e5c 	.word	0x08007e5c

08001bf4 <StartCanReceiverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanReceiverTask */
void StartCanReceiverTask(void const * argument)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanReceiverTask */
	int8_t can_received_cnt = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	osEvent canReadedTracker;
	int8_t executed_once = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	CAN_frame auto_frame;
	  auto_frame.STDID = 0x10530310;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <StartCanReceiverTask+0x5c>)
 8001c0a:	60bb      	str	r3, [r7, #8]
	  auto_frame.DLC = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	737b      	strb	r3, [r7, #13]
	  auto_frame.RTR = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	733b      	strb	r3, [r7, #12]
  for(;;)
  {


	  	  // REAL CODE
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <StartCanReceiverTask+0x60>)
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fd49 	bl	80046b8 <osMessageGet>
	  if(canReadedTracker.value.v == 0x1){
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d1f3      	bne.n	8001c14 <StartCanReceiverTask+0x20>
		can_received_cnt++;
 8001c2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		osSignalSet(linSenderTaskHandle, 1);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <StartCanReceiverTask+0x64>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fc2d 	bl	80044a0 <osSignalSet>
		osDelay(1000);
 8001c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c4a:	f002 fc14 	bl	8004476 <osDelay>
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 8001c4e:	e7e1      	b.n	8001c14 <StartCanReceiverTask+0x20>
 8001c50:	10530310 	.word	0x10530310
 8001c54:	20000338 	.word	0x20000338
 8001c58:	20000324 	.word	0x20000324

08001c5c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask04 */
	int cnt = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    osSignalWait(1, osWaitForever);
 8001c68:	463b      	mov	r3, r7
 8001c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fc55 	bl	8004520 <osSignalWait>
    cnt++;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
//    printf("Donnée Can recue %d \n \r", cnt);
//    HAL_Delay(500);

	osDelay(1000);
 8001c7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c80:	f002 fbf9 	bl	8004476 <osDelay>
    osSignalWait(1, osWaitForever);
 8001c84:	bf00      	nop
 8001c86:	e7ef      	b.n	8001c68 <StartTask04+0xc>

08001c88 <StartCanTrackerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTrackerTask */
void StartCanTrackerTask(void const * argument)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartCanTrackerTask */
	  int8_t cnt = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	printf("Waiting for CAN \n \r");
 8001c94:	4817      	ldr	r0, [pc, #92]	@ (8001cf4 <StartCanTrackerTask+0x6c>)
 8001c96:	f005 f9b1 	bl	8006ffc <iprintf>
	osSignalWait(1, osWaitForever);
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fc3c 	bl	8004520 <osSignalWait>
	cnt++;
 8001ca8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	77fb      	strb	r3, [r7, #31]
	CAN_readFrame();
 8001cb4:	f7ff fb98 	bl	80013e8 <CAN_readFrame>
	printf("Readed CAN n° %d \n \r", cnt);
 8001cb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <StartCanTrackerTask+0x70>)
 8001cc0:	f005 f99c 	bl	8006ffc <iprintf>
	HAL_Delay(100);
 8001cc4:	2064      	movs	r0, #100	@ 0x64
 8001cc6:	f000 fd59 	bl	800277c <HAL_Delay>
//	HAL_Delay(100);

//	printf("CAN Readed \n \r");
//	HAL_Delay(100);
	//	HAL_Delay(100);
	if(CAN_RxMessage.STDID == COMMODO_PHARE_RETURN_ID){
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <StartCanTrackerTask+0x74>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <StartCanTrackerTask+0x78>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d109      	bne.n	8001ce8 <StartCanTrackerTask+0x60>
		if(CAN_RxMessage.data[0] == COMMODO_PHARE_RETURN_VALUE){
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <StartCanTrackerTask+0x74>)
 8001cd6:	799b      	ldrb	r3, [r3, #6]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b34      	cmp	r3, #52	@ 0x34
 8001cdc:	d102      	bne.n	8001ce4 <StartCanTrackerTask+0x5c>
			uint8_t toto = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	777b      	strb	r3, [r7, #29]
 8001ce2:	e001      	b.n	8001ce8 <StartCanTrackerTask+0x60>
		}else{
			uint8_t toto = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77bb      	strb	r3, [r7, #30]
		}
	}

	osDelay(1000);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cec:	f002 fbc3 	bl	8004476 <osDelay>
	printf("Waiting for CAN \n \r");
 8001cf0:	e7d0      	b.n	8001c94 <StartCanTrackerTask+0xc>
 8001cf2:	bf00      	nop
 8001cf4:	08007e84 	.word	0x08007e84
 8001cf8:	08007e98 	.word	0x08007e98
 8001cfc:	2000034c 	.word	0x2000034c
 8001d00:	801a8884 	.word	0x801a8884
 8001d04:	00000000 	.word	0x00000000

08001d08 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	@ 0x38
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartAcceleroTask */
	double x = 0;
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double y = 0;
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double z = 0;
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t state_updated = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
	char converted[2];
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8001d38:	463b      	mov	r3, r7
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f002 fbed 	bl	8004520 <osSignalWait>

	  x = get_ACC_X();
 8001d46:	f7ff fcaf 	bl	80016a8 <get_ACC_X>
 8001d4a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	  y = get_ACC_Y();
 8001d4e:	f7ff fcc7 	bl	80016e0 <get_ACC_Y>
 8001d52:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	  z = get_ACC_Z();
 8001d56:	f7ff fcdf 	bl	8001718 <get_ACC_Z>
 8001d5a:	ed87 0b08 	vstr	d0, [r7, #32]

	  serial_puts("(");
 8001d5e:	4856      	ldr	r0, [pc, #344]	@ (8001eb8 <StartAcceleroTask+0x1b0>)
 8001d60:	f000 fbe6 	bl	8002530 <serial_puts>
	  float2string(x, converted);
 8001d64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d68:	f7fe ff00 	bl	8000b6c <__aeabi_d2f>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4618      	mov	r0, r3
 8001d74:	ee00 2a10 	vmov	s0, r2
 8001d78:	f000 fc00 	bl	800257c <float2string>
	  serial_puts(converted);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fbd5 	bl	8002530 <serial_puts>
	  serial_puts(", ");
 8001d86:	484d      	ldr	r0, [pc, #308]	@ (8001ebc <StartAcceleroTask+0x1b4>)
 8001d88:	f000 fbd2 	bl	8002530 <serial_puts>

	  float2string(y, converted);
 8001d8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d90:	f7fe feec 	bl	8000b6c <__aeabi_d2f>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	ee00 2a10 	vmov	s0, r2
 8001da0:	f000 fbec 	bl	800257c <float2string>
	  serial_puts(converted);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fbc1 	bl	8002530 <serial_puts>
	  serial_puts(", ");
 8001dae:	4843      	ldr	r0, [pc, #268]	@ (8001ebc <StartAcceleroTask+0x1b4>)
 8001db0:	f000 fbbe 	bl	8002530 <serial_puts>

	  float2string(z, converted);
 8001db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db8:	f7fe fed8 	bl	8000b6c <__aeabi_d2f>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	ee00 2a10 	vmov	s0, r2
 8001dc8:	f000 fbd8 	bl	800257c <float2string>
	  serial_puts(converted);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fbad 	bl	8002530 <serial_puts>
	  serial_puts(")");
 8001dd6:	483a      	ldr	r0, [pc, #232]	@ (8001ec0 <StartAcceleroTask+0x1b8>)
 8001dd8:	f000 fbaa 	bl	8002530 <serial_puts>
	  newLine();
 8001ddc:	f000 fbc4 	bl	8002568 <newLine>

	  Tx_Msg.length = 0;
 8001de0:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]

	  if(x < SEUIL_ARRIERE){
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <StartAcceleroTask+0x1c0>)
 8001dec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001df0:	f7fe fe6c 	bl	8000acc <__aeabi_dcmplt>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <StartAcceleroTask+0x108>
		  serial_puts("ARRIERE");
 8001dfa:	4834      	ldr	r0, [pc, #208]	@ (8001ecc <StartAcceleroTask+0x1c4>)
 8001dfc:	f000 fb98 	bl	8002530 <serial_puts>
		  newLine();
 8001e00:	f000 fbb2 	bl	8002568 <newLine>
		  Tx_Msg.ID = LIN_PHARE_ARRIERE;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001e06:	2205      	movs	r2, #5
 8001e08:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	77fb      	strb	r3, [r7, #31]
 8001e0e:	e048      	b.n	8001ea2 <StartAcceleroTask+0x19a>
	  }
	  else if(x > SEUIL_AVANT){
 8001e10:	a327      	add	r3, pc, #156	@ (adr r3, 8001eb0 <StartAcceleroTask+0x1a8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e1a:	f7fe fe75 	bl	8000b08 <__aeabi_dcmpgt>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00a      	beq.n	8001e3a <StartAcceleroTask+0x132>
		  serial_puts("AVANT");
 8001e24:	482a      	ldr	r0, [pc, #168]	@ (8001ed0 <StartAcceleroTask+0x1c8>)
 8001e26:	f000 fb83 	bl	8002530 <serial_puts>
		  newLine();
 8001e2a:	f000 fb9d 	bl	8002568 <newLine>
		  Tx_Msg.ID = LIN_PHARE_AVANT;
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001e30:	2204      	movs	r2, #4
 8001e32:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]
 8001e38:	e033      	b.n	8001ea2 <StartAcceleroTask+0x19a>
	  }
	  else if(y < SEUIL_DROIT){
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <StartAcceleroTask+0x1cc>)
 8001e40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e44:	f7fe fe42 	bl	8000acc <__aeabi_dcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <StartAcceleroTask+0x15c>
		  serial_puts("DROIT");
 8001e4e:	4822      	ldr	r0, [pc, #136]	@ (8001ed8 <StartAcceleroTask+0x1d0>)
 8001e50:	f000 fb6e 	bl	8002530 <serial_puts>
		  newLine();
 8001e54:	f000 fb88 	bl	8002568 <newLine>
		  Tx_Msg.ID = LIN_CLIGNO_DROIT;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	77fb      	strb	r3, [r7, #31]
 8001e62:	e01e      	b.n	8001ea2 <StartAcceleroTask+0x19a>
	  }
	  else if(y > SEUIL_GAUCHE){
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <StartAcceleroTask+0x1d4>)
 8001e6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e6e:	f7fe fe4b 	bl	8000b08 <__aeabi_dcmpgt>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <StartAcceleroTask+0x186>
		  serial_puts("GAUCHE");
 8001e78:	4819      	ldr	r0, [pc, #100]	@ (8001ee0 <StartAcceleroTask+0x1d8>)
 8001e7a:	f000 fb59 	bl	8002530 <serial_puts>
		  newLine();
 8001e7e:	f000 fb73 	bl	8002568 <newLine>
		  Tx_Msg.ID = LIN_CLIGNO_GAUCHE;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
		  state_updated = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	77fb      	strb	r3, [r7, #31]
 8001e8c:	e009      	b.n	8001ea2 <StartAcceleroTask+0x19a>
	  }


//	  if(!state_updated){
	  else{
		  Tx_Msg.ID = LIN_RESET;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	701a      	strb	r2, [r3, #0]
		  state_updated = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]
		  serial_puts("RESET");
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <StartAcceleroTask+0x1dc>)
 8001e9a:	f000 fb49 	bl	8002530 <serial_puts>
		  newLine();
 8001e9e:	f000 fb63 	bl	8002568 <newLine>
	  }

	  SendRequest(&Tx_Msg);
 8001ea2:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <StartAcceleroTask+0x1bc>)
 8001ea4:	f7ff f960 	bl	8001168 <SendRequest>
	  HAL_Delay(100);
 8001ea8:	2064      	movs	r0, #100	@ 0x64
 8001eaa:	f000 fc67 	bl	800277c <HAL_Delay>
	  osSignalWait(1, osWaitForever);
 8001eae:	e743      	b.n	8001d38 <StartAcceleroTask+0x30>
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	4072c000 	.word	0x4072c000
 8001eb8:	08007eb0 	.word	0x08007eb0
 8001ebc:	08007eb4 	.word	0x08007eb4
 8001ec0:	08007eb8 	.word	0x08007eb8
 8001ec4:	20000340 	.word	0x20000340
 8001ec8:	c072c000 	.word	0xc072c000
 8001ecc:	08007ebc 	.word	0x08007ebc
 8001ed0:	08007ec4 	.word	0x08007ec4
 8001ed4:	c0690000 	.word	0xc0690000
 8001ed8:	08007ecc 	.word	0x08007ecc
 8001edc:	40690000 	.word	0x40690000
 8001ee0:	08007ed4 	.word	0x08007ed4
 8001ee4:	08007edc 	.word	0x08007edc

08001ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001efa:	f000 fc1f 	bl	800273c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40001000 	.word	0x40001000

08001f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <Error_Handler+0x8>

08001f18 <init_SPI>:
 */


#include "spi.h"

void init_SPI(void){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe0 <init_SPI+0xc8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe0 <init_SPI+0xc8>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <init_SPI+0xc8>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f4a:	23e0      	movs	r3, #224	@ 0xe0
 8001f4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f52:	2302      	movs	r3, #2
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	481f      	ldr	r0, [pc, #124]	@ (8001fe4 <init_SPI+0xcc>)
 8001f66:	f000 fd0f 	bl	8002988 <HAL_GPIO_Init>

    /**LIS3DSH ChipSelect Configuration
    PE3     ------> LIS3DSH_SS
    */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <init_SPI+0xc8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <init_SPI+0xc8>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <init_SPI+0xc8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2108      	movs	r1, #8
 8001f8a:	4817      	ldr	r0, [pc, #92]	@ (8001fe8 <init_SPI+0xd0>)
 8001f8c:	f000 fe98 	bl	8002cc0 <HAL_GPIO_WritePin>
    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f90:	2308      	movs	r3, #8
 8001f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4810      	ldr	r0, [pc, #64]	@ (8001fe8 <init_SPI+0xd0>)
 8001fa8:	f000 fcee 	bl	8002988 <HAL_GPIO_Init>

    /**
     * SPI1 configuration
     */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <init_SPI+0xc8>)
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <init_SPI+0xc8>)
 8001fb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <init_SPI+0xc8>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
    // SPI1 clock = APB2, prescaler set to 16 -> 84000000/16 = 5Mhz
    SPI1->CR1 = 0b000001101011100; //0x007E
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <init_SPI+0xd4>)
 8001fca:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8001fce:	601a      	str	r2, [r3, #0]
    SPI1->CR2 = 0b0000000000000000; //0x0000
 8001fd0:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <init_SPI+0xd4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
   // SPI1->I2SCFGR = 0; // SPI enable I2S disable
   // SPI1->I2SPR = 0b0000000000000000;
}
 8001fd6:	bf00      	nop
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40013000 	.word	0x40013000

08001ff0 <SPIwrite>:

// Write a data @ address with SPI1
void SPIwrite(uint8_t address, uint8_t data)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71bb      	strb	r3, [r7, #6]
	CS_LOW; //CS --> Low
 8002000:	2200      	movs	r2, #0
 8002002:	2108      	movs	r1, #8
 8002004:	481c      	ldr	r0, [pc, #112]	@ (8002078 <SPIwrite+0x88>)
 8002006:	f000 fe5b 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 fbb6 	bl	800277c <HAL_Delay>
    SPI1->DR = address;
 8002010:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <SPIwrite+0x8c>)
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fbb0 	bl	800277c <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 800201c:	bf00      	nop
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <SPIwrite+0x8c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f9      	beq.n	800201e <SPIwrite+0x2e>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 800202a:	bf00      	nop
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <SPIwrite+0x8c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f9      	bne.n	800202c <SPIwrite+0x3c>
    SPI1->DR = data;
 8002038:	4a10      	ldr	r2, [pc, #64]	@ (800207c <SPIwrite+0x8c>)
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	60d3      	str	r3, [r2, #12]
    HAL_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fb9c 	bl	800277c <HAL_Delay>
    while(!(SPI1->SR & 0x2)); // Wait Flag TXE = 1
 8002044:	bf00      	nop
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <SPIwrite+0x8c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f9      	beq.n	8002046 <SPIwrite+0x56>
	while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 8002052:	bf00      	nop
 8002054:	4b09      	ldr	r3, [pc, #36]	@ (800207c <SPIwrite+0x8c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <SPIwrite+0x64>
    HAL_Delay(1);
 8002060:	2001      	movs	r0, #1
 8002062:	f000 fb8b 	bl	800277c <HAL_Delay>
    CS_HIGH; //CS --> High
 8002066:	2201      	movs	r2, #1
 8002068:	2108      	movs	r1, #8
 800206a:	4803      	ldr	r0, [pc, #12]	@ (8002078 <SPIwrite+0x88>)
 800206c:	f000 fe28 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40013000 	.word	0x40013000

08002080 <SPIread>:
    return tempdat;
}

// Write a tempdat @ address with SPI1
uint8_t SPIread(uint8_t address)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	 uint8_t tempdat;
	 CS_LOW; //CS --> Low
 800208a:	2200      	movs	r2, #0
 800208c:	2108      	movs	r1, #8
 800208e:	481a      	ldr	r0, [pc, #104]	@ (80020f8 <SPIread+0x78>)
 8002090:	f000 fe16 	bl	8002cc0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	 SPI1->DR = address;
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <SPIread+0x7c>)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	60d3      	str	r3, [r2, #12]
	 while(!(SPI1->SR & 0x2)); // wait Flag TXE = 1
 800209a:	bf00      	nop
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <SPIread+0x7c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f9      	beq.n	800209c <SPIread+0x1c>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 80020a8:	bf00      	nop
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <SPIread+0x7c>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <SPIread+0x2a>
	 //HAL_Delay(100);
	tempdat = SPI1->DR & 0xFF; // Read dummy
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <SPIread+0x7c>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	73fb      	strb	r3, [r7, #15]
	 SPI1->DR = DUMMY_BYTE;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <SPIread+0x7c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
	 while(!(SPI1->SR & 0x1)); // Wait Flag RXE = 1
 80020c2:	bf00      	nop
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <SPIread+0x7c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f9      	beq.n	80020c4 <SPIread+0x44>
	 while((SPI1->SR & 0x80)); // wait Flag BSY = 0
 80020d0:	bf00      	nop
 80020d2:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <SPIread+0x7c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f9      	bne.n	80020d2 <SPIread+0x52>
	// HAL_Delay(100);
	 tempdat = SPI1->DR & 0xFF;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <SPIread+0x7c>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	73fb      	strb	r3, [r7, #15]
	// HAL_Delay(100);
	 CS_HIGH; //CS --> High
 80020e4:	2201      	movs	r2, #1
 80020e6:	2108      	movs	r1, #8
 80020e8:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <SPIread+0x78>)
 80020ea:	f000 fde9 	bl	8002cc0 <HAL_GPIO_WritePin>
	 return tempdat;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40013000 	.word	0x40013000

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_MspInit+0x54>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <HAL_MspInit+0x54>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <HAL_MspInit+0x54>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_MspInit+0x54>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_MspInit+0x54>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_MspInit+0x54>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	210f      	movs	r1, #15
 8002142:	f06f 0001 	mvn.w	r0, #1
 8002146:	f000 fbf5 	bl	8002934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_USART_MspInit+0x84>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12b      	bne.n	80021d2 <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4a17      	ldr	r2, [pc, #92]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002188:	6413      	str	r3, [r2, #64]	@ 0x40
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <HAL_USART_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80021b2:	231c      	movs	r3, #28
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c2:	2307      	movs	r3, #7
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <HAL_USART_MspInit+0x8c>)
 80021ce:	f000 fbdb 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	@ 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_InitTick+0xe4>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	4a32      	ldr	r2, [pc, #200]	@ (80022cc <HAL_InitTick+0xe4>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6413      	str	r3, [r2, #64]	@ 0x40
 8002208:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <HAL_InitTick+0xe4>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002214:	f107 0210 	add.w	r2, r7, #16
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fa18 	bl	8003654 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800222e:	f001 f9e9 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8002232:	6378      	str	r0, [r7, #52]	@ 0x34
 8002234:	e004      	b.n	8002240 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002236:	f001 f9e5 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 800223a:	4603      	mov	r3, r0
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002242:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <HAL_InitTick+0xe8>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	0c9b      	lsrs	r3, r3, #18
 800224a:	3b01      	subs	r3, #1
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_InitTick+0xec>)
 8002250:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_InitTick+0xf0>)
 8002252:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_InitTick+0xec>)
 8002256:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800225a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <HAL_InitTick+0xec>)
 800225e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002260:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002262:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <HAL_InitTick+0xec>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_InitTick+0xec>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_InitTick+0xec>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002274:	4817      	ldr	r0, [pc, #92]	@ (80022d4 <HAL_InitTick+0xec>)
 8002276:	f001 fa1f 	bl	80036b8 <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002280:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11b      	bne.n	80022c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002288:	4812      	ldr	r0, [pc, #72]	@ (80022d4 <HAL_InitTick+0xec>)
 800228a:	f001 fa6f 	bl	800376c <HAL_TIM_Base_Start_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002294:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800229c:	2036      	movs	r0, #54	@ 0x36
 800229e:	f000 fb65 	bl	800296c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d808      	bhi.n	80022ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	2036      	movs	r0, #54	@ 0x36
 80022ae:	f000 fb41 	bl	8002934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <HAL_InitTick+0xf4>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e002      	b.n	80022c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3738      	adds	r7, #56	@ 0x38
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	20000400 	.word	0x20000400
 80022d8:	40001000 	.word	0x40001000
 80022dc:	20000004 	.word	0x20000004

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <NMI_Handler+0x4>

080022e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <MemManage_Handler+0x4>

080022f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <UsageFault_Handler+0x4>

08002308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800231c:	2001      	movs	r0, #1
 800231e:	f000 fce9 	bl	8002cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  osSignalSet(myTask04Handle, 1);
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <EXTI0_IRQHandler+0x28>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f002 f8b9 	bl	80044a0 <osSignalSet>
  osMessagePut(linCanQueueHandle, 1, 100);
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <EXTI0_IRQHandler+0x2c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2264      	movs	r2, #100	@ 0x64
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f002 f97e 	bl	8004638 <osMessagePut>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000032c 	.word	0x2000032c
 8002344:	20000338 	.word	0x20000338

08002348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <TIM6_DAC_IRQHandler+0x10>)
 800234e:	f001 fa7d 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000400 	.word	0x20000400

0800235c <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void CAN1_RX0_IRQHandler( void )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
//	osSignalSet(canTrackerTaskHandle, 1);

	CAN_readFrame();
 8002360:	f7ff f842 	bl	80013e8 <CAN_readFrame>
	osMessagePut(linCanQueueHandle, 1, 100);
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <CAN1_RX0_IRQHandler+0x1c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2264      	movs	r2, #100	@ 0x64
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f002 f963 	bl	8004638 <osMessagePut>
//	serial_puts("Teacher::  received CAN | Added To Queue \n \r");
//  osSignalSet(myTask04Handle, 1);

//	osSignalSet(canReceiverTaskHandle, 1); // phare_state
//	printf("Released CanReceiver \n\r\r");
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000338 	.word	0x20000338

0800237c <HAL_GPIO_EXTI_Callback>:

// Accéléromètre
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0){
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d111      	bne.n	80023b0 <HAL_GPIO_EXTI_Callback+0x34>
		//exit
    	osSignalSet(acceleroTaskHandle, 1);
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_GPIO_EXTI_Callback+0x3c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f002 f884 	bl	80044a0 <osSignalSet>
		SPIread(CTRL_REG5 | SPI_READ);
 8002398:	20a4      	movs	r0, #164	@ 0xa4
 800239a:	f7ff fe71 	bl	8002080 <SPIread>
		SPIread(CTRL_REG5 | SPI_READ);
 800239e:	20a4      	movs	r0, #164	@ 0xa4
 80023a0:	f7ff fe6e 	bl	8002080 <SPIread>

		SPIread(OUTS1 | SPI_READ);
 80023a4:	20df      	movs	r0, #223	@ 0xdf
 80023a6:	f7ff fe6b 	bl	8002080 <SPIread>
		SPIread(OUTS2 | SPI_READ);
 80023aa:	20ff      	movs	r0, #255	@ 0xff
 80023ac:	f7ff fe68 	bl	8002080 <SPIread>
    }
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000334 	.word	0x20000334

080023bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
  }

  return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800241e:	605a      	str	r2, [r3, #4]
  return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_isatty>:

int _isatty(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f004 fe58 	bl	8007144 <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	220c      	movs	r2, #12
 8002498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	@ (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20020000 	.word	0x20020000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	20000448 	.word	0x20000448
 80024c8:	200042f0 	.word	0x200042f0

080024cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <SystemInit+0x20>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <SystemInit+0x20>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 80024fa:	4a0c      	ldr	r2, [pc, #48]	@ (800252c <serial_putc+0x3c>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8002500:	bf00      	nop
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <serial_putc+0x3c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f9      	beq.n	8002502 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 800250e:	bf00      	nop
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <serial_putc+0x3c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f9      	beq.n	8002510 <serial_putc+0x20>
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40004400 	.word	0x40004400

08002530 <serial_puts>:

void serial_puts( char *msg)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 800253c:	e009      	b.n	8002552 <serial_puts+0x22>
		serial_putc(msg[cnt]);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ffd2 	bl	80024f0 <serial_putc>
		cnt++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <serial_puts+0xe>
	}
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <newLine>:

void newLine()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 800256c:	200a      	movs	r0, #10
 800256e:	f7ff ffbf 	bl	80024f0 <serial_putc>
	serial_putc(13); // retour chariot
 8002572:	200d      	movs	r0, #13
 8002574:	f7ff ffbc 	bl	80024f0 <serial_putc>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <float2string>:
     s[cnt]='\0';     								// met un terme � la cha�ne de caract�res
     return s;
}

char * float2string(float nombre,char *chaine)
{
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	ed87 0a01 	vstr	s0, [r7, #4]
 8002586:	6038      	str	r0, [r7, #0]
	double nbf=nombre;
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fd ffd5 	bl	8000538 <__aeabi_f2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int inc=0,i=0,end=0;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
	int nb;

	if(nbf<0)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ae:	f7fe fa8d 	bl	8000acc <__aeabi_dcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <float2string+0x54>
	{
		chaine[0]='-';
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	222d      	movs	r2, #45	@ 0x2d
 80025bc:	701a      	strb	r2, [r3, #0]
		nbf=-nbf;
 80025be:	69bc      	ldr	r4, [r7, #24]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025c6:	e9c7 4506 	strd	r4, r5, [r7, #24]
		++i;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	3301      	adds	r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
	}

	while(nbf>=1)
 80025d0:	e00d      	b.n	80025ee <float2string+0x72>
	{
		nbf/=10;
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <float2string+0x11c>)
 80025d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025dc:	f7fe f92e 	bl	800083c <__aeabi_ddiv>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		++inc;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3301      	adds	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
	while(nbf>=1)
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <float2string+0x120>)
 80025f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025f8:	f7fe fa7c 	bl	8000af4 <__aeabi_dcmpge>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e7      	bne.n	80025d2 <float2string+0x56>
	}

	while(!end)
 8002602:	e03c      	b.n	800267e <float2string+0x102>
	{
		nbf*=10;
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <float2string+0x11c>)
 800260a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800260e:	f7fd ffeb 	bl	80005e8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	e9c7 2306 	strd	r2, r3, [r7, #24]
		nb=(int)nbf;
 800261a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800261e:	f7fe fa7d 	bl	8000b1c <__aeabi_d2iz>
 8002622:	4603      	mov	r3, r0
 8002624:	60bb      	str	r3, [r7, #8]

		if(inc == -2) end=1; // convertie jusqu'� 2 chiffres apr�s la virgule
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f113 0f02 	cmn.w	r3, #2
 800262c:	d101      	bne.n	8002632 <float2string+0xb6>
 800262e:	2301      	movs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]

		nb%=10;
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <float2string+0x124>)
 8002636:	fb83 1302 	smull	r1, r3, r3, r2
 800263a:	1099      	asrs	r1, r3, #2
 800263c:	17d3      	asrs	r3, r2, #31
 800263e:	1ac9      	subs	r1, r1, r3
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	60bb      	str	r3, [r7, #8]

		if(inc==0)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <float2string+0xe6>
		{
			chaine[i]='.';
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4413      	add	r3, r2
 8002658:	222e      	movs	r2, #46	@ 0x2e
 800265a:	701a      	strb	r2, [r3, #0]
			++i;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	3301      	adds	r3, #1
 8002660:	613b      	str	r3, [r7, #16]
		}
		chaine[i]=nb+'0';
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	440b      	add	r3, r1
 800266c:	3230      	adds	r2, #48	@ 0x30
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
		inc--;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3b01      	subs	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
		i++;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3301      	adds	r3, #1
 800267c:	613b      	str	r3, [r7, #16]
	while(!end)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0bf      	beq.n	8002604 <float2string+0x88>
	}

	chaine[i]='\0';
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
	return(chaine);
 800268e:	683b      	ldr	r3, [r7, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bdb0      	pop	{r4, r5, r7, pc}
 8002698:	40240000 	.word	0x40240000
 800269c:	3ff00000 	.word	0x3ff00000
 80026a0:	66666667 	.word	0x66666667

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026a8:	f7ff ff10 	bl	80024cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026ac:	480c      	ldr	r0, [pc, #48]	@ (80026e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ae:	490d      	ldr	r1, [pc, #52]	@ (80026e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b4:	e002      	b.n	80026bc <LoopCopyDataInit>

080026b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ba:	3304      	adds	r3, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c0:	d3f9      	bcc.n	80026b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c4:	4c0a      	ldr	r4, [pc, #40]	@ (80026f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c8:	e001      	b.n	80026ce <LoopFillZerobss>

080026ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026cc:	3204      	adds	r2, #4

080026ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d0:	d3fb      	bcc.n	80026ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026d2:	f004 fd3d 	bl	8007150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff f84f 	bl	8001778 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80026e8:	08007f48 	.word	0x08007f48
  ldr r2, =_sbss
 80026ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80026f0:	200042f0 	.word	0x200042f0

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>
	...

080026f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <HAL_Init+0x40>)
 8002702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <HAL_Init+0x40>)
 800270e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002714:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_Init+0x40>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <HAL_Init+0x40>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f8fc 	bl	800291e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002726:	200f      	movs	r0, #15
 8002728:	f7ff fd5e 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272c:	f7ff fce8 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_IncTick+0x20>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <HAL_IncTick+0x24>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000008 	.word	0x20000008
 8002760:	2000044c 	.word	0x2000044c

08002764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return uwTick;
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <HAL_GetTick+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	2000044c 	.word	0x2000044c

0800277c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff ffee 	bl	8002764 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d005      	beq.n	80027a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002796:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <HAL_Delay+0x44>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a2:	bf00      	nop
 80027a4:	f7ff ffde 	bl	8002764 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d8f7      	bhi.n	80027a4 <HAL_Delay+0x28>
  {
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000008 	.word	0x20000008

080027c4 <__NVIC_SetPriorityGrouping>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	@ (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	@ (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	@ (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff4c 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002946:	f7ff ff61 	bl	800280c <__NVIC_GetPriorityGrouping>
 800294a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	6978      	ldr	r0, [r7, #20]
 8002952:	f7ff ffb1 	bl	80028b8 <NVIC_EncodePriority>
 8002956:	4602      	mov	r2, r0
 8002958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff80 	bl	8002864 <__NVIC_SetPriority>
}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff54 	bl	8002828 <__NVIC_EnableIRQ>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e16b      	b.n	8002c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 815a 	bne.w	8002c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d005      	beq.n	80029da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d130      	bne.n	8002a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d123      	bne.n	8002acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80b4 	beq.w	8002c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b60      	ldr	r3, [pc, #384]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_GPIO_Init+0x310>)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	3302      	adds	r3, #2
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_GPIO_Init+0x314>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x226>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a51      	ldr	r2, [pc, #324]	@ (8002ca0 <HAL_GPIO_Init+0x318>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x222>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a50      	ldr	r2, [pc, #320]	@ (8002ca4 <HAL_GPIO_Init+0x31c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x21e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca8 <HAL_GPIO_Init+0x320>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x21a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4e      	ldr	r2, [pc, #312]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x216>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_GPIO_Init+0x328>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x212>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb4 <HAL_GPIO_Init+0x32c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb8 <HAL_GPIO_Init+0x330>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x20a>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e00e      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b96:	2306      	movs	r3, #6
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	@ (8002c98 <HAL_GPIO_Init+0x310>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b30      	ldr	r3, [pc, #192]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a27      	ldr	r2, [pc, #156]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c22:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae90 	bls.w	80029a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cdc:	e003      	b.n	8002ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	619a      	str	r2, [r3, #24]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb32 	bl	800237c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e267      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d075      	beq.n	8002e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	4b88      	ldr	r3, [pc, #544]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b85      	ldr	r3, [pc, #532]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d112      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b82      	ldr	r3, [pc, #520]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b7e      	ldr	r3, [pc, #504]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d05b      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d157      	bne.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e242      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x74>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x98>
 8002da2:	4b70      	ldr	r3, [pc, #448]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b6d      	ldr	r3, [pc, #436]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a65      	ldr	r2, [pc, #404]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fcc2 	bl	8002764 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff fcbe 	bl	8002764 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e207      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7ff fcae 	bl	8002764 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7ff fcaa 	bl	8002764 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1f3      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b51      	ldr	r3, [pc, #324]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b44      	ldr	r3, [pc, #272]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1c7      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4937      	ldr	r1, [pc, #220]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b34      	ldr	r3, [pc, #208]	@ (8002f68 <HAL_RCC_OscConfig+0x244>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fc63 	bl	8002764 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7ff fc5f 	bl	8002764 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1a8      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b28      	ldr	r3, [pc, #160]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4925      	ldr	r1, [pc, #148]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_RCC_OscConfig+0x244>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7ff fc42 	bl	8002764 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7ff fc3e 	bl	8002764 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e187      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d036      	beq.n	8002f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_RCC_OscConfig+0x248>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7ff fc22 	bl	8002764 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7ff fc1e 	bl	8002764 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e167      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_OscConfig+0x240>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x200>
 8002f42:	e01b      	b.n	8002f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_RCC_OscConfig+0x248>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff fc0b 	bl	8002764 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00e      	b.n	8002f70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7ff fc07 	bl	8002764 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d907      	bls.n	8002f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e150      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	42470000 	.word	0x42470000
 8002f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	4b88      	ldr	r3, [pc, #544]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ea      	bne.n	8002f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8097 	beq.w	80030b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8e:	4b81      	ldr	r3, [pc, #516]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002faa:	4b7a      	ldr	r3, [pc, #488]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b77      	ldr	r3, [pc, #476]	@ (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b74      	ldr	r3, [pc, #464]	@ (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a73      	ldr	r2, [pc, #460]	@ (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff fbc7 	bl	8002764 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7ff fbc3 	bl	8002764 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e10c      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <HAL_RCC_OscConfig+0x474>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x2ea>
 8003000:	4b64      	ldr	r3, [pc, #400]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a63      	ldr	r2, [pc, #396]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x324>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x30c>
 8003016:	4b5f      	ldr	r3, [pc, #380]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	4a5e      	ldr	r2, [pc, #376]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6713      	str	r3, [r2, #112]	@ 0x70
 8003022:	4b5c      	ldr	r3, [pc, #368]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a5b      	ldr	r2, [pc, #364]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	@ 0x70
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x324>
 8003030:	4b58      	ldr	r3, [pc, #352]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
 800303c:	4b55      	ldr	r3, [pc, #340]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a54      	ldr	r2, [pc, #336]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d015      	beq.n	800307c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff fb88 	bl	8002764 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7ff fb84 	bl	8002764 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0cb      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b49      	ldr	r3, [pc, #292]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ee      	beq.n	8003058 <HAL_RCC_OscConfig+0x334>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7ff fb72 	bl	8002764 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7ff fb6e 	bl	8002764 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0b5      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309a:	4b3e      	ldr	r3, [pc, #248]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ee      	bne.n	8003084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80a1 	beq.w	8003204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d05c      	beq.n	8003188 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d141      	bne.n	800315a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b31      	ldr	r3, [pc, #196]	@ (800319c <HAL_RCC_OscConfig+0x478>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff fb42 	bl	8002764 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7ff fb3e 	bl	8002764 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e087      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	4b27      	ldr	r3, [pc, #156]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	019b      	lsls	r3, r3, #6
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	491b      	ldr	r1, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x478>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7ff fb17 	bl	8002764 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313a:	f7ff fb13 	bl	8002764 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e05c      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x416>
 8003158:	e054      	b.n	8003204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_RCC_OscConfig+0x478>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff fb00 	bl	8002764 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7ff fafc 	bl	8002764 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e045      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_OscConfig+0x470>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x444>
 8003186:	e03d      	b.n	8003204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e038      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
 8003194:	40023800 	.word	0x40023800
 8003198:	40007000 	.word	0x40007000
 800319c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <HAL_RCC_OscConfig+0x4ec>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d028      	beq.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d121      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d11a      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d8:	4293      	cmp	r3, r2
 80031da:	d111      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	3b01      	subs	r3, #1
 80031ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0cc      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b68      	ldr	r3, [pc, #416]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d90c      	bls.n	8003250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b65      	ldr	r3, [pc, #404]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b63      	ldr	r3, [pc, #396]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0b8      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003268:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a58      	ldr	r2, [pc, #352]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003280:	4b53      	ldr	r3, [pc, #332]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4a52      	ldr	r2, [pc, #328]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800328a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	494d      	ldr	r1, [pc, #308]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d044      	beq.n	8003334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d119      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e067      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b37      	ldr	r3, [pc, #220]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4934      	ldr	r1, [pc, #208]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003304:	f7ff fa2e 	bl	8002764 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7ff fa2a 	bl	8002764 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e04f      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b25      	ldr	r3, [pc, #148]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d20c      	bcs.n	800335c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b22      	ldr	r3, [pc, #136]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4916      	ldr	r1, [pc, #88]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	490e      	ldr	r1, [pc, #56]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339a:	f000 f821 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490a      	ldr	r1, [pc, #40]	@ (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a09      	ldr	r2, [pc, #36]	@ (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ff14 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00
 80033d0:	40023800 	.word	0x40023800
 80033d4:	08007eec 	.word	0x08007eec
 80033d8:	20000000 	.word	0x20000000
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b094      	sub	sp, #80	@ 0x50
 80033e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ec:	2300      	movs	r3, #0
 80033ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f0:	2300      	movs	r3, #0
 80033f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f8:	4b79      	ldr	r3, [pc, #484]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d00d      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x40>
 8003404:	2b08      	cmp	r3, #8
 8003406:	f200 80e1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x34>
 800340e:	2b04      	cmp	r3, #4
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x3a>
 8003412:	e0db      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b73      	ldr	r3, [pc, #460]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003416:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003418:	e0db      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341a:	4b73      	ldr	r3, [pc, #460]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800341c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800341e:	e0d8      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003420:	4b6f      	ldr	r3, [pc, #444]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003428:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800342a:	4b6d      	ldr	r3, [pc, #436]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b6a      	ldr	r3, [pc, #424]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003440:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003448:	633b      	str	r3, [r7, #48]	@ 0x30
 800344a:	2300      	movs	r3, #0
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
 800344e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003452:	4622      	mov	r2, r4
 8003454:	462b      	mov	r3, r5
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4621      	mov	r1, r4
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	6139      	str	r1, [r7, #16]
 8003470:	4629      	mov	r1, r5
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003484:	4659      	mov	r1, fp
 8003486:	018b      	lsls	r3, r1, #6
 8003488:	4651      	mov	r1, sl
 800348a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348e:	4651      	mov	r1, sl
 8003490:	018a      	lsls	r2, r1, #6
 8003492:	4651      	mov	r1, sl
 8003494:	ebb2 0801 	subs.w	r8, r2, r1
 8003498:	4659      	mov	r1, fp
 800349a:	eb63 0901 	sbc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	462b      	mov	r3, r5
 80034c0:	eb49 0303 	adc.w	r3, r9, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034d2:	4629      	mov	r1, r5
 80034d4:	024b      	lsls	r3, r1, #9
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034dc:	4621      	mov	r1, r4
 80034de:	024a      	lsls	r2, r1, #9
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034f0:	f7fd fb8c 	bl	8000c0c <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034fc:	e058      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	4618      	mov	r0, r3
 8003508:	4611      	mov	r1, r2
 800350a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
 8003514:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	0159      	lsls	r1, r3, #5
 8003526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352a:	0150      	lsls	r0, r2, #5
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4641      	mov	r1, r8
 8003532:	ebb2 0a01 	subs.w	sl, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb63 0b01 	sbc.w	fp, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003548:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800354c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003550:	ebb2 040a 	subs.w	r4, r2, sl
 8003554:	eb63 050b 	sbc.w	r5, r3, fp
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	00eb      	lsls	r3, r5, #3
 8003562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4643      	mov	r3, r8
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	464b      	mov	r3, r9
 8003574:	eb45 0303 	adc.w	r3, r5, r3
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800359a:	2200      	movs	r2, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	61fa      	str	r2, [r7, #28]
 80035a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a4:	f7fd fb32 	bl	8000c0c <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3750      	adds	r7, #80	@ 0x50
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08007efc 	.word	0x08007efc

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08007efc 	.word	0x08007efc

08003654 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	220f      	movs	r2, #15
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003670:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800367c:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <HAL_RCC_GetClockConfig+0x60>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0207 	and.w	r2, r3, #7
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	601a      	str	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f839 	bl	8003756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 f9c0 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04e      	b.n	8003822 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a23      	ldr	r2, [pc, #140]	@ (8003830 <HAL_TIM_Base_Start_IT+0xc4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ae:	d01d      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_TIM_Base_Start_IT+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_TIM_Base_Start_IT+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d111      	bne.n	8003810 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d010      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	e007      	b.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40010400 	.word	0x40010400
 8003844:	40014000 	.word	0x40014000
 8003848:	40001800 	.word	0x40001800

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8d2 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8c4 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8d5 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d020      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8ac 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f89e 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8af 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f886 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f878 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f889 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f860 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f852 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f863 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fa98 	bl	8001ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f906 	bl	8003be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f834 	bl	8003a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8d8 	bl	8003bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a43      	ldr	r2, [pc, #268]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a35      	ldr	r2, [pc, #212]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d027      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d023      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <TIM_Base_SetConfig+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc0 <TIM_Base_SetConfig+0x144>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc4 <TIM_Base_SetConfig+0x148>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <TIM_Base_SetConfig+0x14c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <TIM_Base_SetConfig+0x150>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <TIM_Base_SetConfig+0x154>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0xf8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	611a      	str	r2, [r3, #16]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	40001800 	.word	0x40001800
 8003bcc:	40001c00 	.word	0x40001c00
 8003bd0:	40002000 	.word	0x40002000

08003bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e033      	b.n	8003c76 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fa98 	bl	8002158 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f90b 	bl	8003e4c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	@ 0x28
 8003c82:	af02      	add	r7, sp, #8
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d17c      	bne.n	8003d94 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_USART_Transmit+0x28>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e075      	b.n	8003d96 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_USART_Transmit+0x3a>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e06e      	b.n	8003d96 <HAL_USART_Transmit+0x118>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2212      	movs	r2, #18
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cce:	f7fe fd49 	bl	8002764 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce8:	d108      	bne.n	8003cfc <HAL_USART_Transmit+0x7e>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e003      	b.n	8003d04 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	@ 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f844 	bl	8003d9e <USART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e03a      	b.n	8003d96 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	@ 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f814 	bl	8003d9e <USART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e00a      	b.n	8003d96 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003dae:	e038      	b.n	8003e22 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d034      	beq.n	8003e22 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <USART_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	f7fe fcd1 	bl	8002764 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d229      	bcs.n	8003e22 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ddc:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0220 	bic.w	r2, r2, #32
 8003dec:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dfc:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d0b7      	beq.n	8003db0 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b0c6      	sub	sp, #280	@ 0x118
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f021 030c 	bic.w	r3, r1, #12
 8003e70:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e86:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e94:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003e96:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003eb2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003ed6:	f023 030c 	bic.w	r3, r3, #12
 8003eda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003efe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6959      	ldr	r1, [r3, #20]
 8003f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8003f20:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b8b      	ldr	r3, [pc, #556]	@ (8004158 <USART_SetConfig+0x30c>)
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d006      	beq.n	8003f3c <USART_SetConfig+0xf0>
 8003f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b89      	ldr	r3, [pc, #548]	@ (800415c <USART_SetConfig+0x310>)
 8003f36:	429a      	cmp	r2, r3
 8003f38:	f040 8114 	bne.w	8004164 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f3c:	f7ff fb76 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8003f40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f4e:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8003f52:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	1891      	adds	r1, r2, r2
 8003f5c:	6739      	str	r1, [r7, #112]	@ 0x70
 8003f5e:	415b      	adcs	r3, r3
 8003f60:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f66:	4621      	mov	r1, r4
 8003f68:	eb12 0801 	adds.w	r8, r2, r1
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb43 0901 	adc.w	r9, r3, r1
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	eb18 0303 	adds.w	r3, r8, r3
 8003f90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f94:	462b      	mov	r3, r5
 8003f96:	eb49 0303 	adc.w	r3, r9, r3
 8003f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003faa:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003fae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	18db      	adds	r3, r3, r3
 8003fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fb8:	4613      	mov	r3, r2
 8003fba:	eb42 0303 	adc.w	r3, r2, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003fc4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8003fc8:	f7fc fe20 	bl	8000c0c <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b63      	ldr	r3, [pc, #396]	@ (8004160 <USART_SetConfig+0x314>)
 8003fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	011c      	lsls	r4, r3, #4
 8003fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fe4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fe8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	1891      	adds	r1, r2, r2
 8003ff2:	6639      	str	r1, [r7, #96]	@ 0x60
 8003ff4:	415b      	adcs	r3, r3
 8003ff6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ff8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	1851      	adds	r1, r2, r1
 8004000:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004002:	4649      	mov	r1, r9
 8004004:	414b      	adcs	r3, r1
 8004006:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004014:	4659      	mov	r1, fp
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4651      	mov	r1, sl
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4642      	mov	r2, r8
 800402a:	189b      	adds	r3, r3, r2
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004030:	464b      	mov	r3, r9
 8004032:	460a      	mov	r2, r1
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800403c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004048:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800404c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004050:	460b      	mov	r3, r1
 8004052:	18db      	adds	r3, r3, r3
 8004054:	653b      	str	r3, [r7, #80]	@ 0x50
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	657b      	str	r3, [r7, #84]	@ 0x54
 800405e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004062:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004066:	f7fc fdd1 	bl	8000c0c <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4611      	mov	r1, r2
 8004070:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <USART_SetConfig+0x314>)
 8004072:	fba3 2301 	umull	r2, r3, r3, r1
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2264      	movs	r2, #100	@ 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	1acb      	subs	r3, r1, r3
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004086:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <USART_SetConfig+0x314>)
 8004088:	fba3 2302 	umull	r2, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004094:	441c      	add	r4, r3
 8004096:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040b0:	415b      	adcs	r3, r3
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040b8:	4641      	mov	r1, r8
 80040ba:	1851      	adds	r1, r2, r1
 80040bc:	6439      	str	r1, [r7, #64]	@ 0x40
 80040be:	4649      	mov	r1, r9
 80040c0:	414b      	adcs	r3, r1
 80040c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 80040d0:	4659      	mov	r1, fp
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4651      	mov	r1, sl
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4642      	mov	r2, r8
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040ec:	464b      	mov	r3, r9
 80040ee:	460a      	mov	r2, r1
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004104:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800410c:	460b      	mov	r3, r1
 800410e:	18db      	adds	r3, r3, r3
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004112:	4613      	mov	r3, r2
 8004114:	eb42 0303 	adc.w	r3, r2, r3
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800411e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004122:	f7fc fd73 	bl	8000c0c <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <USART_SetConfig+0x314>)
 800412c:	fba3 1302 	umull	r1, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	2164      	movs	r1, #100	@ 0x64
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	3332      	adds	r3, #50	@ 0x32
 800413e:	4a08      	ldr	r2, [pc, #32]	@ (8004160 <USART_SetConfig+0x314>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	f003 0207 	and.w	r2, r3, #7
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4422      	add	r2, r4
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e109      	b.n	800436a <USART_SetConfig+0x51e>
 8004156:	bf00      	nop
 8004158:	40011000 	.word	0x40011000
 800415c:	40011400 	.word	0x40011400
 8004160:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7ff fa4e 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004168:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800416c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004170:	2200      	movs	r2, #0
 8004172:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004176:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800417a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800417e:	4642      	mov	r2, r8
 8004180:	464b      	mov	r3, r9
 8004182:	1891      	adds	r1, r2, r2
 8004184:	6339      	str	r1, [r7, #48]	@ 0x30
 8004186:	415b      	adcs	r3, r3
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
 800418a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800418e:	4641      	mov	r1, r8
 8004190:	1854      	adds	r4, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb43 0501 	adc.w	r5, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	00eb      	lsls	r3, r5, #3
 80041a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a6:	00e2      	lsls	r2, r4, #3
 80041a8:	4614      	mov	r4, r2
 80041aa:	461d      	mov	r5, r3
 80041ac:	4643      	mov	r3, r8
 80041ae:	18e3      	adds	r3, r4, r3
 80041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041b4:	464b      	mov	r3, r9
 80041b6:	eb45 0303 	adc.w	r3, r5, r3
 80041ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041ca:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041d2:	460b      	mov	r3, r1
 80041d4:	18db      	adds	r3, r3, r3
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d8:	4613      	mov	r3, r2
 80041da:	eb42 0303 	adc.w	r3, r2, r3
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041e4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041e8:	f7fc fd10 	bl	8000c0c <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <USART_SetConfig+0x52c>)
 80041f2:	fba3 2302 	umull	r2, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	011c      	lsls	r4, r3, #4
 80041fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004204:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004208:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	6239      	str	r1, [r7, #32]
 8004214:	415b      	adcs	r3, r3
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800421c:	4641      	mov	r1, r8
 800421e:	eb12 0a01 	adds.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb43 0b01 	adc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004234:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800423c:	4692      	mov	sl, r2
 800423e:	469b      	mov	fp, r3
 8004240:	4643      	mov	r3, r8
 8004242:	eb1a 0303 	adds.w	r3, sl, r3
 8004246:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800424a:	464b      	mov	r3, r9
 800424c:	eb4b 0303 	adc.w	r3, fp, r3
 8004250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004260:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004264:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004268:	460b      	mov	r3, r1
 800426a:	18db      	adds	r3, r3, r3
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	4613      	mov	r3, r2
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800427e:	f7fc fcc5 	bl	8000c0c <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4611      	mov	r1, r2
 8004288:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <USART_SetConfig+0x52c>)
 800428a:	fba3 2301 	umull	r2, r3, r3, r1
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2264      	movs	r2, #100	@ 0x64
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	1acb      	subs	r3, r1, r3
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800429e:	4b36      	ldr	r3, [pc, #216]	@ (8004378 <USART_SetConfig+0x52c>)
 80042a0:	fba3 2302 	umull	r2, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042ac:	441c      	add	r4, r3
 80042ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	415b      	adcs	r3, r3
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042d0:	4641      	mov	r1, r8
 80042d2:	1851      	adds	r1, r2, r1
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	4649      	mov	r1, r9
 80042d8:	414b      	adcs	r3, r1
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042e8:	4659      	mov	r1, fp
 80042ea:	00cb      	lsls	r3, r1, #3
 80042ec:	4651      	mov	r1, sl
 80042ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f2:	4651      	mov	r1, sl
 80042f4:	00ca      	lsls	r2, r1, #3
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	4642      	mov	r2, r8
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004304:	464b      	mov	r3, r9
 8004306:	460a      	mov	r2, r1
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800431a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800431c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004320:	460b      	mov	r3, r1
 8004322:	18db      	adds	r3, r3, r3
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	eb42 0303 	adc.w	r3, r2, r3
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004336:	f7fc fc69 	bl	8000c0c <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <USART_SetConfig+0x52c>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	2164      	movs	r1, #100	@ 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	3332      	adds	r3, #50	@ 0x32
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <USART_SetConfig+0x52c>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	f003 0207 	and.w	r2, r3, #7
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4422      	add	r2, r4
 8004366:	609a      	str	r2, [r3, #8]
  }
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	51eb851f 	.word	0x51eb851f

0800437c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800438a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800438e:	2b84      	cmp	r3, #132	@ 0x84
 8004390:	d005      	beq.n	800439e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004392:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	3303      	adds	r3, #3
 800439c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b2:	f3ef 8305 	mrs	r3, IPSR
 80043b6:	607b      	str	r3, [r7, #4]
  return(result);
 80043b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043d4:	f001 fa08 	bl	80057e8 <vTaskStartScheduler>
  
  return osOK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}

080043de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e0:	b089      	sub	sp, #36	@ 0x24
 80043e2:	af04      	add	r7, sp, #16
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <osThreadCreate+0x54>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01c      	beq.n	8004432 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685c      	ldr	r4, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691e      	ldr	r6, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ffb6 	bl	800437c <makeFreeRtosPriority>
 8004410:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800441a:	9202      	str	r2, [sp, #8]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	9100      	str	r1, [sp, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4632      	mov	r2, r6
 8004424:	4629      	mov	r1, r5
 8004426:	4620      	mov	r0, r4
 8004428:	f001 f810 	bl	800544c <xTaskCreateStatic>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e01c      	b.n	800446c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685c      	ldr	r4, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff ff98 	bl	800437c <makeFreeRtosPriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	9200      	str	r2, [sp, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4632      	mov	r2, r6
 800445a:	4629      	mov	r1, r5
 800445c:	4620      	mov	r0, r4
 800445e:	f001 f855 	bl	800550c <xTaskCreate>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800446c:	68fb      	ldr	r3, [r7, #12]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004476 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <osDelay+0x16>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	e000      	b.n	800448e <osDelay+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f001 f974 	bl	800577c <vTaskDelay>
  
  return osOK;
 8004494:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80044b2:	f7ff ff7b 	bl	80043ac <inHandlerMode>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	2201      	movs	r2, #1
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 ff4d 	bl	800636c <xTaskGenericNotifyFromISR>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <osSignalSet+0x3e>
      return 0x80000000;
 80044d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80044dc:	e019      	b.n	8004512 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <osSignalSet+0x70>
 80044e4:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <osSignalSet+0x7c>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	e00c      	b.n	8004510 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	f107 0308 	add.w	r3, r7, #8
 80044fc:	2201      	movs	r2, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f001 fe7c 	bl	80061fc <xTaskGenericNotify>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d002      	beq.n	8004510 <osSignalSet+0x70>
    return 0x80000000;
 800450a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800450e:	e000      	b.n	8004512 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8004510:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d103      	bne.n	8004544 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e009      	b.n	8004558 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d006      	beq.n	8004558 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <osSignalWait+0x38>
      ticks = 1;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8004558:	f7ff ff28 	bl	80043ac <inHandlerMode>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8004562:	2382      	movs	r3, #130	@ 0x82
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	e01b      	b.n	80045a0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	f107 0310 	add.w	r3, r7, #16
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2000      	movs	r0, #0
 8004574:	f001 fde8 	bl	8006148 <xTaskNotifyWait>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d008      	beq.n	8004590 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <osSignalWait+0x6a>
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e00a      	b.n	80045a0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800458a:	2340      	movs	r3, #64	@ 0x40
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	e007      	b.n	80045a0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	da02      	bge.n	800459c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8004596:	2386      	movs	r3, #134	@ 0x86
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e001      	b.n	80045a0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800459c:	2308      	movs	r3, #8
 800459e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	461c      	mov	r4, r3
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	3724      	adds	r7, #36	@ 0x24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}

080045b8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	2001      	movs	r0, #1
 80045d0:	f000 fb0d 	bl	8004bee <xQueueCreateMutexStatic>
 80045d4:	4603      	mov	r3, r0
 80045d6:	e003      	b.n	80045e0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80045d8:	2001      	movs	r0, #1
 80045da:	f000 faf0 	bl	8004bbe <xQueueCreateMutex>
 80045de:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <osMessageCreate+0x36>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2400      	movs	r4, #0
 8004614:	9400      	str	r4, [sp, #0]
 8004616:	f000 f9e1 	bl	80049dc <xQueueGenericCreateStatic>
 800461a:	4603      	mov	r3, r0
 800461c:	e008      	b.n	8004630 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	4619      	mov	r1, r3
 800462a:	f000 fa54 	bl	8004ad6 <xQueueGenericCreate>
 800462e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}

08004638 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <osMessagePut+0x1e>
    ticks = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004656:	f7ff fea9 	bl	80043ac <inHandlerMode>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d018      	beq.n	8004692 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004660:	f107 0210 	add.w	r2, r7, #16
 8004664:	f107 0108 	add.w	r1, r7, #8
 8004668:	2300      	movs	r3, #0
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fbdc 	bl	8004e28 <xQueueGenericSendFromISR>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <osMessagePut+0x42>
      return osErrorOS;
 8004676:	23ff      	movs	r3, #255	@ 0xff
 8004678:	e018      	b.n	80046ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <osMessagePut+0x72>
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <osMessagePut+0x7c>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	e00b      	b.n	80046aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004692:	f107 0108 	add.w	r1, r7, #8
 8004696:	2300      	movs	r3, #0
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fac2 	bl	8004c24 <xQueueGenericSend>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <osMessagePut+0x72>
      return osErrorOS;
 80046a6:	23ff      	movs	r3, #255	@ 0xff
 80046a8:	e000      	b.n	80046ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b08b      	sub	sp, #44	@ 0x2c
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80046d2:	2380      	movs	r3, #128	@ 0x80
 80046d4:	617b      	str	r3, [r7, #20]
    return event;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	461c      	mov	r4, r3
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046e6:	e054      	b.n	8004792 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d103      	bne.n	8004700 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fe:	e009      	b.n	8004714 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <osMessageGet+0x5c>
      ticks = 1;
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004714:	f7ff fe4a 	bl	80043ac <inHandlerMode>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01c      	beq.n	8004758 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800471e:	f107 0220 	add.w	r2, r7, #32
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f000 fcfc 	bl	8005128 <xQueueReceiveFromISR>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004736:	2310      	movs	r3, #16
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e001      	b.n	8004740 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01d      	beq.n	8004782 <osMessageGet+0xca>
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <osMessageGet+0xe4>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	e014      	b.n	8004782 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004758:	f107 0314 	add.w	r3, r7, #20
 800475c:	3304      	adds	r3, #4
 800475e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004760:	4619      	mov	r1, r3
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f000 fbfe 	bl	8004f64 <xQueueReceive>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800476e:	2310      	movs	r3, #16
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e006      	b.n	8004782 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <osMessageGet+0xc6>
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <osMessageGet+0xc8>
 800477e:	2340      	movs	r3, #64	@ 0x40
 8004780:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	461c      	mov	r4, r3
 8004786:	f107 0314 	add.w	r3, r7, #20
 800478a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800478e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	372c      	adds	r7, #44	@ 0x2c
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	bf00      	nop
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f103 0208 	add.w	r2, r3, #8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0208 	add.w	r2, r3, #8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f103 0208 	add.w	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d103      	bne.n	8004862 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e00c      	b.n	800487c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3308      	adds	r3, #8
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e002      	b.n	8004870 <vListInsert+0x2e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d2f6      	bcs.n	800486a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6852      	ldr	r2, [r2, #4]
 80048d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d103      	bne.n	80048e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004934:	f001 ff90 	bl	8006858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004964:	3b01      	subs	r3, #1
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	441a      	add	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	22ff      	movs	r2, #255	@ 0xff
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	22ff      	movs	r2, #255	@ 0xff
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d114      	bne.n	80049b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01a      	beq.n	80049c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3310      	adds	r3, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f970 	bl	8005c7c <xTaskRemoveFromEventList>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <xQueueGenericReset+0xd0>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	e009      	b.n	80049c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fef1 	bl	80047a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3324      	adds	r3, #36	@ 0x24
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff feec 	bl	80047a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049c8:	f001 ff78 	bl	80068bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049cc:	2301      	movs	r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	@ 0x38
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	e7fd      	b.n	8004a04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	e7fd      	b.n	8004a22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <xQueueGenericCreateStatic+0x56>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <xQueueGenericCreateStatic+0x5a>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericCreateStatic+0x5c>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xQueueGenericCreateStatic+0x84>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueGenericCreateStatic+0x88>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueGenericCreateStatic+0x8a>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a82:	2348      	movs	r3, #72	@ 0x48
 8004a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b48      	cmp	r3, #72	@ 0x48
 8004a8a:	d00b      	beq.n	8004aa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	61bb      	str	r3, [r7, #24]
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ab8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f840 	bl	8004b4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3730      	adds	r7, #48	@ 0x30
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b08a      	sub	sp, #40	@ 0x28
 8004ada:	af02      	add	r7, sp, #8
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3348      	adds	r3, #72	@ 0x48
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 ffc3 	bl	8006a9c <pvPortMalloc>
 8004b16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3348      	adds	r3, #72	@ 0x48
 8004b26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b30:	79fa      	ldrb	r2, [r7, #7]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f805 	bl	8004b4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b42:	69bb      	ldr	r3, [r7, #24]
	}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	69b8      	ldr	r0, [r7, #24]
 8004b7e:	f7ff fec3 	bl	8004908 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004baa:	2300      	movs	r3, #0
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f837 	bl	8004c24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f7ff ff7d 	bl	8004ad6 <xQueueGenericCreate>
 8004bdc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ffd3 	bl	8004b8a <prvInitialiseMutex>

		return xNewQueue;
 8004be4:	68fb      	ldr	r3, [r7, #12]
	}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af02      	add	r7, sp, #8
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	6039      	str	r1, [r7, #0]
 8004bf8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	6939      	ldr	r1, [r7, #16]
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f7ff fee5 	bl	80049dc <xQueueGenericCreateStatic>
 8004c12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff ffb8 	bl	8004b8a <prvInitialiseMutex>

		return xNewQueue;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	@ 0x38
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c32:	2300      	movs	r3, #0
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <xQueueGenericSend+0x34>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSend+0x42>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSend+0x46>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSend+0x48>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xQueueGenericSend+0x64>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSend+0x72>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSend+0x76>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSend+0x78>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb8:	f001 f9a0 	bl	8005ffc <xTaskGetSchedulerState>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <xQueueGenericSend+0xa4>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <xQueueGenericSend+0xa8>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <xQueueGenericSend+0xaa>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xQueueGenericSend+0xc6>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	61fb      	str	r3, [r7, #28]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cea:	f001 fdb5 	bl	8006858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <xQueueGenericSend+0xdc>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d129      	bne.n	8004d54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d06:	f000 fa91 	bl	800522c <prvCopyDataToQueue>
 8004d0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	3324      	adds	r3, #36	@ 0x24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 ffaf 	bl	8005c7c <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d24:	4b3f      	ldr	r3, [pc, #252]	@ (8004e24 <xQueueGenericSend+0x200>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	e00a      	b.n	8004d4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b39      	ldr	r3, [pc, #228]	@ (8004e24 <xQueueGenericSend+0x200>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d4c:	f001 fdb6 	bl	80068bc <vPortExitCritical>
				return pdPASS;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e063      	b.n	8004e1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5a:	f001 fdaf 	bl	80068bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e05c      	b.n	8004e1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 ffe9 	bl	8005d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d76:	f001 fda1 	bl	80068bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7a:	f000 fd97 	bl	80058ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d7e:	f001 fd6b 	bl	8006858 <vPortEnterCritical>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d88:	b25b      	sxtb	r3, r3
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d103      	bne.n	8004d98 <xQueueGenericSend+0x174>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d9e:	b25b      	sxtb	r3, r3
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d103      	bne.n	8004dae <xQueueGenericSend+0x18a>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dae:	f001 fd85 	bl	80068bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db2:	1d3a      	adds	r2, r7, #4
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ffd8 	bl	8005d70 <xTaskCheckForTimeOut>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d124      	bne.n	8004e10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dc8:	f000 fb28 	bl	800541c <prvIsQueueFull>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 ff28 	bl	8005c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de2:	f000 fab3 	bl	800534c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004de6:	f000 fd6f 	bl	80058c8 <xTaskResumeAll>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f af7c 	bne.w	8004cea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <xQueueGenericSend+0x200>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	e772      	b.n	8004cea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e06:	f000 faa1 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0a:	f000 fd5d 	bl	80058c8 <xTaskResumeAll>
 8004e0e:	e76c      	b.n	8004cea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e12:	f000 fa9b 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e16:	f000 fd57 	bl	80058c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3738      	adds	r7, #56	@ 0x38
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	@ 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <xQueueGenericSendFromISR+0x3e>
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <xQueueGenericSendFromISR+0x42>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <xQueueGenericSendFromISR+0x44>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d103      	bne.n	8004e96 <xQueueGenericSendFromISR+0x6e>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <xQueueGenericSendFromISR+0x72>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <xQueueGenericSendFromISR+0x74>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	623b      	str	r3, [r7, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eb8:	f001 fdae 	bl	8006a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ebc:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d302      	bcc.n	8004eea <xQueueGenericSendFromISR+0xc2>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d12f      	bne.n	8004f4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f00:	f000 f994 	bl	800522c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d112      	bne.n	8004f34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d016      	beq.n	8004f44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	3324      	adds	r3, #36	@ 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 feae 	bl	8005c7c <xTaskRemoveFromEventList>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00e      	beq.n	8004f44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e007      	b.n	8004f44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	b25a      	sxtb	r2, r3
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f44:	2301      	movs	r3, #1
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f48:	e001      	b.n	8004f4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3740      	adds	r7, #64	@ 0x40
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08c      	sub	sp, #48	@ 0x30
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <xQueueReceive+0x32>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	623b      	str	r3, [r7, #32]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <xQueueReceive+0x40>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <xQueueReceive+0x44>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <xQueueReceive+0x46>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <xQueueReceive+0x62>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61fb      	str	r3, [r7, #28]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc6:	f001 f819 	bl	8005ffc <xTaskGetSchedulerState>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <xQueueReceive+0x72>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <xQueueReceive+0x76>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueReceive+0x78>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <xQueueReceive+0x94>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61bb      	str	r3, [r7, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff8:	f001 fc2e 	bl	8006858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d01f      	beq.n	8005048 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800500c:	f000 f978 	bl	8005300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00f      	beq.n	8005040 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	3310      	adds	r3, #16
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fe29 	bl	8005c7c <xTaskRemoveFromEventList>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005030:	4b3c      	ldr	r3, [pc, #240]	@ (8005124 <xQueueReceive+0x1c0>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005040:	f001 fc3c 	bl	80068bc <vPortExitCritical>
				return pdPASS;
 8005044:	2301      	movs	r3, #1
 8005046:	e069      	b.n	800511c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d103      	bne.n	8005056 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800504e:	f001 fc35 	bl	80068bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005052:	2300      	movs	r3, #0
 8005054:	e062      	b.n	800511c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fe6f 	bl	8005d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800506a:	f001 fc27 	bl	80068bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800506e:	f000 fc1d 	bl	80058ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005072:	f001 fbf1 	bl	8006858 <vPortEnterCritical>
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800507c:	b25b      	sxtb	r3, r3
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d103      	bne.n	800508c <xQueueReceive+0x128>
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005092:	b25b      	sxtb	r3, r3
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d103      	bne.n	80050a2 <xQueueReceive+0x13e>
 800509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a2:	f001 fc0b 	bl	80068bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050a6:	1d3a      	adds	r2, r7, #4
 80050a8:	f107 0310 	add.w	r3, r7, #16
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fe5e 	bl	8005d70 <xTaskCheckForTimeOut>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d123      	bne.n	8005102 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050bc:	f000 f998 	bl	80053f0 <prvIsQueueEmpty>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d017      	beq.n	80050f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	3324      	adds	r3, #36	@ 0x24
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fdae 	bl	8005c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d6:	f000 f939 	bl	800534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050da:	f000 fbf5 	bl	80058c8 <xTaskResumeAll>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d189      	bne.n	8004ff8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <xQueueReceive+0x1c0>)
 80050e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	e780      	b.n	8004ff8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050f8:	f000 f928 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050fc:	f000 fbe4 	bl	80058c8 <xTaskResumeAll>
 8005100:	e77a      	b.n	8004ff8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005104:	f000 f922 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005108:	f000 fbde 	bl	80058c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800510c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800510e:	f000 f96f 	bl	80053f0 <prvIsQueueEmpty>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f43f af6f 	beq.w	8004ff8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800511a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800511c:	4618      	mov	r0, r3
 800511e:	3730      	adds	r7, #48	@ 0x30
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	@ 0x38
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	623b      	str	r3, [r7, #32]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d103      	bne.n	8005164 <xQueueReceiveFromISR+0x3c>
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <xQueueReceiveFromISR+0x40>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <xQueueReceiveFromISR+0x42>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	61fb      	str	r3, [r7, #28]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005186:	f001 fc47 	bl	8006a18 <vPortValidateInterruptPriority>
	__asm volatile
 800518a:	f3ef 8211 	mrs	r2, BASEPRI
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61ba      	str	r2, [r7, #24]
 80051a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02f      	beq.n	8005212 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c0:	f000 f89e 	bl	8005300 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	1e5a      	subs	r2, r3, #1
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80051cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d112      	bne.n	80051fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d016      	beq.n	800520c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	3310      	adds	r3, #16
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd4a 	bl	8005c7c <xTaskRemoveFromEventList>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00e      	beq.n	800520c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e007      	b.n	800520c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005200:	3301      	adds	r3, #1
 8005202:	b2db      	uxtb	r3, r3
 8005204:	b25a      	sxtb	r2, r3
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800520c:	2301      	movs	r3, #1
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005210:	e001      	b.n	8005216 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005212:	2300      	movs	r3, #0
 8005214:	637b      	str	r3, [r7, #52]	@ 0x34
 8005216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005218:	613b      	str	r3, [r7, #16]
	__asm volatile
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f383 8811 	msr	BASEPRI, r3
}
 8005220:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005224:	4618      	mov	r0, r3
 8005226:	3738      	adds	r7, #56	@ 0x38
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d14d      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 feee 	bl	8006038 <xTaskPriorityDisinherit>
 800525c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	e043      	b.n	80052ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d119      	bne.n	80052a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6858      	ldr	r0, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	461a      	mov	r2, r3
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	f001 ff91 	bl	800719e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d32b      	bcc.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e026      	b.n	80052ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68d8      	ldr	r0, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	461a      	mov	r2, r3
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	f001 ff77 	bl	800719e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	425b      	negs	r3, r3
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	425b      	negs	r3, r3
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d105      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d018      	beq.n	8005344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	441a      	add	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d303      	bcc.n	8005334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68d9      	ldr	r1, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f001 ff2d 	bl	800719e <memcpy>
	}
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 fa80 	bl	8006858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800535e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005360:	e011      	b.n	8005386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3324      	adds	r3, #36	@ 0x24
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fc84 	bl	8005c7c <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800537a:	f000 fd5d 	bl	8005e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	3b01      	subs	r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dce9      	bgt.n	8005362 <prvUnlockQueue+0x16>
 800538e:	e000      	b.n	8005392 <prvUnlockQueue+0x46>
					break;
 8005390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	22ff      	movs	r2, #255	@ 0xff
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800539a:	f001 fa8f 	bl	80068bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800539e:	f001 fa5b 	bl	8006858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053aa:	e011      	b.n	80053d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d012      	beq.n	80053da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3310      	adds	r3, #16
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fc5f 	bl	8005c7c <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053c4:	f000 fd38 	bl	8005e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dce9      	bgt.n	80053ac <prvUnlockQueue+0x60>
 80053d8:	e000      	b.n	80053dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	22ff      	movs	r2, #255	@ 0xff
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80053e4:	f001 fa6a 	bl	80068bc <vPortExitCritical>
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053f8:	f001 fa2e 	bl	8006858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e001      	b.n	800540e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f001 fa55 	bl	80068bc <vPortExitCritical>

	return xReturn;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005424:	f001 fa18 	bl	8006858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	429a      	cmp	r2, r3
 8005432:	d102      	bne.n	800543a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e001      	b.n	800543e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800543e:	f001 fa3d 	bl	80068bc <vPortExitCritical>

	return xReturn;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08e      	sub	sp, #56	@ 0x38
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10b      	bne.n	8005478 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	623b      	str	r3, [r7, #32]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <xTaskCreateStatic+0x4a>
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	61fb      	str	r3, [r7, #28]
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	e7fd      	b.n	8005492 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005496:	2354      	movs	r3, #84	@ 0x54
 8005498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b54      	cmp	r3, #84	@ 0x54
 800549e:	d00b      	beq.n	80054b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	61bb      	str	r3, [r7, #24]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01e      	beq.n	80054fe <xTaskCreateStatic+0xb2>
 80054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01b      	beq.n	80054fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054d8:	2300      	movs	r3, #0
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	9302      	str	r3, [sp, #8]
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	9301      	str	r3, [sp, #4]
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f850 	bl	8005596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054f8:	f000 f8d6 	bl	80056a8 <prvAddNewTaskToReadyList>
 80054fc:	e001      	b.n	8005502 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005502:	697b      	ldr	r3, [r7, #20]
	}
 8005504:	4618      	mov	r0, r3
 8005506:	3728      	adds	r7, #40	@ 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	@ 0x30
 8005510:	af04      	add	r7, sp, #16
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4618      	mov	r0, r3
 8005522:	f001 fabb 	bl	8006a9c <pvPortMalloc>
 8005526:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00e      	beq.n	800554c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800552e:	2054      	movs	r0, #84	@ 0x54
 8005530:	f001 fab4 	bl	8006a9c <pvPortMalloc>
 8005534:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
 8005542:	e005      	b.n	8005550 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f001 fb77 	bl	8006c38 <vPortFree>
 800554a:	e001      	b.n	8005550 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	2300      	movs	r3, #0
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	9302      	str	r3, [sp, #8]
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f80e 	bl	8005596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800557a:	69f8      	ldr	r0, [r7, #28]
 800557c:	f000 f894 	bl	80056a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e002      	b.n	800558c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800558c:	69bb      	ldr	r3, [r7, #24]
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b088      	sub	sp, #32
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055ae:	3b01      	subs	r3, #1
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f023 0307 	bic.w	r3, r3, #7
 80055bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	617b      	str	r3, [r7, #20]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01f      	beq.n	8005626 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e012      	b.n	8005612 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	7819      	ldrb	r1, [r3, #0]
 80055f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	3334      	adds	r3, #52	@ 0x34
 80055fc:	460a      	mov	r2, r1
 80055fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	3301      	adds	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2b0f      	cmp	r3, #15
 8005616:	d9e9      	bls.n	80055ec <prvInitialiseNewTask+0x56>
 8005618:	e000      	b.n	800561c <prvInitialiseNewTask+0x86>
			{
				break;
 800561a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005624:	e003      	b.n	800562e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	2b06      	cmp	r3, #6
 8005632:	d901      	bls.n	8005638 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005634:	2306      	movs	r3, #6
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	2200      	movs	r2, #0
 8005648:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f8c6 	bl	80047e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	3318      	adds	r3, #24
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff f8c1 	bl	80047e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	f1c3 0207 	rsb	r2, r3, #7
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	69b8      	ldr	r0, [r7, #24]
 8005688:	f000 ffb4 	bl	80065f4 <pxPortInitialiseStack>
 800568c:	4602      	mov	r2, r0
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800569c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569e:	bf00      	nop
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056b0:	f001 f8d2 	bl	8006858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <prvAddNewTaskToReadyList+0xb8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	4a29      	ldr	r2, [pc, #164]	@ (8005760 <prvAddNewTaskToReadyList+0xb8>)
 80056bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056be:	4b29      	ldr	r3, [pc, #164]	@ (8005764 <prvAddNewTaskToReadyList+0xbc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056c6:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <prvAddNewTaskToReadyList+0xbc>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056cc:	4b24      	ldr	r3, [pc, #144]	@ (8005760 <prvAddNewTaskToReadyList+0xb8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d110      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d4:	f000 fbd4 	bl	8005e80 <prvInitialiseTaskLists>
 80056d8:	e00d      	b.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056da:	4b23      	ldr	r3, [pc, #140]	@ (8005768 <prvAddNewTaskToReadyList+0xc0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e2:	4b20      	ldr	r3, [pc, #128]	@ (8005764 <prvAddNewTaskToReadyList+0xbc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d802      	bhi.n	80056f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005764 <prvAddNewTaskToReadyList+0xbc>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <prvAddNewTaskToReadyList+0xc4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a1b      	ldr	r2, [pc, #108]	@ (800576c <prvAddNewTaskToReadyList+0xc4>)
 80056fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	4b19      	ldr	r3, [pc, #100]	@ (8005770 <prvAddNewTaskToReadyList+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4313      	orrs	r3, r2
 800570e:	4a18      	ldr	r2, [pc, #96]	@ (8005770 <prvAddNewTaskToReadyList+0xc8>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <prvAddNewTaskToReadyList+0xcc>)
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f7ff f866 	bl	80047fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800572e:	f001 f8c5 	bl	80068bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <prvAddNewTaskToReadyList+0xc0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <prvAddNewTaskToReadyList+0xbc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005744:	429a      	cmp	r2, r3
 8005746:	d207      	bcs.n	8005758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <prvAddNewTaskToReadyList+0xd0>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000550 	.word	0x20000550
 8005764:	20000450 	.word	0x20000450
 8005768:	2000055c 	.word	0x2000055c
 800576c:	2000056c 	.word	0x2000056c
 8005770:	20000558 	.word	0x20000558
 8005774:	20000454 	.word	0x20000454
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <vTaskDelay+0x64>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <vTaskDelay+0x32>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60bb      	str	r3, [r7, #8]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057ae:	f000 f87d 	bl	80058ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057b2:	2100      	movs	r1, #0
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 feb7 	bl	8006528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057ba:	f000 f885 	bl	80058c8 <xTaskResumeAll>
 80057be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057c6:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <vTaskDelay+0x68>)
 80057c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000578 	.word	0x20000578
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	@ 0x28
 80057ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057f6:	463a      	mov	r2, r7
 80057f8:	1d39      	adds	r1, r7, #4
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fb fe82 	bl	8001508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	9202      	str	r2, [sp, #8]
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	2300      	movs	r3, #0
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	2300      	movs	r3, #0
 8005814:	460a      	mov	r2, r1
 8005816:	491f      	ldr	r1, [pc, #124]	@ (8005894 <vTaskStartScheduler+0xac>)
 8005818:	481f      	ldr	r0, [pc, #124]	@ (8005898 <vTaskStartScheduler+0xb0>)
 800581a:	f7ff fe17 	bl	800544c <xTaskCreateStatic>
 800581e:	4603      	mov	r3, r0
 8005820:	4a1e      	ldr	r2, [pc, #120]	@ (800589c <vTaskStartScheduler+0xb4>)
 8005822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005824:	4b1d      	ldr	r3, [pc, #116]	@ (800589c <vTaskStartScheduler+0xb4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e001      	b.n	8005836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d116      	bne.n	800586a <vTaskStartScheduler+0x82>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
}
 800584e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005850:	4b13      	ldr	r3, [pc, #76]	@ (80058a0 <vTaskStartScheduler+0xb8>)
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <vTaskStartScheduler+0xbc>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800585e:	4b12      	ldr	r3, [pc, #72]	@ (80058a8 <vTaskStartScheduler+0xc0>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005864:	f000 ff54 	bl	8006710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005868:	e00f      	b.n	800588a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d10b      	bne.n	800588a <vTaskStartScheduler+0xa2>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <vTaskStartScheduler+0x9e>
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	08007ee4 	.word	0x08007ee4
 8005898:	08005e51 	.word	0x08005e51
 800589c:	20000574 	.word	0x20000574
 80058a0:	20000570 	.word	0x20000570
 80058a4:	2000055c 	.word	0x2000055c
 80058a8:	20000554 	.word	0x20000554

080058ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <vTaskSuspendAll+0x18>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	4a03      	ldr	r2, [pc, #12]	@ (80058c4 <vTaskSuspendAll+0x18>)
 80058b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000578 	.word	0x20000578

080058c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058d6:	4b42      	ldr	r3, [pc, #264]	@ (80059e0 <xTaskResumeAll+0x118>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	603b      	str	r3, [r7, #0]
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	e7fd      	b.n	80058f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058f6:	f000 ffaf 	bl	8006858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058fa:	4b39      	ldr	r3, [pc, #228]	@ (80059e0 <xTaskResumeAll+0x118>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3b01      	subs	r3, #1
 8005900:	4a37      	ldr	r2, [pc, #220]	@ (80059e0 <xTaskResumeAll+0x118>)
 8005902:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005904:	4b36      	ldr	r3, [pc, #216]	@ (80059e0 <xTaskResumeAll+0x118>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d161      	bne.n	80059d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800590c:	4b35      	ldr	r3, [pc, #212]	@ (80059e4 <xTaskResumeAll+0x11c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05d      	beq.n	80059d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005914:	e02e      	b.n	8005974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005916:	4b34      	ldr	r3, [pc, #208]	@ (80059e8 <xTaskResumeAll+0x120>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3318      	adds	r3, #24
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe ffc6 	bl	80048b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3304      	adds	r3, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe ffc1 	bl	80048b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	4b2c      	ldr	r3, [pc, #176]	@ (80059ec <xTaskResumeAll+0x124>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4313      	orrs	r3, r2
 8005940:	4a2a      	ldr	r2, [pc, #168]	@ (80059ec <xTaskResumeAll+0x124>)
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <xTaskResumeAll+0x128>)
 8005952:	441a      	add	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7fe ff4d 	bl	80047fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005964:	4b23      	ldr	r3, [pc, #140]	@ (80059f4 <xTaskResumeAll+0x12c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800596e:	4b22      	ldr	r3, [pc, #136]	@ (80059f8 <xTaskResumeAll+0x130>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005974:	4b1c      	ldr	r3, [pc, #112]	@ (80059e8 <xTaskResumeAll+0x120>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1cc      	bne.n	8005916 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005982:	f000 fb1b 	bl	8005fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005986:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <xTaskResumeAll+0x134>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d010      	beq.n	80059b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005992:	f000 f837 	bl	8005a04 <xTaskIncrementTick>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800599c:	4b16      	ldr	r3, [pc, #88]	@ (80059f8 <xTaskResumeAll+0x130>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f1      	bne.n	8005992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <xTaskResumeAll+0x134>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059b4:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <xTaskResumeAll+0x130>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <xTaskResumeAll+0x138>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059d0:	f000 ff74 	bl	80068bc <vPortExitCritical>

	return xAlreadyYielded;
 80059d4:	68bb      	ldr	r3, [r7, #8]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000578 	.word	0x20000578
 80059e4:	20000550 	.word	0x20000550
 80059e8:	20000510 	.word	0x20000510
 80059ec:	20000558 	.word	0x20000558
 80059f0:	20000454 	.word	0x20000454
 80059f4:	20000450 	.word	0x20000450
 80059f8:	20000564 	.word	0x20000564
 80059fc:	20000560 	.word	0x20000560
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <xTaskIncrementTick+0x148>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 808f 	bne.w	8005b36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a18:	4b4d      	ldr	r3, [pc, #308]	@ (8005b50 <xTaskIncrementTick+0x14c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a20:	4a4b      	ldr	r2, [pc, #300]	@ (8005b50 <xTaskIncrementTick+0x14c>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d121      	bne.n	8005a70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a2c:	4b49      	ldr	r3, [pc, #292]	@ (8005b54 <xTaskIncrementTick+0x150>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	603b      	str	r3, [r7, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <xTaskIncrementTick+0x46>
 8005a4e:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <xTaskIncrementTick+0x150>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <xTaskIncrementTick+0x154>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3e      	ldr	r2, [pc, #248]	@ (8005b54 <xTaskIncrementTick+0x150>)
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b58 <xTaskIncrementTick+0x154>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	4b3e      	ldr	r3, [pc, #248]	@ (8005b5c <xTaskIncrementTick+0x158>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a3c      	ldr	r2, [pc, #240]	@ (8005b5c <xTaskIncrementTick+0x158>)
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	f000 faa6 	bl	8005fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a70:	4b3b      	ldr	r3, [pc, #236]	@ (8005b60 <xTaskIncrementTick+0x15c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d348      	bcc.n	8005b0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7a:	4b36      	ldr	r3, [pc, #216]	@ (8005b54 <xTaskIncrementTick+0x150>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a84:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <xTaskIncrementTick+0x15c>)
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	601a      	str	r2, [r3, #0]
					break;
 8005a8c:	e03e      	b.n	8005b0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8e:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <xTaskIncrementTick+0x150>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d203      	bcs.n	8005aae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8005b60 <xTaskIncrementTick+0x15c>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005aac:	e02e      	b.n	8005b0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fefe 	bl	80048b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3318      	adds	r3, #24
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fef5 	bl	80048b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	2201      	movs	r2, #1
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <xTaskIncrementTick+0x160>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <xTaskIncrementTick+0x160>)
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b68 <xTaskIncrementTick+0x164>)
 8005aea:	441a      	add	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f7fe fe81 	bl	80047fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <xTaskIncrementTick+0x168>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d3b9      	bcc.n	8005a7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0a:	e7b6      	b.n	8005a7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b0c:	4b17      	ldr	r3, [pc, #92]	@ (8005b6c <xTaskIncrementTick+0x168>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4915      	ldr	r1, [pc, #84]	@ (8005b68 <xTaskIncrementTick+0x164>)
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d901      	bls.n	8005b28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b28:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <xTaskIncrementTick+0x16c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e004      	b.n	8005b40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b36:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <xTaskIncrementTick+0x170>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b74 <xTaskIncrementTick+0x170>)
 8005b3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b40:	697b      	ldr	r3, [r7, #20]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000578 	.word	0x20000578
 8005b50:	20000554 	.word	0x20000554
 8005b54:	20000508 	.word	0x20000508
 8005b58:	2000050c 	.word	0x2000050c
 8005b5c:	20000568 	.word	0x20000568
 8005b60:	20000570 	.word	0x20000570
 8005b64:	20000558 	.word	0x20000558
 8005b68:	20000454 	.word	0x20000454
 8005b6c:	20000450 	.word	0x20000450
 8005b70:	20000564 	.word	0x20000564
 8005b74:	20000560 	.word	0x20000560

08005b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b7e:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <vTaskSwitchContext+0xa4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b86:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <vTaskSwitchContext+0xa8>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b8c:	e040      	b.n	8005c10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b8e:	4b24      	ldr	r3, [pc, #144]	@ (8005c20 <vTaskSwitchContext+0xa8>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b23      	ldr	r3, [pc, #140]	@ (8005c24 <vTaskSwitchContext+0xac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	fab3 f383 	clz	r3, r3
 8005ba0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
 8005ba4:	f1c3 031f 	rsb	r3, r3, #31
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	491f      	ldr	r1, [pc, #124]	@ (8005c28 <vTaskSwitchContext+0xb0>)
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10b      	bne.n	8005bd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <vTaskSwitchContext+0x5a>
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4a11      	ldr	r2, [pc, #68]	@ (8005c28 <vTaskSwitchContext+0xb0>)
 8005be2:	4413      	add	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d104      	bne.n	8005c06 <vTaskSwitchContext+0x8e>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a07      	ldr	r2, [pc, #28]	@ (8005c2c <vTaskSwitchContext+0xb4>)
 8005c0e:	6013      	str	r3, [r2, #0]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000578 	.word	0x20000578
 8005c20:	20000564 	.word	0x20000564
 8005c24:	20000558 	.word	0x20000558
 8005c28:	20000454 	.word	0x20000454
 8005c2c:	20000450 	.word	0x20000450

08005c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60fb      	str	r3, [r7, #12]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c58:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <vTaskPlaceOnEventList+0x48>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3318      	adds	r3, #24
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fe fdee 	bl	8004842 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c66:	2101      	movs	r1, #1
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	f000 fc5d 	bl	8006528 <prvAddCurrentTaskToDelayedList>
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000450 	.word	0x20000450

08005c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	60fb      	str	r3, [r7, #12]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fe00 	bl	80048b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <xTaskRemoveFromEventList+0xb0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11c      	bne.n	8005cf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fdf7 	bl	80048b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	2201      	movs	r2, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <xTaskRemoveFromEventList+0xb4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <xTaskRemoveFromEventList+0xb4>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4a13      	ldr	r2, [pc, #76]	@ (8005d34 <xTaskRemoveFromEventList+0xb8>)
 8005ce6:	441a      	add	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fe fd83 	bl	80047fa <vListInsertEnd>
 8005cf4:	e005      	b.n	8005d02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	480e      	ldr	r0, [pc, #56]	@ (8005d38 <xTaskRemoveFromEventList+0xbc>)
 8005cfe:	f7fe fd7c 	bl	80047fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <xTaskRemoveFromEventList+0xc0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d905      	bls.n	8005d1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <xTaskRemoveFromEventList+0xc4>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e001      	b.n	8005d20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d20:	697b      	ldr	r3, [r7, #20]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000578 	.word	0x20000578
 8005d30:	20000558 	.word	0x20000558
 8005d34:	20000454 	.word	0x20000454
 8005d38:	20000510 	.word	0x20000510
 8005d3c:	20000450 	.word	0x20000450
 8005d40:	20000564 	.word	0x20000564

08005d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <vTaskInternalSetTimeOutState+0x24>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d54:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <vTaskInternalSetTimeOutState+0x28>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000568 	.word	0x20000568
 8005d6c:	20000554 	.word	0x20000554

08005d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60fb      	str	r3, [r7, #12]
}
 8005db0:	bf00      	nop
 8005db2:	bf00      	nop
 8005db4:	e7fd      	b.n	8005db2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005db6:	f000 fd4f 	bl	8006858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <xTaskCheckForTimeOut+0xc0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d102      	bne.n	8005dda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e023      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <xTaskCheckForTimeOut+0xc4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d007      	beq.n	8005df6 <xTaskCheckForTimeOut+0x86>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e015      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d20b      	bcs.n	8005e18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff99 	bl	8005d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e004      	b.n	8005e22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e22:	f000 fd4b 	bl	80068bc <vPortExitCritical>

	return xReturn;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000554 	.word	0x20000554
 8005e34:	20000568 	.word	0x20000568

08005e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <vTaskMissedYield+0x14>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000564 	.word	0x20000564

08005e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e58:	f000 f852 	bl	8005f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	@ (8005e78 <prvIdleTask+0x28>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d9f9      	bls.n	8005e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <prvIdleTask+0x2c>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e74:	e7f0      	b.n	8005e58 <prvIdleTask+0x8>
 8005e76:	bf00      	nop
 8005e78:	20000454 	.word	0x20000454
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e00c      	b.n	8005ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a12      	ldr	r2, [pc, #72]	@ (8005ee0 <prvInitialiseTaskLists+0x60>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fc80 	bl	80047a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	d9ef      	bls.n	8005e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eac:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005eae:	f7fe fc77 	bl	80047a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb2:	480d      	ldr	r0, [pc, #52]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	f7fe fc74 	bl	80047a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb8:	480c      	ldr	r0, [pc, #48]	@ (8005eec <prvInitialiseTaskLists+0x6c>)
 8005eba:	f7fe fc71 	bl	80047a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ebe:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <prvInitialiseTaskLists+0x70>)
 8005ec0:	f7fe fc6e 	bl	80047a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec4:	480b      	ldr	r0, [pc, #44]	@ (8005ef4 <prvInitialiseTaskLists+0x74>)
 8005ec6:	f7fe fc6b 	bl	80047a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <prvInitialiseTaskLists+0x78>)
 8005ecc:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <prvInitialiseTaskLists+0x7c>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	@ (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000454 	.word	0x20000454
 8005ee4:	200004e0 	.word	0x200004e0
 8005ee8:	200004f4 	.word	0x200004f4
 8005eec:	20000510 	.word	0x20000510
 8005ef0:	20000524 	.word	0x20000524
 8005ef4:	2000053c 	.word	0x2000053c
 8005ef8:	20000508 	.word	0x20000508
 8005efc:	2000050c 	.word	0x2000050c

08005f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f06:	e019      	b.n	8005f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f08:	f000 fca6 	bl	8006858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <prvCheckTasksWaitingTermination+0x50>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fccb 	bl	80048b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a0b      	ldr	r2, [pc, #44]	@ (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f32:	f000 fcc3 	bl	80068bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f810 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e1      	bne.n	8005f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000524 	.word	0x20000524
 8005f54:	20000550 	.word	0x20000550
 8005f58:	20000538 	.word	0x20000538

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fe60 	bl	8006c38 <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fe5d 	bl	8006c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e019      	b.n	8005fb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fe54 	bl	8006c38 <vPortFree>
	}
 8005f90:	e010      	b.n	8005fb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d00b      	beq.n	8005fb4 <prvDeleteTCB+0x58>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <prvDeleteTCB+0x54>
	}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd4:	e008      	b.n	8005fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd6:	4b07      	ldr	r3, [pc, #28]	@ (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000508 	.word	0x20000508
 8005ff8:	20000570 	.word	0x20000570

08005ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006002:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <xTaskGetSchedulerState+0x34>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800600a:	2301      	movs	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e008      	b.n	8006022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006010:	4b08      	ldr	r3, [pc, #32]	@ (8006034 <xTaskGetSchedulerState+0x38>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006018:	2302      	movs	r3, #2
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e001      	b.n	8006022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006022:	687b      	ldr	r3, [r7, #4]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	2000055c 	.word	0x2000055c
 8006034:	20000578 	.word	0x20000578

08006038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d070      	beq.n	8006130 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800604e:	4b3b      	ldr	r3, [pc, #236]	@ (800613c <xTaskPriorityDisinherit+0x104>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d00b      	beq.n	8006070 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60bb      	str	r3, [r7, #8]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d044      	beq.n	8006130 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d140      	bne.n	8006130 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fbfe 	bl	80048b4 <uxListRemove>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d115      	bne.n	80060ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	491f      	ldr	r1, [pc, #124]	@ (8006140 <xTaskPriorityDisinherit+0x108>)
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskPriorityDisinherit+0xb2>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	2201      	movs	r2, #1
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43da      	mvns	r2, r3
 80060e0:	4b18      	ldr	r3, [pc, #96]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4013      	ands	r3, r2
 80060e6:	4a17      	ldr	r2, [pc, #92]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 80060e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	f1c3 0207 	rsb	r2, r3, #7
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	409a      	lsls	r2, r3
 8006106:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	4a0d      	ldr	r2, [pc, #52]	@ (8006144 <xTaskPriorityDisinherit+0x10c>)
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4a08      	ldr	r2, [pc, #32]	@ (8006140 <xTaskPriorityDisinherit+0x108>)
 800611e:	441a      	add	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fe fb67 	bl	80047fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006130:	697b      	ldr	r3, [r7, #20]
	}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000450 	.word	0x20000450
 8006140:	20000454 	.word	0x20000454
 8006144:	20000558 	.word	0x20000558

08006148 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006156:	f000 fb7f 	bl	8006858 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800615a:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <xTaskNotifyWait+0xac>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d01a      	beq.n	800619e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006168:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <xTaskNotifyWait+0xac>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	43d2      	mvns	r2, r2
 8006172:	400a      	ands	r2, r1
 8006174:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006176:	4b1f      	ldr	r3, [pc, #124]	@ (80061f4 <xTaskNotifyWait+0xac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006186:	2101      	movs	r1, #1
 8006188:	6838      	ldr	r0, [r7, #0]
 800618a:	f000 f9cd 	bl	8006528 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800618e:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <xTaskNotifyWait+0xb0>)
 8006190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800619e:	f000 fb8d 	bl	80068bc <vPortExitCritical>

		taskENTER_CRITICAL();
 80061a2:	f000 fb59 	bl	8006858 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80061ac:	4b11      	ldr	r3, [pc, #68]	@ (80061f4 <xTaskNotifyWait+0xac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80061b6:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <xTaskNotifyWait+0xac>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d002      	beq.n	80061ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	e008      	b.n	80061dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80061ca:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <xTaskNotifyWait+0xac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	43d2      	mvns	r2, r2
 80061d4:	400a      	ands	r2, r1
 80061d6:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <xTaskNotifyWait+0xac>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80061e6:	f000 fb69 	bl	80068bc <vPortExitCritical>

		return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000450 	.word	0x20000450
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	4613      	mov	r3, r2
 800620a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800620c:	2301      	movs	r3, #1
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <xTaskGenericNotify+0x32>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	61bb      	str	r3, [r7, #24]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006232:	f000 fb11 	bl	8006858 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800624a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b04      	cmp	r3, #4
 8006258:	d827      	bhi.n	80062aa <xTaskGenericNotify+0xae>
 800625a:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <xTaskGenericNotify+0x64>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	080062cd 	.word	0x080062cd
 8006264:	08006275 	.word	0x08006275
 8006268:	08006283 	.word	0x08006283
 800626c:	0800628f 	.word	0x0800628f
 8006270:	08006297 	.word	0x08006297
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	431a      	orrs	r2, r3
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006280:	e027      	b.n	80062d2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800628c:	e021      	b.n	80062d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006294:	e01d      	b.n	80062d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006296:	7ffb      	ldrb	r3, [r7, #31]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d003      	beq.n	80062a4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80062a2:	e016      	b.n	80062d2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80062a8:	e013      	b.n	80062d2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d00d      	beq.n	80062d0 <xTaskGenericNotify+0xd4>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	617b      	str	r3, [r7, #20]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xTaskGenericNotify+0xcc>
					break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <xTaskGenericNotify+0xd6>

					break;
 80062d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d13a      	bne.n	800634e <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fae9 	bl	80048b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	2201      	movs	r2, #1
 80062e8:	409a      	lsls	r2, r3
 80062ea:	4b1c      	ldr	r3, [pc, #112]	@ (800635c <xTaskGenericNotify+0x160>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <xTaskGenericNotify+0x160>)
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <xTaskGenericNotify+0x164>)
 8006302:	441a      	add	r2, r3
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7fe fa75 	bl	80047fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <xTaskGenericNotify+0x134>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	613b      	str	r3, [r7, #16]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <xTaskGenericNotify+0x168>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	429a      	cmp	r2, r3
 800633c:	d907      	bls.n	800634e <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800633e:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <xTaskGenericNotify+0x16c>)
 8006340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800634e:	f000 fab5 	bl	80068bc <vPortExitCritical>

		return xReturn;
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	@ 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000558 	.word	0x20000558
 8006360:	20000454 	.word	0x20000454
 8006364:	20000450 	.word	0x20000450
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	@ 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800639e:	f000 fb3b 	bl	8006a18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80063a6:	f3ef 8211 	mrs	r2, BASEPRI
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	623a      	str	r2, [r7, #32]
 80063bc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80063be:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d829      	bhi.n	800643c <xTaskGenericNotifyFromISR+0xd0>
 80063e8:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <xTaskGenericNotifyFromISR+0x84>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	0800645f 	.word	0x0800645f
 80063f4:	08006405 	.word	0x08006405
 80063f8:	08006413 	.word	0x08006413
 80063fc:	0800641f 	.word	0x0800641f
 8006400:	08006427 	.word	0x08006427
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	431a      	orrs	r2, r3
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006410:	e028      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800641c:	e022      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8006424:	e01e      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800642a:	2b02      	cmp	r3, #2
 800642c:	d003      	beq.n	8006436 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006434:	e016      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8006436:	2300      	movs	r3, #0
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800643a:	e013      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d00d      	beq.n	8006462 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	61bb      	str	r3, [r7, #24]
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	e7fd      	b.n	800645a <xTaskGenericNotifyFromISR+0xee>
					break;
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8006462:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006464:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006468:	2b01      	cmp	r3, #1
 800646a:	d146      	bne.n	80064fa <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	617b      	str	r3, [r7, #20]
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800648c:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <xTaskGenericNotifyFromISR+0x1a4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11c      	bne.n	80064ce <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	3304      	adds	r3, #4
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fa0b 	bl	80048b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	2201      	movs	r2, #1
 80064a4:	409a      	lsls	r2, r3
 80064a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006514 <xTaskGenericNotifyFromISR+0x1a8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	4a19      	ldr	r2, [pc, #100]	@ (8006514 <xTaskGenericNotifyFromISR+0x1a8>)
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4a16      	ldr	r2, [pc, #88]	@ (8006518 <xTaskGenericNotifyFromISR+0x1ac>)
 80064be:	441a      	add	r2, r3
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7fe f997 	bl	80047fa <vListInsertEnd>
 80064cc:	e005      	b.n	80064da <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	3318      	adds	r3, #24
 80064d2:	4619      	mov	r1, r3
 80064d4:	4811      	ldr	r0, [pc, #68]	@ (800651c <xTaskGenericNotifyFromISR+0x1b0>)
 80064d6:	f7fe f990 	bl	80047fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064de:	4b10      	ldr	r3, [pc, #64]	@ (8006520 <xTaskGenericNotifyFromISR+0x1b4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d908      	bls.n	80064fa <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80064e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80064ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80064f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <xTaskGenericNotifyFromISR+0x1b8>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	@ 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000578 	.word	0x20000578
 8006514:	20000558 	.word	0x20000558
 8006518:	20000454 	.word	0x20000454
 800651c:	20000510 	.word	0x20000510
 8006520:	20000450 	.word	0x20000450
 8006524:	20000564 	.word	0x20000564

08006528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006532:	4b29      	ldr	r3, [pc, #164]	@ (80065d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006538:	4b28      	ldr	r3, [pc, #160]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe f9b8 	bl	80048b4 <uxListRemove>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800654a:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	2201      	movs	r2, #1
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43da      	mvns	r2, r3
 8006558:	4b21      	ldr	r3, [pc, #132]	@ (80065e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4013      	ands	r3, r2
 800655e:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d10a      	bne.n	8006580 <prvAddCurrentTaskToDelayedList+0x58>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006570:	4b1a      	ldr	r3, [pc, #104]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	481a      	ldr	r0, [pc, #104]	@ (80065e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800657a:	f7fe f93e 	bl	80047fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800657e:	e026      	b.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006588:	4b14      	ldr	r3, [pc, #80]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d209      	bcs.n	80065ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006598:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4619      	mov	r1, r3
 80065a4:	4610      	mov	r0, r2
 80065a6:	f7fe f94c 	bl	8004842 <vListInsert>
}
 80065aa:	e010      	b.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ac:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fe f942 	bl	8004842 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065be:	4b0c      	ldr	r3, [pc, #48]	@ (80065f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d202      	bcs.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065c8:	4a09      	ldr	r2, [pc, #36]	@ (80065f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6013      	str	r3, [r2, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000554 	.word	0x20000554
 80065dc:	20000450 	.word	0x20000450
 80065e0:	20000558 	.word	0x20000558
 80065e4:	2000053c 	.word	0x2000053c
 80065e8:	2000050c 	.word	0x2000050c
 80065ec:	20000508 	.word	0x20000508
 80065f0:	20000570 	.word	0x20000570

080065f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b04      	subs	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006624:	4a0c      	ldr	r2, [pc, #48]	@ (8006658 <pxPortInitialiseStack+0x64>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b14      	subs	r3, #20
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b20      	subs	r3, #32
 8006648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	0800665d 	.word	0x0800665d

0800665c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006666:	4b13      	ldr	r3, [pc, #76]	@ (80066b4 <prvTaskExitError+0x58>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d00b      	beq.n	8006688 <prvTaskExitError+0x2c>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	e7fd      	b.n	8006684 <prvTaskExitError+0x28>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60bb      	str	r3, [r7, #8]
}
 800669a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800669c:	bf00      	nop
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0fc      	beq.n	800669e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	2000000c 	.word	0x2000000c
	...

080066c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	20000450 	.word	0x20000450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	@ (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	bf00      	nop
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006716:	4b47      	ldr	r3, [pc, #284]	@ (8006834 <xPortStartScheduler+0x124>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a47      	ldr	r2, [pc, #284]	@ (8006838 <xPortStartScheduler+0x128>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10b      	bne.n	8006738 <xPortStartScheduler+0x28>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006738:	4b3e      	ldr	r3, [pc, #248]	@ (8006834 <xPortStartScheduler+0x124>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3f      	ldr	r2, [pc, #252]	@ (800683c <xPortStartScheduler+0x12c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10b      	bne.n	800675a <xPortStartScheduler+0x4a>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800675a:	4b39      	ldr	r3, [pc, #228]	@ (8006840 <xPortStartScheduler+0x130>)
 800675c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	22ff      	movs	r2, #255	@ 0xff
 800676a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4b31      	ldr	r3, [pc, #196]	@ (8006844 <xPortStartScheduler+0x134>)
 8006780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006782:	4b31      	ldr	r3, [pc, #196]	@ (8006848 <xPortStartScheduler+0x138>)
 8006784:	2207      	movs	r2, #7
 8006786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006788:	e009      	b.n	800679e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800678a:	4b2f      	ldr	r3, [pc, #188]	@ (8006848 <xPortStartScheduler+0x138>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3b01      	subs	r3, #1
 8006790:	4a2d      	ldr	r2, [pc, #180]	@ (8006848 <xPortStartScheduler+0x138>)
 8006792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a6:	2b80      	cmp	r3, #128	@ 0x80
 80067a8:	d0ef      	beq.n	800678a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067aa:	4b27      	ldr	r3, [pc, #156]	@ (8006848 <xPortStartScheduler+0x138>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1c3 0307 	rsb	r3, r3, #7
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d00b      	beq.n	80067ce <xPortStartScheduler+0xbe>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60bb      	str	r3, [r7, #8]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006848 <xPortStartScheduler+0x138>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <xPortStartScheduler+0x138>)
 80067d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006848 <xPortStartScheduler+0x138>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067e0:	4a19      	ldr	r2, [pc, #100]	@ (8006848 <xPortStartScheduler+0x138>)
 80067e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067ec:	4b17      	ldr	r3, [pc, #92]	@ (800684c <xPortStartScheduler+0x13c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a16      	ldr	r2, [pc, #88]	@ (800684c <xPortStartScheduler+0x13c>)
 80067f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f8:	4b14      	ldr	r3, [pc, #80]	@ (800684c <xPortStartScheduler+0x13c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a13      	ldr	r2, [pc, #76]	@ (800684c <xPortStartScheduler+0x13c>)
 80067fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006804:	f000 f8da 	bl	80069bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006808:	4b11      	ldr	r3, [pc, #68]	@ (8006850 <xPortStartScheduler+0x140>)
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800680e:	f000 f8f9 	bl	8006a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <xPortStartScheduler+0x144>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a0f      	ldr	r2, [pc, #60]	@ (8006854 <xPortStartScheduler+0x144>)
 8006818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800681c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800681e:	f7ff ff63 	bl	80066e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006822:	f7ff f9a9 	bl	8005b78 <vTaskSwitchContext>
	prvTaskExitError();
 8006826:	f7ff ff19 	bl	800665c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	e000ed00 	.word	0xe000ed00
 8006838:	410fc271 	.word	0x410fc271
 800683c:	410fc270 	.word	0x410fc270
 8006840:	e000e400 	.word	0xe000e400
 8006844:	2000057c 	.word	0x2000057c
 8006848:	20000580 	.word	0x20000580
 800684c:	e000ed20 	.word	0xe000ed20
 8006850:	2000000c 	.word	0x2000000c
 8006854:	e000ef34 	.word	0xe000ef34

08006858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	607b      	str	r3, [r7, #4]
}
 8006870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006872:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <vPortEnterCritical+0x5c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a0e      	ldr	r2, [pc, #56]	@ (80068b4 <vPortEnterCritical+0x5c>)
 800687a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800687c:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <vPortEnterCritical+0x5c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d110      	bne.n	80068a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006884:	4b0c      	ldr	r3, [pc, #48]	@ (80068b8 <vPortEnterCritical+0x60>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	603b      	str	r3, [r7, #0]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <vPortEnterCritical+0x4a>
	}
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000000c 	.word	0x2000000c
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068c2:	4b12      	ldr	r3, [pc, #72]	@ (800690c <vPortExitCritical+0x50>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <vPortExitCritical+0x26>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068e2:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <vPortExitCritical+0x50>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4a08      	ldr	r2, [pc, #32]	@ (800690c <vPortExitCritical+0x50>)
 80068ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068ec:	4b07      	ldr	r3, [pc, #28]	@ (800690c <vPortExitCritical+0x50>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <vPortExitCritical+0x44>
 80068f4:	2300      	movs	r3, #0
 80068f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f383 8811 	msr	BASEPRI, r3
}
 80068fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b15      	ldr	r3, [pc, #84]	@ (8006970 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f01e 0f10 	tst.w	lr, #16
 8006920:	bf08      	it	eq
 8006922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006934:	f380 8811 	msr	BASEPRI, r0
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f7ff f91a 	bl	8005b78 <vTaskSwitchContext>
 8006944:	f04f 0000 	mov.w	r0, #0
 8006948:	f380 8811 	msr	BASEPRI, r0
 800694c:	bc09      	pop	{r0, r3}
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	f01e 0f10 	tst.w	lr, #16
 800695a:	bf08      	it	eq
 800695c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006960:	f380 8809 	msr	PSP, r0
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst>:
 8006970:	20000450 	.word	0x20000450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006992:	f7ff f837 	bl	8005a04 <xTaskIncrementTick>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800699c:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <SysTick_Handler+0x40>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	@ (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <vPortSetupTimerInterrupt+0x38>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <vPortSetupTimerInterrupt+0x3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <vPortSetupTimerInterrupt+0x40>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	099b      	lsrs	r3, r3, #6
 80069d8:	4a09      	ldr	r2, [pc, #36]	@ (8006a00 <vPortSetupTimerInterrupt+0x44>)
 80069da:	3b01      	subs	r3, #1
 80069dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069de:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069e0:	2207      	movs	r2, #7
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	e000e010 	.word	0xe000e010
 80069f4:	e000e018 	.word	0xe000e018
 80069f8:	20000000 	.word	0x20000000
 80069fc:	10624dd3 	.word	0x10624dd3
 8006a00:	e000e014 	.word	0xe000e014

08006a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006a14 <vPortEnableVFP+0x10>
 8006a08:	6801      	ldr	r1, [r0, #0]
 8006a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006a0e:	6001      	str	r1, [r0, #0]
 8006a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a12:	bf00      	nop
 8006a14:	e000ed88 	.word	0xe000ed88

08006a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a1e:	f3ef 8305 	mrs	r3, IPSR
 8006a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b0f      	cmp	r3, #15
 8006a28:	d915      	bls.n	8006a56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a2a:	4a18      	ldr	r2, [pc, #96]	@ (8006a8c <vPortValidateInterruptPriority+0x74>)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a34:	4b16      	ldr	r3, [pc, #88]	@ (8006a90 <vPortValidateInterruptPriority+0x78>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	7afa      	ldrb	r2, [r7, #11]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20b      	bcs.n	8006a56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	607b      	str	r3, [r7, #4]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a56:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <vPortValidateInterruptPriority+0x7c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <vPortValidateInterruptPriority+0x80>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d90b      	bls.n	8006a7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <vPortValidateInterruptPriority+0x62>
	}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	e000e3f0 	.word	0xe000e3f0
 8006a90:	2000057c 	.word	0x2000057c
 8006a94:	e000ed0c 	.word	0xe000ed0c
 8006a98:	20000580 	.word	0x20000580

08006a9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	@ 0x28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa8:	f7fe ff00 	bl	80058ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aac:	4b5c      	ldr	r3, [pc, #368]	@ (8006c20 <pvPortMalloc+0x184>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ab4:	f000 f924 	bl	8006d00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8006c24 <pvPortMalloc+0x188>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 8095 	bne.w	8006bf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01e      	beq.n	8006b0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006acc:	2208      	movs	r2, #8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d015      	beq.n	8006b0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f023 0307 	bic.w	r3, r3, #7
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <pvPortMalloc+0x6e>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	617b      	str	r3, [r7, #20]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d06f      	beq.n	8006bf0 <pvPortMalloc+0x154>
 8006b10:	4b45      	ldr	r3, [pc, #276]	@ (8006c28 <pvPortMalloc+0x18c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d86a      	bhi.n	8006bf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b1a:	4b44      	ldr	r3, [pc, #272]	@ (8006c2c <pvPortMalloc+0x190>)
 8006b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b1e:	4b43      	ldr	r3, [pc, #268]	@ (8006c2c <pvPortMalloc+0x190>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b24:	e004      	b.n	8006b30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d903      	bls.n	8006b42 <pvPortMalloc+0xa6>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f1      	bne.n	8006b26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b42:	4b37      	ldr	r3, [pc, #220]	@ (8006c20 <pvPortMalloc+0x184>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d051      	beq.n	8006bf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2208      	movs	r2, #8
 8006b52:	4413      	add	r3, r2
 8006b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	2308      	movs	r3, #8
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d920      	bls.n	8006bb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4413      	add	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <pvPortMalloc+0xfc>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006baa:	69b8      	ldr	r0, [r7, #24]
 8006bac:	f000 f90a 	bl	8006dc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c28 <pvPortMalloc+0x18c>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	4a1b      	ldr	r2, [pc, #108]	@ (8006c28 <pvPortMalloc+0x18c>)
 8006bbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006c28 <pvPortMalloc+0x18c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c30 <pvPortMalloc+0x194>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d203      	bcs.n	8006bd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bca:	4b17      	ldr	r3, [pc, #92]	@ (8006c28 <pvPortMalloc+0x18c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a18      	ldr	r2, [pc, #96]	@ (8006c30 <pvPortMalloc+0x194>)
 8006bd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	4b13      	ldr	r3, [pc, #76]	@ (8006c24 <pvPortMalloc+0x188>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006be6:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <pvPortMalloc+0x198>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	4a11      	ldr	r2, [pc, #68]	@ (8006c34 <pvPortMalloc+0x198>)
 8006bee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bf0:	f7fe fe6a 	bl	80058c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <pvPortMalloc+0x17a>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <pvPortMalloc+0x176>
	return pvReturn;
 8006c16:	69fb      	ldr	r3, [r7, #28]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	@ 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	2000418c 	.word	0x2000418c
 8006c24:	200041a0 	.word	0x200041a0
 8006c28:	20004190 	.word	0x20004190
 8006c2c:	20004184 	.word	0x20004184
 8006c30:	20004194 	.word	0x20004194
 8006c34:	20004198 	.word	0x20004198

08006c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d04f      	beq.n	8006cea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	425b      	negs	r3, r3
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4413      	add	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b25      	ldr	r3, [pc, #148]	@ (8006cf4 <vPortFree+0xbc>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <vPortFree+0x46>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60fb      	str	r3, [r7, #12]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <vPortFree+0x66>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	60bb      	str	r3, [r7, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <vPortFree+0xbc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01e      	beq.n	8006cea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11a      	bne.n	8006cea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <vPortFree+0xbc>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cc4:	f7fe fdf2 	bl	80058ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <vPortFree+0xc0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	4a09      	ldr	r2, [pc, #36]	@ (8006cf8 <vPortFree+0xc0>)
 8006cd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cd6:	6938      	ldr	r0, [r7, #16]
 8006cd8:	f000 f874 	bl	8006dc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cdc:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <vPortFree+0xc4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	4a06      	ldr	r2, [pc, #24]	@ (8006cfc <vPortFree+0xc4>)
 8006ce4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ce6:	f7fe fdef 	bl	80058c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200041a0 	.word	0x200041a0
 8006cf8:	20004190 	.word	0x20004190
 8006cfc:	2000419c 	.word	0x2000419c

08006d00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006d0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d0c:	4b27      	ldr	r3, [pc, #156]	@ (8006dac <prvHeapInit+0xac>)
 8006d0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00c      	beq.n	8006d34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dac <prvHeapInit+0xac>)
 8006d30:	4413      	add	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d38:	4a1d      	ldr	r2, [pc, #116]	@ (8006db0 <prvHeapInit+0xb0>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006db0 <prvHeapInit+0xb0>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	4413      	add	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <prvHeapInit+0xb4>)
 8006d60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d62:	4b14      	ldr	r3, [pc, #80]	@ (8006db4 <prvHeapInit+0xb4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d6a:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <prvHeapInit+0xb4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d80:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <prvHeapInit+0xb4>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <prvHeapInit+0xb8>)
 8006d8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a09      	ldr	r2, [pc, #36]	@ (8006dbc <prvHeapInit+0xbc>)
 8006d96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d98:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <prvHeapInit+0xc0>)
 8006d9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d9e:	601a      	str	r2, [r3, #0]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	20000584 	.word	0x20000584
 8006db0:	20004184 	.word	0x20004184
 8006db4:	2000418c 	.word	0x2000418c
 8006db8:	20004194 	.word	0x20004194
 8006dbc:	20004190 	.word	0x20004190
 8006dc0:	200041a0 	.word	0x200041a0

08006dc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dcc:	4b28      	ldr	r3, [pc, #160]	@ (8006e70 <prvInsertBlockIntoFreeList+0xac>)
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e002      	b.n	8006dd8 <prvInsertBlockIntoFreeList+0x14>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d8f7      	bhi.n	8006dd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d108      	bne.n	8006e06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	441a      	add	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d118      	bne.n	8006e4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <prvInsertBlockIntoFreeList+0xb0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d00d      	beq.n	8006e42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	441a      	add	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e008      	b.n	8006e54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e42:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <prvInsertBlockIntoFreeList+0xb0>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e003      	b.n	8006e54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d002      	beq.n	8006e62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20004184 	.word	0x20004184
 8006e74:	2000418c 	.word	0x2000418c

08006e78 <std>:
 8006e78:	2300      	movs	r3, #0
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e86:	6083      	str	r3, [r0, #8]
 8006e88:	8181      	strh	r1, [r0, #12]
 8006e8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e8c:	81c2      	strh	r2, [r0, #14]
 8006e8e:	6183      	str	r3, [r0, #24]
 8006e90:	4619      	mov	r1, r3
 8006e92:	2208      	movs	r2, #8
 8006e94:	305c      	adds	r0, #92	@ 0x5c
 8006e96:	f000 f906 	bl	80070a6 <memset>
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <std+0x58>)
 8006e9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <std+0x5c>)
 8006ea0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <std+0x60>)
 8006ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x64>)
 8006ea8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x68>)
 8006eac:	6224      	str	r4, [r4, #32]
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d006      	beq.n	8006ec0 <std+0x48>
 8006eb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eb6:	4294      	cmp	r4, r2
 8006eb8:	d002      	beq.n	8006ec0 <std+0x48>
 8006eba:	33d0      	adds	r3, #208	@ 0xd0
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	d105      	bne.n	8006ecc <std+0x54>
 8006ec0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f000 b966 	b.w	8007198 <__retarget_lock_init_recursive>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	08007021 	.word	0x08007021
 8006ed4:	08007043 	.word	0x08007043
 8006ed8:	0800707b 	.word	0x0800707b
 8006edc:	0800709f 	.word	0x0800709f
 8006ee0:	200041a4 	.word	0x200041a4

08006ee4 <stdio_exit_handler>:
 8006ee4:	4a02      	ldr	r2, [pc, #8]	@ (8006ef0 <stdio_exit_handler+0xc>)
 8006ee6:	4903      	ldr	r1, [pc, #12]	@ (8006ef4 <stdio_exit_handler+0x10>)
 8006ee8:	4803      	ldr	r0, [pc, #12]	@ (8006ef8 <stdio_exit_handler+0x14>)
 8006eea:	f000 b869 	b.w	8006fc0 <_fwalk_sglue>
 8006eee:	bf00      	nop
 8006ef0:	20000010 	.word	0x20000010
 8006ef4:	08007a55 	.word	0x08007a55
 8006ef8:	20000020 	.word	0x20000020

08006efc <cleanup_stdio>:
 8006efc:	6841      	ldr	r1, [r0, #4]
 8006efe:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <cleanup_stdio+0x34>)
 8006f00:	4299      	cmp	r1, r3
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	d001      	beq.n	8006f0c <cleanup_stdio+0x10>
 8006f08:	f000 fda4 	bl	8007a54 <_fflush_r>
 8006f0c:	68a1      	ldr	r1, [r4, #8]
 8006f0e:	4b09      	ldr	r3, [pc, #36]	@ (8006f34 <cleanup_stdio+0x38>)
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <cleanup_stdio+0x1e>
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 fd9d 	bl	8007a54 <_fflush_r>
 8006f1a:	68e1      	ldr	r1, [r4, #12]
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <cleanup_stdio+0x3c>)
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d004      	beq.n	8006f2c <cleanup_stdio+0x30>
 8006f22:	4620      	mov	r0, r4
 8006f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f28:	f000 bd94 	b.w	8007a54 <_fflush_r>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	bf00      	nop
 8006f30:	200041a4 	.word	0x200041a4
 8006f34:	2000420c 	.word	0x2000420c
 8006f38:	20004274 	.word	0x20004274

08006f3c <global_stdio_init.part.0>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f6c <global_stdio_init.part.0+0x30>)
 8006f40:	4c0b      	ldr	r4, [pc, #44]	@ (8006f70 <global_stdio_init.part.0+0x34>)
 8006f42:	4a0c      	ldr	r2, [pc, #48]	@ (8006f74 <global_stdio_init.part.0+0x38>)
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	4620      	mov	r0, r4
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	f7ff ff94 	bl	8006e78 <std>
 8006f50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f54:	2201      	movs	r2, #1
 8006f56:	2109      	movs	r1, #9
 8006f58:	f7ff ff8e 	bl	8006e78 <std>
 8006f5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f60:	2202      	movs	r2, #2
 8006f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f66:	2112      	movs	r1, #18
 8006f68:	f7ff bf86 	b.w	8006e78 <std>
 8006f6c:	200042dc 	.word	0x200042dc
 8006f70:	200041a4 	.word	0x200041a4
 8006f74:	08006ee5 	.word	0x08006ee5

08006f78 <__sfp_lock_acquire>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__sfp_lock_acquire+0x8>)
 8006f7a:	f000 b90e 	b.w	800719a <__retarget_lock_acquire_recursive>
 8006f7e:	bf00      	nop
 8006f80:	200042e5 	.word	0x200042e5

08006f84 <__sfp_lock_release>:
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <__sfp_lock_release+0x8>)
 8006f86:	f000 b909 	b.w	800719c <__retarget_lock_release_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	200042e5 	.word	0x200042e5

08006f90 <__sinit>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4604      	mov	r4, r0
 8006f94:	f7ff fff0 	bl	8006f78 <__sfp_lock_acquire>
 8006f98:	6a23      	ldr	r3, [r4, #32]
 8006f9a:	b11b      	cbz	r3, 8006fa4 <__sinit+0x14>
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa0:	f7ff bff0 	b.w	8006f84 <__sfp_lock_release>
 8006fa4:	4b04      	ldr	r3, [pc, #16]	@ (8006fb8 <__sinit+0x28>)
 8006fa6:	6223      	str	r3, [r4, #32]
 8006fa8:	4b04      	ldr	r3, [pc, #16]	@ (8006fbc <__sinit+0x2c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f5      	bne.n	8006f9c <__sinit+0xc>
 8006fb0:	f7ff ffc4 	bl	8006f3c <global_stdio_init.part.0>
 8006fb4:	e7f2      	b.n	8006f9c <__sinit+0xc>
 8006fb6:	bf00      	nop
 8006fb8:	08006efd 	.word	0x08006efd
 8006fbc:	200042dc 	.word	0x200042dc

08006fc0 <_fwalk_sglue>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	4688      	mov	r8, r1
 8006fc8:	4614      	mov	r4, r2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd4:	d505      	bpl.n	8006fe2 <_fwalk_sglue+0x22>
 8006fd6:	6824      	ldr	r4, [r4, #0]
 8006fd8:	2c00      	cmp	r4, #0
 8006fda:	d1f7      	bne.n	8006fcc <_fwalk_sglue+0xc>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d907      	bls.n	8006ff8 <_fwalk_sglue+0x38>
 8006fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fec:	3301      	adds	r3, #1
 8006fee:	d003      	beq.n	8006ff8 <_fwalk_sglue+0x38>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	47c0      	blx	r8
 8006ff6:	4306      	orrs	r6, r0
 8006ff8:	3568      	adds	r5, #104	@ 0x68
 8006ffa:	e7e9      	b.n	8006fd0 <_fwalk_sglue+0x10>

08006ffc <iprintf>:
 8006ffc:	b40f      	push	{r0, r1, r2, r3}
 8006ffe:	b507      	push	{r0, r1, r2, lr}
 8007000:	4906      	ldr	r1, [pc, #24]	@ (800701c <iprintf+0x20>)
 8007002:	ab04      	add	r3, sp, #16
 8007004:	6808      	ldr	r0, [r1, #0]
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	6881      	ldr	r1, [r0, #8]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	f000 f9f7 	bl	8007400 <_vfiprintf_r>
 8007012:	b003      	add	sp, #12
 8007014:	f85d eb04 	ldr.w	lr, [sp], #4
 8007018:	b004      	add	sp, #16
 800701a:	4770      	bx	lr
 800701c:	2000001c 	.word	0x2000001c

08007020 <__sread>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	f000 f868 	bl	80070fc <_read_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	bfab      	itete	ge
 8007030:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007032:	89a3      	ldrhlt	r3, [r4, #12]
 8007034:	181b      	addge	r3, r3, r0
 8007036:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800703a:	bfac      	ite	ge
 800703c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800703e:	81a3      	strhlt	r3, [r4, #12]
 8007040:	bd10      	pop	{r4, pc}

08007042 <__swrite>:
 8007042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	461f      	mov	r7, r3
 8007048:	898b      	ldrh	r3, [r1, #12]
 800704a:	05db      	lsls	r3, r3, #23
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d505      	bpl.n	8007060 <__swrite+0x1e>
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	2302      	movs	r3, #2
 800705a:	2200      	movs	r2, #0
 800705c:	f000 f83c 	bl	80070d8 <_lseek_r>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	4632      	mov	r2, r6
 800706e:	463b      	mov	r3, r7
 8007070:	4628      	mov	r0, r5
 8007072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	f000 b853 	b.w	8007120 <_write_r>

0800707a <__sseek>:
 800707a:	b510      	push	{r4, lr}
 800707c:	460c      	mov	r4, r1
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 f829 	bl	80070d8 <_lseek_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	bf15      	itete	ne
 800708c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800708e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007092:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007096:	81a3      	strheq	r3, [r4, #12]
 8007098:	bf18      	it	ne
 800709a:	81a3      	strhne	r3, [r4, #12]
 800709c:	bd10      	pop	{r4, pc}

0800709e <__sclose>:
 800709e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a2:	f000 b809 	b.w	80070b8 <_close_r>

080070a6 <memset>:
 80070a6:	4402      	add	r2, r0
 80070a8:	4603      	mov	r3, r0
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d100      	bne.n	80070b0 <memset+0xa>
 80070ae:	4770      	bx	lr
 80070b0:	f803 1b01 	strb.w	r1, [r3], #1
 80070b4:	e7f9      	b.n	80070aa <memset+0x4>
	...

080070b8 <_close_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_close_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fb f997 	bl	80023f6 <_close>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_close_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_close_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	200042e0 	.word	0x200042e0

080070d8 <_lseek_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	@ (80070f8 <_lseek_r+0x20>)
 80070dc:	4604      	mov	r4, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fb f9ac 	bl	8002444 <_lseek>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_lseek_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_lseek_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	200042e0 	.word	0x200042e0

080070fc <_read_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d07      	ldr	r5, [pc, #28]	@ (800711c <_read_r+0x20>)
 8007100:	4604      	mov	r4, r0
 8007102:	4608      	mov	r0, r1
 8007104:	4611      	mov	r1, r2
 8007106:	2200      	movs	r2, #0
 8007108:	602a      	str	r2, [r5, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	f7fb f956 	bl	80023bc <_read>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_read_r+0x1e>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_read_r+0x1e>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200042e0 	.word	0x200042e0

08007120 <_write_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	@ (8007140 <_write_r+0x20>)
 8007124:	4604      	mov	r4, r0
 8007126:	4608      	mov	r0, r1
 8007128:	4611      	mov	r1, r2
 800712a:	2200      	movs	r2, #0
 800712c:	602a      	str	r2, [r5, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f7fa fb0e 	bl	8001750 <_write>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d102      	bne.n	800713e <_write_r+0x1e>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	b103      	cbz	r3, 800713e <_write_r+0x1e>
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	bd38      	pop	{r3, r4, r5, pc}
 8007140:	200042e0 	.word	0x200042e0

08007144 <__errno>:
 8007144:	4b01      	ldr	r3, [pc, #4]	@ (800714c <__errno+0x8>)
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2000001c 	.word	0x2000001c

08007150 <__libc_init_array>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	4d0d      	ldr	r5, [pc, #52]	@ (8007188 <__libc_init_array+0x38>)
 8007154:	4c0d      	ldr	r4, [pc, #52]	@ (800718c <__libc_init_array+0x3c>)
 8007156:	1b64      	subs	r4, r4, r5
 8007158:	10a4      	asrs	r4, r4, #2
 800715a:	2600      	movs	r6, #0
 800715c:	42a6      	cmp	r6, r4
 800715e:	d109      	bne.n	8007174 <__libc_init_array+0x24>
 8007160:	4d0b      	ldr	r5, [pc, #44]	@ (8007190 <__libc_init_array+0x40>)
 8007162:	4c0c      	ldr	r4, [pc, #48]	@ (8007194 <__libc_init_array+0x44>)
 8007164:	f000 fdc6 	bl	8007cf4 <_init>
 8007168:	1b64      	subs	r4, r4, r5
 800716a:	10a4      	asrs	r4, r4, #2
 800716c:	2600      	movs	r6, #0
 800716e:	42a6      	cmp	r6, r4
 8007170:	d105      	bne.n	800717e <__libc_init_array+0x2e>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	f855 3b04 	ldr.w	r3, [r5], #4
 8007178:	4798      	blx	r3
 800717a:	3601      	adds	r6, #1
 800717c:	e7ee      	b.n	800715c <__libc_init_array+0xc>
 800717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007182:	4798      	blx	r3
 8007184:	3601      	adds	r6, #1
 8007186:	e7f2      	b.n	800716e <__libc_init_array+0x1e>
 8007188:	08007f40 	.word	0x08007f40
 800718c:	08007f40 	.word	0x08007f40
 8007190:	08007f40 	.word	0x08007f40
 8007194:	08007f44 	.word	0x08007f44

08007198 <__retarget_lock_init_recursive>:
 8007198:	4770      	bx	lr

0800719a <__retarget_lock_acquire_recursive>:
 800719a:	4770      	bx	lr

0800719c <__retarget_lock_release_recursive>:
 800719c:	4770      	bx	lr

0800719e <memcpy>:
 800719e:	440a      	add	r2, r1
 80071a0:	4291      	cmp	r1, r2
 80071a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80071a6:	d100      	bne.n	80071aa <memcpy+0xc>
 80071a8:	4770      	bx	lr
 80071aa:	b510      	push	{r4, lr}
 80071ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b4:	4291      	cmp	r1, r2
 80071b6:	d1f9      	bne.n	80071ac <memcpy+0xe>
 80071b8:	bd10      	pop	{r4, pc}
	...

080071bc <_free_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4605      	mov	r5, r0
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d041      	beq.n	8007248 <_free_r+0x8c>
 80071c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c8:	1f0c      	subs	r4, r1, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfb8      	it	lt
 80071ce:	18e4      	addlt	r4, r4, r3
 80071d0:	f000 f8e0 	bl	8007394 <__malloc_lock>
 80071d4:	4a1d      	ldr	r2, [pc, #116]	@ (800724c <_free_r+0x90>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	b933      	cbnz	r3, 80071e8 <_free_r+0x2c>
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	6014      	str	r4, [r2, #0]
 80071de:	4628      	mov	r0, r5
 80071e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e4:	f000 b8dc 	b.w	80073a0 <__malloc_unlock>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d908      	bls.n	80071fe <_free_r+0x42>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	1821      	adds	r1, r4, r0
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf01      	itttt	eq
 80071f4:	6819      	ldreq	r1, [r3, #0]
 80071f6:	685b      	ldreq	r3, [r3, #4]
 80071f8:	1809      	addeq	r1, r1, r0
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	e7ed      	b.n	80071da <_free_r+0x1e>
 80071fe:	461a      	mov	r2, r3
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b10b      	cbz	r3, 8007208 <_free_r+0x4c>
 8007204:	42a3      	cmp	r3, r4
 8007206:	d9fa      	bls.n	80071fe <_free_r+0x42>
 8007208:	6811      	ldr	r1, [r2, #0]
 800720a:	1850      	adds	r0, r2, r1
 800720c:	42a0      	cmp	r0, r4
 800720e:	d10b      	bne.n	8007228 <_free_r+0x6c>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	4401      	add	r1, r0
 8007214:	1850      	adds	r0, r2, r1
 8007216:	4283      	cmp	r3, r0
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	d1e0      	bne.n	80071de <_free_r+0x22>
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	6053      	str	r3, [r2, #4]
 8007222:	4408      	add	r0, r1
 8007224:	6010      	str	r0, [r2, #0]
 8007226:	e7da      	b.n	80071de <_free_r+0x22>
 8007228:	d902      	bls.n	8007230 <_free_r+0x74>
 800722a:	230c      	movs	r3, #12
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	e7d6      	b.n	80071de <_free_r+0x22>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf04      	itt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	bf04      	itt	eq
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	6054      	str	r4, [r2, #4]
 8007246:	e7ca      	b.n	80071de <_free_r+0x22>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	200042ec 	.word	0x200042ec

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0f      	ldr	r6, [pc, #60]	@ (8007290 <sbrk_aligned+0x40>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 fcb6 	bl	8007bcc <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fcb1 	bl	8007bcc <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d103      	bne.n	8007276 <sbrk_aligned+0x26>
 800726e:	f04f 34ff 	mov.w	r4, #4294967295
 8007272:	4620      	mov	r0, r4
 8007274:	bd70      	pop	{r4, r5, r6, pc}
 8007276:	1cc4      	adds	r4, r0, #3
 8007278:	f024 0403 	bic.w	r4, r4, #3
 800727c:	42a0      	cmp	r0, r4
 800727e:	d0f8      	beq.n	8007272 <sbrk_aligned+0x22>
 8007280:	1a21      	subs	r1, r4, r0
 8007282:	4628      	mov	r0, r5
 8007284:	f000 fca2 	bl	8007bcc <_sbrk_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d1f2      	bne.n	8007272 <sbrk_aligned+0x22>
 800728c:	e7ef      	b.n	800726e <sbrk_aligned+0x1e>
 800728e:	bf00      	nop
 8007290:	200042e8 	.word	0x200042e8

08007294 <_malloc_r>:
 8007294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007298:	1ccd      	adds	r5, r1, #3
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	4606      	mov	r6, r0
 80072aa:	db01      	blt.n	80072b0 <_malloc_r+0x1c>
 80072ac:	42a9      	cmp	r1, r5
 80072ae:	d904      	bls.n	80072ba <_malloc_r+0x26>
 80072b0:	230c      	movs	r3, #12
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007390 <_malloc_r+0xfc>
 80072be:	f000 f869 	bl	8007394 <__malloc_lock>
 80072c2:	f8d8 3000 	ldr.w	r3, [r8]
 80072c6:	461c      	mov	r4, r3
 80072c8:	bb44      	cbnz	r4, 800731c <_malloc_r+0x88>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffbf 	bl	8007250 <sbrk_aligned>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	4604      	mov	r4, r0
 80072d6:	d158      	bne.n	800738a <_malloc_r+0xf6>
 80072d8:	f8d8 4000 	ldr.w	r4, [r8]
 80072dc:	4627      	mov	r7, r4
 80072de:	2f00      	cmp	r7, #0
 80072e0:	d143      	bne.n	800736a <_malloc_r+0xd6>
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d04b      	beq.n	800737e <_malloc_r+0xea>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	4639      	mov	r1, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	eb04 0903 	add.w	r9, r4, r3
 80072f0:	f000 fc6c 	bl	8007bcc <_sbrk_r>
 80072f4:	4581      	cmp	r9, r0
 80072f6:	d142      	bne.n	800737e <_malloc_r+0xea>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	1a6d      	subs	r5, r5, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffa6 	bl	8007250 <sbrk_aligned>
 8007304:	3001      	adds	r0, #1
 8007306:	d03a      	beq.n	800737e <_malloc_r+0xea>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	442b      	add	r3, r5
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	f8d8 3000 	ldr.w	r3, [r8]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	bb62      	cbnz	r2, 8007370 <_malloc_r+0xdc>
 8007316:	f8c8 7000 	str.w	r7, [r8]
 800731a:	e00f      	b.n	800733c <_malloc_r+0xa8>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	1b52      	subs	r2, r2, r5
 8007320:	d420      	bmi.n	8007364 <_malloc_r+0xd0>
 8007322:	2a0b      	cmp	r2, #11
 8007324:	d917      	bls.n	8007356 <_malloc_r+0xc2>
 8007326:	1961      	adds	r1, r4, r5
 8007328:	42a3      	cmp	r3, r4
 800732a:	6025      	str	r5, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	6059      	strne	r1, [r3, #4]
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	bf08      	it	eq
 8007334:	f8c8 1000 	streq.w	r1, [r8]
 8007338:	5162      	str	r2, [r4, r5]
 800733a:	604b      	str	r3, [r1, #4]
 800733c:	4630      	mov	r0, r6
 800733e:	f000 f82f 	bl	80073a0 <__malloc_unlock>
 8007342:	f104 000b 	add.w	r0, r4, #11
 8007346:	1d23      	adds	r3, r4, #4
 8007348:	f020 0007 	bic.w	r0, r0, #7
 800734c:	1ac2      	subs	r2, r0, r3
 800734e:	bf1c      	itt	ne
 8007350:	1a1b      	subne	r3, r3, r0
 8007352:	50a3      	strne	r3, [r4, r2]
 8007354:	e7af      	b.n	80072b6 <_malloc_r+0x22>
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	42a3      	cmp	r3, r4
 800735a:	bf0c      	ite	eq
 800735c:	f8c8 2000 	streq.w	r2, [r8]
 8007360:	605a      	strne	r2, [r3, #4]
 8007362:	e7eb      	b.n	800733c <_malloc_r+0xa8>
 8007364:	4623      	mov	r3, r4
 8007366:	6864      	ldr	r4, [r4, #4]
 8007368:	e7ae      	b.n	80072c8 <_malloc_r+0x34>
 800736a:	463c      	mov	r4, r7
 800736c:	687f      	ldr	r7, [r7, #4]
 800736e:	e7b6      	b.n	80072de <_malloc_r+0x4a>
 8007370:	461a      	mov	r2, r3
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	d1fb      	bne.n	8007370 <_malloc_r+0xdc>
 8007378:	2300      	movs	r3, #0
 800737a:	6053      	str	r3, [r2, #4]
 800737c:	e7de      	b.n	800733c <_malloc_r+0xa8>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	4630      	mov	r0, r6
 8007384:	f000 f80c 	bl	80073a0 <__malloc_unlock>
 8007388:	e794      	b.n	80072b4 <_malloc_r+0x20>
 800738a:	6005      	str	r5, [r0, #0]
 800738c:	e7d6      	b.n	800733c <_malloc_r+0xa8>
 800738e:	bf00      	nop
 8007390:	200042ec 	.word	0x200042ec

08007394 <__malloc_lock>:
 8007394:	4801      	ldr	r0, [pc, #4]	@ (800739c <__malloc_lock+0x8>)
 8007396:	f7ff bf00 	b.w	800719a <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	200042e4 	.word	0x200042e4

080073a0 <__malloc_unlock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__malloc_unlock+0x8>)
 80073a2:	f7ff befb 	b.w	800719c <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	200042e4 	.word	0x200042e4

080073ac <__sfputc_r>:
 80073ac:	6893      	ldr	r3, [r2, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	b410      	push	{r4}
 80073b4:	6093      	str	r3, [r2, #8]
 80073b6:	da08      	bge.n	80073ca <__sfputc_r+0x1e>
 80073b8:	6994      	ldr	r4, [r2, #24]
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	db01      	blt.n	80073c2 <__sfputc_r+0x16>
 80073be:	290a      	cmp	r1, #10
 80073c0:	d103      	bne.n	80073ca <__sfputc_r+0x1e>
 80073c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c6:	f000 bb6d 	b.w	8007aa4 <__swbuf_r>
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	1c58      	adds	r0, r3, #1
 80073ce:	6010      	str	r0, [r2, #0]
 80073d0:	7019      	strb	r1, [r3, #0]
 80073d2:	4608      	mov	r0, r1
 80073d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d8:	4770      	bx	lr

080073da <__sfputs_r>:
 80073da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	18d5      	adds	r5, r2, r3
 80073e4:	42ac      	cmp	r4, r5
 80073e6:	d101      	bne.n	80073ec <__sfputs_r+0x12>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e007      	b.n	80073fc <__sfputs_r+0x22>
 80073ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f0:	463a      	mov	r2, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7ff ffda 	bl	80073ac <__sfputc_r>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d1f3      	bne.n	80073e4 <__sfputs_r+0xa>
 80073fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007400 <_vfiprintf_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	460d      	mov	r5, r1
 8007406:	b09d      	sub	sp, #116	@ 0x74
 8007408:	4614      	mov	r4, r2
 800740a:	4698      	mov	r8, r3
 800740c:	4606      	mov	r6, r0
 800740e:	b118      	cbz	r0, 8007418 <_vfiprintf_r+0x18>
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b90b      	cbnz	r3, 8007418 <_vfiprintf_r+0x18>
 8007414:	f7ff fdbc 	bl	8006f90 <__sinit>
 8007418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800741a:	07d9      	lsls	r1, r3, #31
 800741c:	d405      	bmi.n	800742a <_vfiprintf_r+0x2a>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	059a      	lsls	r2, r3, #22
 8007422:	d402      	bmi.n	800742a <_vfiprintf_r+0x2a>
 8007424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007426:	f7ff feb8 	bl	800719a <__retarget_lock_acquire_recursive>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	071b      	lsls	r3, r3, #28
 800742e:	d501      	bpl.n	8007434 <_vfiprintf_r+0x34>
 8007430:	692b      	ldr	r3, [r5, #16]
 8007432:	b99b      	cbnz	r3, 800745c <_vfiprintf_r+0x5c>
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f000 fb72 	bl	8007b20 <__swsetup_r>
 800743c:	b170      	cbz	r0, 800745c <_vfiprintf_r+0x5c>
 800743e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007440:	07dc      	lsls	r4, r3, #31
 8007442:	d504      	bpl.n	800744e <_vfiprintf_r+0x4e>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	0598      	lsls	r0, r3, #22
 8007452:	d4f7      	bmi.n	8007444 <_vfiprintf_r+0x44>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7ff fea1 	bl	800719c <__retarget_lock_release_recursive>
 800745a:	e7f3      	b.n	8007444 <_vfiprintf_r+0x44>
 800745c:	2300      	movs	r3, #0
 800745e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007460:	2320      	movs	r3, #32
 8007462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007466:	f8cd 800c 	str.w	r8, [sp, #12]
 800746a:	2330      	movs	r3, #48	@ 0x30
 800746c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800761c <_vfiprintf_r+0x21c>
 8007470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007474:	f04f 0901 	mov.w	r9, #1
 8007478:	4623      	mov	r3, r4
 800747a:	469a      	mov	sl, r3
 800747c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007480:	b10a      	cbz	r2, 8007486 <_vfiprintf_r+0x86>
 8007482:	2a25      	cmp	r2, #37	@ 0x25
 8007484:	d1f9      	bne.n	800747a <_vfiprintf_r+0x7a>
 8007486:	ebba 0b04 	subs.w	fp, sl, r4
 800748a:	d00b      	beq.n	80074a4 <_vfiprintf_r+0xa4>
 800748c:	465b      	mov	r3, fp
 800748e:	4622      	mov	r2, r4
 8007490:	4629      	mov	r1, r5
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ffa1 	bl	80073da <__sfputs_r>
 8007498:	3001      	adds	r0, #1
 800749a:	f000 80a7 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 800749e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a0:	445a      	add	r2, fp
 80074a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 809f 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f04f 32ff 	mov.w	r2, #4294967295
 80074b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b8:	f10a 0a01 	add.w	sl, sl, #1
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c6:	4654      	mov	r4, sl
 80074c8:	2205      	movs	r2, #5
 80074ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ce:	4853      	ldr	r0, [pc, #332]	@ (800761c <_vfiprintf_r+0x21c>)
 80074d0:	f7f8 fe7e 	bl	80001d0 <memchr>
 80074d4:	9a04      	ldr	r2, [sp, #16]
 80074d6:	b9d8      	cbnz	r0, 8007510 <_vfiprintf_r+0x110>
 80074d8:	06d1      	lsls	r1, r2, #27
 80074da:	bf44      	itt	mi
 80074dc:	2320      	movmi	r3, #32
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	0713      	lsls	r3, r2, #28
 80074e4:	bf44      	itt	mi
 80074e6:	232b      	movmi	r3, #43	@ 0x2b
 80074e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f2:	d015      	beq.n	8007520 <_vfiprintf_r+0x120>
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	4654      	mov	r4, sl
 80074f8:	2000      	movs	r0, #0
 80074fa:	f04f 0c0a 	mov.w	ip, #10
 80074fe:	4621      	mov	r1, r4
 8007500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007504:	3b30      	subs	r3, #48	@ 0x30
 8007506:	2b09      	cmp	r3, #9
 8007508:	d94b      	bls.n	80075a2 <_vfiprintf_r+0x1a2>
 800750a:	b1b0      	cbz	r0, 800753a <_vfiprintf_r+0x13a>
 800750c:	9207      	str	r2, [sp, #28]
 800750e:	e014      	b.n	800753a <_vfiprintf_r+0x13a>
 8007510:	eba0 0308 	sub.w	r3, r0, r8
 8007514:	fa09 f303 	lsl.w	r3, r9, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	46a2      	mov	sl, r4
 800751e:	e7d2      	b.n	80074c6 <_vfiprintf_r+0xc6>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	1d19      	adds	r1, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfbb      	ittet	lt
 800752c:	425b      	neglt	r3, r3
 800752e:	f042 0202 	orrlt.w	r2, r2, #2
 8007532:	9307      	strge	r3, [sp, #28]
 8007534:	9307      	strlt	r3, [sp, #28]
 8007536:	bfb8      	it	lt
 8007538:	9204      	strlt	r2, [sp, #16]
 800753a:	7823      	ldrb	r3, [r4, #0]
 800753c:	2b2e      	cmp	r3, #46	@ 0x2e
 800753e:	d10a      	bne.n	8007556 <_vfiprintf_r+0x156>
 8007540:	7863      	ldrb	r3, [r4, #1]
 8007542:	2b2a      	cmp	r3, #42	@ 0x2a
 8007544:	d132      	bne.n	80075ac <_vfiprintf_r+0x1ac>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9203      	str	r2, [sp, #12]
 800754e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007552:	3402      	adds	r4, #2
 8007554:	9305      	str	r3, [sp, #20]
 8007556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800762c <_vfiprintf_r+0x22c>
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	2203      	movs	r2, #3
 800755e:	4650      	mov	r0, sl
 8007560:	f7f8 fe36 	bl	80001d0 <memchr>
 8007564:	b138      	cbz	r0, 8007576 <_vfiprintf_r+0x176>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	2240      	movs	r2, #64	@ 0x40
 800756e:	4082      	lsls	r2, r0
 8007570:	4313      	orrs	r3, r2
 8007572:	3401      	adds	r4, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757a:	4829      	ldr	r0, [pc, #164]	@ (8007620 <_vfiprintf_r+0x220>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007580:	2206      	movs	r2, #6
 8007582:	f7f8 fe25 	bl	80001d0 <memchr>
 8007586:	2800      	cmp	r0, #0
 8007588:	d03f      	beq.n	800760a <_vfiprintf_r+0x20a>
 800758a:	4b26      	ldr	r3, [pc, #152]	@ (8007624 <_vfiprintf_r+0x224>)
 800758c:	bb1b      	cbnz	r3, 80075d6 <_vfiprintf_r+0x1d6>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	3308      	adds	r3, #8
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759c:	443b      	add	r3, r7
 800759e:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a0:	e76a      	b.n	8007478 <_vfiprintf_r+0x78>
 80075a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a6:	460c      	mov	r4, r1
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7a8      	b.n	80074fe <_vfiprintf_r+0xfe>
 80075ac:	2300      	movs	r3, #0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4620      	mov	r0, r4
 80075ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075be:	3a30      	subs	r2, #48	@ 0x30
 80075c0:	2a09      	cmp	r2, #9
 80075c2:	d903      	bls.n	80075cc <_vfiprintf_r+0x1cc>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c6      	beq.n	8007556 <_vfiprintf_r+0x156>
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	e7c4      	b.n	8007556 <_vfiprintf_r+0x156>
 80075cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d0:	4604      	mov	r4, r0
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f0      	b.n	80075b8 <_vfiprintf_r+0x1b8>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <_vfiprintf_r+0x228>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4630      	mov	r0, r6
 80075e2:	f3af 8000 	nop.w
 80075e6:	4607      	mov	r7, r0
 80075e8:	1c78      	adds	r0, r7, #1
 80075ea:	d1d6      	bne.n	800759a <_vfiprintf_r+0x19a>
 80075ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075fa:	f7ff fdcf 	bl	800719c <__retarget_lock_release_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	065b      	lsls	r3, r3, #25
 8007602:	f53f af1f 	bmi.w	8007444 <_vfiprintf_r+0x44>
 8007606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007608:	e71e      	b.n	8007448 <_vfiprintf_r+0x48>
 800760a:	ab03      	add	r3, sp, #12
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	462a      	mov	r2, r5
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <_vfiprintf_r+0x228>)
 8007612:	a904      	add	r1, sp, #16
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f879 	bl	800770c <_printf_i>
 800761a:	e7e4      	b.n	80075e6 <_vfiprintf_r+0x1e6>
 800761c:	08007f04 	.word	0x08007f04
 8007620:	08007f0e 	.word	0x08007f0e
 8007624:	00000000 	.word	0x00000000
 8007628:	080073db 	.word	0x080073db
 800762c:	08007f0a 	.word	0x08007f0a

08007630 <_printf_common>:
 8007630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007634:	4616      	mov	r6, r2
 8007636:	4698      	mov	r8, r3
 8007638:	688a      	ldr	r2, [r1, #8]
 800763a:	690b      	ldr	r3, [r1, #16]
 800763c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007640:	4293      	cmp	r3, r2
 8007642:	bfb8      	it	lt
 8007644:	4613      	movlt	r3, r2
 8007646:	6033      	str	r3, [r6, #0]
 8007648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800764c:	4607      	mov	r7, r0
 800764e:	460c      	mov	r4, r1
 8007650:	b10a      	cbz	r2, 8007656 <_printf_common+0x26>
 8007652:	3301      	adds	r3, #1
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	0699      	lsls	r1, r3, #26
 800765a:	bf42      	ittt	mi
 800765c:	6833      	ldrmi	r3, [r6, #0]
 800765e:	3302      	addmi	r3, #2
 8007660:	6033      	strmi	r3, [r6, #0]
 8007662:	6825      	ldr	r5, [r4, #0]
 8007664:	f015 0506 	ands.w	r5, r5, #6
 8007668:	d106      	bne.n	8007678 <_printf_common+0x48>
 800766a:	f104 0a19 	add.w	sl, r4, #25
 800766e:	68e3      	ldr	r3, [r4, #12]
 8007670:	6832      	ldr	r2, [r6, #0]
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	42ab      	cmp	r3, r5
 8007676:	dc26      	bgt.n	80076c6 <_printf_common+0x96>
 8007678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	3b00      	subs	r3, #0
 8007680:	bf18      	it	ne
 8007682:	2301      	movne	r3, #1
 8007684:	0692      	lsls	r2, r2, #26
 8007686:	d42b      	bmi.n	80076e0 <_printf_common+0xb0>
 8007688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800768c:	4641      	mov	r1, r8
 800768e:	4638      	mov	r0, r7
 8007690:	47c8      	blx	r9
 8007692:	3001      	adds	r0, #1
 8007694:	d01e      	beq.n	80076d4 <_printf_common+0xa4>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	6922      	ldr	r2, [r4, #16]
 800769a:	f003 0306 	and.w	r3, r3, #6
 800769e:	2b04      	cmp	r3, #4
 80076a0:	bf02      	ittt	eq
 80076a2:	68e5      	ldreq	r5, [r4, #12]
 80076a4:	6833      	ldreq	r3, [r6, #0]
 80076a6:	1aed      	subeq	r5, r5, r3
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	bf0c      	ite	eq
 80076ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b0:	2500      	movne	r5, #0
 80076b2:	4293      	cmp	r3, r2
 80076b4:	bfc4      	itt	gt
 80076b6:	1a9b      	subgt	r3, r3, r2
 80076b8:	18ed      	addgt	r5, r5, r3
 80076ba:	2600      	movs	r6, #0
 80076bc:	341a      	adds	r4, #26
 80076be:	42b5      	cmp	r5, r6
 80076c0:	d11a      	bne.n	80076f8 <_printf_common+0xc8>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e008      	b.n	80076d8 <_printf_common+0xa8>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4652      	mov	r2, sl
 80076ca:	4641      	mov	r1, r8
 80076cc:	4638      	mov	r0, r7
 80076ce:	47c8      	blx	r9
 80076d0:	3001      	adds	r0, #1
 80076d2:	d103      	bne.n	80076dc <_printf_common+0xac>
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076dc:	3501      	adds	r5, #1
 80076de:	e7c6      	b.n	800766e <_printf_common+0x3e>
 80076e0:	18e1      	adds	r1, r4, r3
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	2030      	movs	r0, #48	@ 0x30
 80076e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ea:	4422      	add	r2, r4
 80076ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f4:	3302      	adds	r3, #2
 80076f6:	e7c7      	b.n	8007688 <_printf_common+0x58>
 80076f8:	2301      	movs	r3, #1
 80076fa:	4622      	mov	r2, r4
 80076fc:	4641      	mov	r1, r8
 80076fe:	4638      	mov	r0, r7
 8007700:	47c8      	blx	r9
 8007702:	3001      	adds	r0, #1
 8007704:	d0e6      	beq.n	80076d4 <_printf_common+0xa4>
 8007706:	3601      	adds	r6, #1
 8007708:	e7d9      	b.n	80076be <_printf_common+0x8e>
	...

0800770c <_printf_i>:
 800770c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	7e0f      	ldrb	r7, [r1, #24]
 8007712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007714:	2f78      	cmp	r7, #120	@ 0x78
 8007716:	4691      	mov	r9, r2
 8007718:	4680      	mov	r8, r0
 800771a:	460c      	mov	r4, r1
 800771c:	469a      	mov	sl, r3
 800771e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007722:	d807      	bhi.n	8007734 <_printf_i+0x28>
 8007724:	2f62      	cmp	r7, #98	@ 0x62
 8007726:	d80a      	bhi.n	800773e <_printf_i+0x32>
 8007728:	2f00      	cmp	r7, #0
 800772a:	f000 80d2 	beq.w	80078d2 <_printf_i+0x1c6>
 800772e:	2f58      	cmp	r7, #88	@ 0x58
 8007730:	f000 80b9 	beq.w	80078a6 <_printf_i+0x19a>
 8007734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800773c:	e03a      	b.n	80077b4 <_printf_i+0xa8>
 800773e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007742:	2b15      	cmp	r3, #21
 8007744:	d8f6      	bhi.n	8007734 <_printf_i+0x28>
 8007746:	a101      	add	r1, pc, #4	@ (adr r1, 800774c <_printf_i+0x40>)
 8007748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800774c:	080077a5 	.word	0x080077a5
 8007750:	080077b9 	.word	0x080077b9
 8007754:	08007735 	.word	0x08007735
 8007758:	08007735 	.word	0x08007735
 800775c:	08007735 	.word	0x08007735
 8007760:	08007735 	.word	0x08007735
 8007764:	080077b9 	.word	0x080077b9
 8007768:	08007735 	.word	0x08007735
 800776c:	08007735 	.word	0x08007735
 8007770:	08007735 	.word	0x08007735
 8007774:	08007735 	.word	0x08007735
 8007778:	080078b9 	.word	0x080078b9
 800777c:	080077e3 	.word	0x080077e3
 8007780:	08007873 	.word	0x08007873
 8007784:	08007735 	.word	0x08007735
 8007788:	08007735 	.word	0x08007735
 800778c:	080078db 	.word	0x080078db
 8007790:	08007735 	.word	0x08007735
 8007794:	080077e3 	.word	0x080077e3
 8007798:	08007735 	.word	0x08007735
 800779c:	08007735 	.word	0x08007735
 80077a0:	0800787b 	.word	0x0800787b
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6032      	str	r2, [r6, #0]
 80077ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b4:	2301      	movs	r3, #1
 80077b6:	e09d      	b.n	80078f4 <_printf_i+0x1e8>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6031      	str	r1, [r6, #0]
 80077c0:	0606      	lsls	r6, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xbc>
 80077c4:	681d      	ldr	r5, [r3, #0]
 80077c6:	e003      	b.n	80077d0 <_printf_i+0xc4>
 80077c8:	0645      	lsls	r5, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xb8>
 80077cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	da03      	bge.n	80077dc <_printf_i+0xd0>
 80077d4:	232d      	movs	r3, #45	@ 0x2d
 80077d6:	426d      	negs	r5, r5
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077dc:	4859      	ldr	r0, [pc, #356]	@ (8007944 <_printf_i+0x238>)
 80077de:	230a      	movs	r3, #10
 80077e0:	e011      	b.n	8007806 <_printf_i+0xfa>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	0608      	lsls	r0, r1, #24
 80077e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077ec:	d402      	bmi.n	80077f4 <_printf_i+0xe8>
 80077ee:	0649      	lsls	r1, r1, #25
 80077f0:	bf48      	it	mi
 80077f2:	b2ad      	uxthmi	r5, r5
 80077f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077f6:	4853      	ldr	r0, [pc, #332]	@ (8007944 <_printf_i+0x238>)
 80077f8:	6033      	str	r3, [r6, #0]
 80077fa:	bf14      	ite	ne
 80077fc:	230a      	movne	r3, #10
 80077fe:	2308      	moveq	r3, #8
 8007800:	2100      	movs	r1, #0
 8007802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007806:	6866      	ldr	r6, [r4, #4]
 8007808:	60a6      	str	r6, [r4, #8]
 800780a:	2e00      	cmp	r6, #0
 800780c:	bfa2      	ittt	ge
 800780e:	6821      	ldrge	r1, [r4, #0]
 8007810:	f021 0104 	bicge.w	r1, r1, #4
 8007814:	6021      	strge	r1, [r4, #0]
 8007816:	b90d      	cbnz	r5, 800781c <_printf_i+0x110>
 8007818:	2e00      	cmp	r6, #0
 800781a:	d04b      	beq.n	80078b4 <_printf_i+0x1a8>
 800781c:	4616      	mov	r6, r2
 800781e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007822:	fb03 5711 	mls	r7, r3, r1, r5
 8007826:	5dc7      	ldrb	r7, [r0, r7]
 8007828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800782c:	462f      	mov	r7, r5
 800782e:	42bb      	cmp	r3, r7
 8007830:	460d      	mov	r5, r1
 8007832:	d9f4      	bls.n	800781e <_printf_i+0x112>
 8007834:	2b08      	cmp	r3, #8
 8007836:	d10b      	bne.n	8007850 <_printf_i+0x144>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	07df      	lsls	r7, r3, #31
 800783c:	d508      	bpl.n	8007850 <_printf_i+0x144>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6861      	ldr	r1, [r4, #4]
 8007842:	4299      	cmp	r1, r3
 8007844:	bfde      	ittt	le
 8007846:	2330      	movle	r3, #48	@ 0x30
 8007848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800784c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007850:	1b92      	subs	r2, r2, r6
 8007852:	6122      	str	r2, [r4, #16]
 8007854:	f8cd a000 	str.w	sl, [sp]
 8007858:	464b      	mov	r3, r9
 800785a:	aa03      	add	r2, sp, #12
 800785c:	4621      	mov	r1, r4
 800785e:	4640      	mov	r0, r8
 8007860:	f7ff fee6 	bl	8007630 <_printf_common>
 8007864:	3001      	adds	r0, #1
 8007866:	d14a      	bne.n	80078fe <_printf_i+0x1f2>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	b004      	add	sp, #16
 800786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	f043 0320 	orr.w	r3, r3, #32
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	4833      	ldr	r0, [pc, #204]	@ (8007948 <_printf_i+0x23c>)
 800787c:	2778      	movs	r7, #120	@ 0x78
 800787e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6831      	ldr	r1, [r6, #0]
 8007886:	061f      	lsls	r7, r3, #24
 8007888:	f851 5b04 	ldr.w	r5, [r1], #4
 800788c:	d402      	bmi.n	8007894 <_printf_i+0x188>
 800788e:	065f      	lsls	r7, r3, #25
 8007890:	bf48      	it	mi
 8007892:	b2ad      	uxthmi	r5, r5
 8007894:	6031      	str	r1, [r6, #0]
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	bf44      	itt	mi
 800789a:	f043 0320 	orrmi.w	r3, r3, #32
 800789e:	6023      	strmi	r3, [r4, #0]
 80078a0:	b11d      	cbz	r5, 80078aa <_printf_i+0x19e>
 80078a2:	2310      	movs	r3, #16
 80078a4:	e7ac      	b.n	8007800 <_printf_i+0xf4>
 80078a6:	4827      	ldr	r0, [pc, #156]	@ (8007944 <_printf_i+0x238>)
 80078a8:	e7e9      	b.n	800787e <_printf_i+0x172>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f023 0320 	bic.w	r3, r3, #32
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	e7f6      	b.n	80078a2 <_printf_i+0x196>
 80078b4:	4616      	mov	r6, r2
 80078b6:	e7bd      	b.n	8007834 <_printf_i+0x128>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	6961      	ldr	r1, [r4, #20]
 80078be:	1d18      	adds	r0, r3, #4
 80078c0:	6030      	str	r0, [r6, #0]
 80078c2:	062e      	lsls	r6, r5, #24
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	d501      	bpl.n	80078cc <_printf_i+0x1c0>
 80078c8:	6019      	str	r1, [r3, #0]
 80078ca:	e002      	b.n	80078d2 <_printf_i+0x1c6>
 80078cc:	0668      	lsls	r0, r5, #25
 80078ce:	d5fb      	bpl.n	80078c8 <_printf_i+0x1bc>
 80078d0:	8019      	strh	r1, [r3, #0]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	4616      	mov	r6, r2
 80078d8:	e7bc      	b.n	8007854 <_printf_i+0x148>
 80078da:	6833      	ldr	r3, [r6, #0]
 80078dc:	1d1a      	adds	r2, r3, #4
 80078de:	6032      	str	r2, [r6, #0]
 80078e0:	681e      	ldr	r6, [r3, #0]
 80078e2:	6862      	ldr	r2, [r4, #4]
 80078e4:	2100      	movs	r1, #0
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7f8 fc72 	bl	80001d0 <memchr>
 80078ec:	b108      	cbz	r0, 80078f2 <_printf_i+0x1e6>
 80078ee:	1b80      	subs	r0, r0, r6
 80078f0:	6060      	str	r0, [r4, #4]
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	6123      	str	r3, [r4, #16]
 80078f6:	2300      	movs	r3, #0
 80078f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fc:	e7aa      	b.n	8007854 <_printf_i+0x148>
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	4632      	mov	r2, r6
 8007902:	4649      	mov	r1, r9
 8007904:	4640      	mov	r0, r8
 8007906:	47d0      	blx	sl
 8007908:	3001      	adds	r0, #1
 800790a:	d0ad      	beq.n	8007868 <_printf_i+0x15c>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	079b      	lsls	r3, r3, #30
 8007910:	d413      	bmi.n	800793a <_printf_i+0x22e>
 8007912:	68e0      	ldr	r0, [r4, #12]
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	4298      	cmp	r0, r3
 8007918:	bfb8      	it	lt
 800791a:	4618      	movlt	r0, r3
 800791c:	e7a6      	b.n	800786c <_printf_i+0x160>
 800791e:	2301      	movs	r3, #1
 8007920:	4632      	mov	r2, r6
 8007922:	4649      	mov	r1, r9
 8007924:	4640      	mov	r0, r8
 8007926:	47d0      	blx	sl
 8007928:	3001      	adds	r0, #1
 800792a:	d09d      	beq.n	8007868 <_printf_i+0x15c>
 800792c:	3501      	adds	r5, #1
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	9903      	ldr	r1, [sp, #12]
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	42ab      	cmp	r3, r5
 8007936:	dcf2      	bgt.n	800791e <_printf_i+0x212>
 8007938:	e7eb      	b.n	8007912 <_printf_i+0x206>
 800793a:	2500      	movs	r5, #0
 800793c:	f104 0619 	add.w	r6, r4, #25
 8007940:	e7f5      	b.n	800792e <_printf_i+0x222>
 8007942:	bf00      	nop
 8007944:	08007f15 	.word	0x08007f15
 8007948:	08007f26 	.word	0x08007f26

0800794c <__sflush_r>:
 800794c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	0716      	lsls	r6, r2, #28
 8007956:	4605      	mov	r5, r0
 8007958:	460c      	mov	r4, r1
 800795a:	d454      	bmi.n	8007a06 <__sflush_r+0xba>
 800795c:	684b      	ldr	r3, [r1, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc02      	bgt.n	8007968 <__sflush_r+0x1c>
 8007962:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd48      	ble.n	80079fa <__sflush_r+0xae>
 8007968:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800796a:	2e00      	cmp	r6, #0
 800796c:	d045      	beq.n	80079fa <__sflush_r+0xae>
 800796e:	2300      	movs	r3, #0
 8007970:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007974:	682f      	ldr	r7, [r5, #0]
 8007976:	6a21      	ldr	r1, [r4, #32]
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	d030      	beq.n	80079de <__sflush_r+0x92>
 800797c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	0759      	lsls	r1, r3, #29
 8007982:	d505      	bpl.n	8007990 <__sflush_r+0x44>
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800798a:	b10b      	cbz	r3, 8007990 <__sflush_r+0x44>
 800798c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007994:	6a21      	ldr	r1, [r4, #32]
 8007996:	4628      	mov	r0, r5
 8007998:	47b0      	blx	r6
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	d106      	bne.n	80079ae <__sflush_r+0x62>
 80079a0:	6829      	ldr	r1, [r5, #0]
 80079a2:	291d      	cmp	r1, #29
 80079a4:	d82b      	bhi.n	80079fe <__sflush_r+0xb2>
 80079a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a50 <__sflush_r+0x104>)
 80079a8:	410a      	asrs	r2, r1
 80079aa:	07d6      	lsls	r6, r2, #31
 80079ac:	d427      	bmi.n	80079fe <__sflush_r+0xb2>
 80079ae:	2200      	movs	r2, #0
 80079b0:	6062      	str	r2, [r4, #4]
 80079b2:	04d9      	lsls	r1, r3, #19
 80079b4:	6922      	ldr	r2, [r4, #16]
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	d504      	bpl.n	80079c4 <__sflush_r+0x78>
 80079ba:	1c42      	adds	r2, r0, #1
 80079bc:	d101      	bne.n	80079c2 <__sflush_r+0x76>
 80079be:	682b      	ldr	r3, [r5, #0]
 80079c0:	b903      	cbnz	r3, 80079c4 <__sflush_r+0x78>
 80079c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80079c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079c6:	602f      	str	r7, [r5, #0]
 80079c8:	b1b9      	cbz	r1, 80079fa <__sflush_r+0xae>
 80079ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079ce:	4299      	cmp	r1, r3
 80079d0:	d002      	beq.n	80079d8 <__sflush_r+0x8c>
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7ff fbf2 	bl	80071bc <_free_r>
 80079d8:	2300      	movs	r3, #0
 80079da:	6363      	str	r3, [r4, #52]	@ 0x34
 80079dc:	e00d      	b.n	80079fa <__sflush_r+0xae>
 80079de:	2301      	movs	r3, #1
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b0      	blx	r6
 80079e4:	4602      	mov	r2, r0
 80079e6:	1c50      	adds	r0, r2, #1
 80079e8:	d1c9      	bne.n	800797e <__sflush_r+0x32>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0c6      	beq.n	800797e <__sflush_r+0x32>
 80079f0:	2b1d      	cmp	r3, #29
 80079f2:	d001      	beq.n	80079f8 <__sflush_r+0xac>
 80079f4:	2b16      	cmp	r3, #22
 80079f6:	d11e      	bne.n	8007a36 <__sflush_r+0xea>
 80079f8:	602f      	str	r7, [r5, #0]
 80079fa:	2000      	movs	r0, #0
 80079fc:	e022      	b.n	8007a44 <__sflush_r+0xf8>
 80079fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	e01b      	b.n	8007a3e <__sflush_r+0xf2>
 8007a06:	690f      	ldr	r7, [r1, #16]
 8007a08:	2f00      	cmp	r7, #0
 8007a0a:	d0f6      	beq.n	80079fa <__sflush_r+0xae>
 8007a0c:	0793      	lsls	r3, r2, #30
 8007a0e:	680e      	ldr	r6, [r1, #0]
 8007a10:	bf08      	it	eq
 8007a12:	694b      	ldreq	r3, [r1, #20]
 8007a14:	600f      	str	r7, [r1, #0]
 8007a16:	bf18      	it	ne
 8007a18:	2300      	movne	r3, #0
 8007a1a:	eba6 0807 	sub.w	r8, r6, r7
 8007a1e:	608b      	str	r3, [r1, #8]
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	dde9      	ble.n	80079fa <__sflush_r+0xae>
 8007a26:	6a21      	ldr	r1, [r4, #32]
 8007a28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a2a:	4643      	mov	r3, r8
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b0      	blx	r6
 8007a32:	2800      	cmp	r0, #0
 8007a34:	dc08      	bgt.n	8007a48 <__sflush_r+0xfc>
 8007a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a48:	4407      	add	r7, r0
 8007a4a:	eba8 0800 	sub.w	r8, r8, r0
 8007a4e:	e7e7      	b.n	8007a20 <__sflush_r+0xd4>
 8007a50:	dfbffffe 	.word	0xdfbffffe

08007a54 <_fflush_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	690b      	ldr	r3, [r1, #16]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b913      	cbnz	r3, 8007a64 <_fflush_r+0x10>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	4628      	mov	r0, r5
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	b118      	cbz	r0, 8007a6e <_fflush_r+0x1a>
 8007a66:	6a03      	ldr	r3, [r0, #32]
 8007a68:	b90b      	cbnz	r3, 8007a6e <_fflush_r+0x1a>
 8007a6a:	f7ff fa91 	bl	8006f90 <__sinit>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f3      	beq.n	8007a5e <_fflush_r+0xa>
 8007a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a78:	07d0      	lsls	r0, r2, #31
 8007a7a:	d404      	bmi.n	8007a86 <_fflush_r+0x32>
 8007a7c:	0599      	lsls	r1, r3, #22
 8007a7e:	d402      	bmi.n	8007a86 <_fflush_r+0x32>
 8007a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a82:	f7ff fb8a 	bl	800719a <__retarget_lock_acquire_recursive>
 8007a86:	4628      	mov	r0, r5
 8007a88:	4621      	mov	r1, r4
 8007a8a:	f7ff ff5f 	bl	800794c <__sflush_r>
 8007a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a90:	07da      	lsls	r2, r3, #31
 8007a92:	4605      	mov	r5, r0
 8007a94:	d4e4      	bmi.n	8007a60 <_fflush_r+0xc>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	059b      	lsls	r3, r3, #22
 8007a9a:	d4e1      	bmi.n	8007a60 <_fflush_r+0xc>
 8007a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a9e:	f7ff fb7d 	bl	800719c <__retarget_lock_release_recursive>
 8007aa2:	e7dd      	b.n	8007a60 <_fflush_r+0xc>

08007aa4 <__swbuf_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	4605      	mov	r5, r0
 8007aac:	b118      	cbz	r0, 8007ab6 <__swbuf_r+0x12>
 8007aae:	6a03      	ldr	r3, [r0, #32]
 8007ab0:	b90b      	cbnz	r3, 8007ab6 <__swbuf_r+0x12>
 8007ab2:	f7ff fa6d 	bl	8006f90 <__sinit>
 8007ab6:	69a3      	ldr	r3, [r4, #24]
 8007ab8:	60a3      	str	r3, [r4, #8]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	071a      	lsls	r2, r3, #28
 8007abe:	d501      	bpl.n	8007ac4 <__swbuf_r+0x20>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	b943      	cbnz	r3, 8007ad6 <__swbuf_r+0x32>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f82a 	bl	8007b20 <__swsetup_r>
 8007acc:	b118      	cbz	r0, 8007ad6 <__swbuf_r+0x32>
 8007ace:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	1a98      	subs	r0, r3, r2
 8007adc:	6963      	ldr	r3, [r4, #20]
 8007ade:	b2f6      	uxtb	r6, r6
 8007ae0:	4283      	cmp	r3, r0
 8007ae2:	4637      	mov	r7, r6
 8007ae4:	dc05      	bgt.n	8007af2 <__swbuf_r+0x4e>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7ff ffb3 	bl	8007a54 <_fflush_r>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d1ed      	bne.n	8007ace <__swbuf_r+0x2a>
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	60a3      	str	r3, [r4, #8]
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	6022      	str	r2, [r4, #0]
 8007afe:	701e      	strb	r6, [r3, #0]
 8007b00:	6962      	ldr	r2, [r4, #20]
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d004      	beq.n	8007b12 <__swbuf_r+0x6e>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d5e1      	bpl.n	8007ad2 <__swbuf_r+0x2e>
 8007b0e:	2e0a      	cmp	r6, #10
 8007b10:	d1df      	bne.n	8007ad2 <__swbuf_r+0x2e>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f7ff ff9d 	bl	8007a54 <_fflush_r>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d0d9      	beq.n	8007ad2 <__swbuf_r+0x2e>
 8007b1e:	e7d6      	b.n	8007ace <__swbuf_r+0x2a>

08007b20 <__swsetup_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4b29      	ldr	r3, [pc, #164]	@ (8007bc8 <__swsetup_r+0xa8>)
 8007b24:	4605      	mov	r5, r0
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	460c      	mov	r4, r1
 8007b2a:	b118      	cbz	r0, 8007b34 <__swsetup_r+0x14>
 8007b2c:	6a03      	ldr	r3, [r0, #32]
 8007b2e:	b90b      	cbnz	r3, 8007b34 <__swsetup_r+0x14>
 8007b30:	f7ff fa2e 	bl	8006f90 <__sinit>
 8007b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b38:	0719      	lsls	r1, r3, #28
 8007b3a:	d422      	bmi.n	8007b82 <__swsetup_r+0x62>
 8007b3c:	06da      	lsls	r2, r3, #27
 8007b3e:	d407      	bmi.n	8007b50 <__swsetup_r+0x30>
 8007b40:	2209      	movs	r2, #9
 8007b42:	602a      	str	r2, [r5, #0]
 8007b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	e033      	b.n	8007bb8 <__swsetup_r+0x98>
 8007b50:	0758      	lsls	r0, r3, #29
 8007b52:	d512      	bpl.n	8007b7a <__swsetup_r+0x5a>
 8007b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b56:	b141      	cbz	r1, 8007b6a <__swsetup_r+0x4a>
 8007b58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d002      	beq.n	8007b66 <__swsetup_r+0x46>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f7ff fb2b 	bl	80071bc <_free_r>
 8007b66:	2300      	movs	r3, #0
 8007b68:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	2300      	movs	r3, #0
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f043 0308 	orr.w	r3, r3, #8
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	b94b      	cbnz	r3, 8007b9a <__swsetup_r+0x7a>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b90:	d003      	beq.n	8007b9a <__swsetup_r+0x7a>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 f84f 	bl	8007c38 <__smakebuf_r>
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	f013 0201 	ands.w	r2, r3, #1
 8007ba2:	d00a      	beq.n	8007bba <__swsetup_r+0x9a>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	60a2      	str	r2, [r4, #8]
 8007ba8:	6962      	ldr	r2, [r4, #20]
 8007baa:	4252      	negs	r2, r2
 8007bac:	61a2      	str	r2, [r4, #24]
 8007bae:	6922      	ldr	r2, [r4, #16]
 8007bb0:	b942      	cbnz	r2, 8007bc4 <__swsetup_r+0xa4>
 8007bb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bb6:	d1c5      	bne.n	8007b44 <__swsetup_r+0x24>
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	0799      	lsls	r1, r3, #30
 8007bbc:	bf58      	it	pl
 8007bbe:	6962      	ldrpl	r2, [r4, #20]
 8007bc0:	60a2      	str	r2, [r4, #8]
 8007bc2:	e7f4      	b.n	8007bae <__swsetup_r+0x8e>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e7f7      	b.n	8007bb8 <__swsetup_r+0x98>
 8007bc8:	2000001c 	.word	0x2000001c

08007bcc <_sbrk_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	@ (8007be8 <_sbrk_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7fa fc42 	bl	8002460 <_sbrk>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_sbrk_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_sbrk_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	200042e0 	.word	0x200042e0

08007bec <__swhatbuf_r>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	460c      	mov	r4, r1
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	b096      	sub	sp, #88	@ 0x58
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	461e      	mov	r6, r3
 8007bfc:	da0d      	bge.n	8007c1a <__swhatbuf_r+0x2e>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c04:	f04f 0100 	mov.w	r1, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2340      	movne	r3, #64	@ 0x40
 8007c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c10:	2000      	movs	r0, #0
 8007c12:	6031      	str	r1, [r6, #0]
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	b016      	add	sp, #88	@ 0x58
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	466a      	mov	r2, sp
 8007c1c:	f000 f848 	bl	8007cb0 <_fstat_r>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	dbec      	blt.n	8007bfe <__swhatbuf_r+0x12>
 8007c24:	9901      	ldr	r1, [sp, #4]
 8007c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c2e:	4259      	negs	r1, r3
 8007c30:	4159      	adcs	r1, r3
 8007c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c36:	e7eb      	b.n	8007c10 <__swhatbuf_r+0x24>

08007c38 <__smakebuf_r>:
 8007c38:	898b      	ldrh	r3, [r1, #12]
 8007c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c3c:	079d      	lsls	r5, r3, #30
 8007c3e:	4606      	mov	r6, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	d507      	bpl.n	8007c54 <__smakebuf_r+0x1c>
 8007c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	6163      	str	r3, [r4, #20]
 8007c50:	b003      	add	sp, #12
 8007c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c54:	ab01      	add	r3, sp, #4
 8007c56:	466a      	mov	r2, sp
 8007c58:	f7ff ffc8 	bl	8007bec <__swhatbuf_r>
 8007c5c:	9f00      	ldr	r7, [sp, #0]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	4639      	mov	r1, r7
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff fb16 	bl	8007294 <_malloc_r>
 8007c68:	b948      	cbnz	r0, 8007c7e <__smakebuf_r+0x46>
 8007c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6e:	059a      	lsls	r2, r3, #22
 8007c70:	d4ee      	bmi.n	8007c50 <__smakebuf_r+0x18>
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	e7e2      	b.n	8007c44 <__smakebuf_r+0xc>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	6020      	str	r0, [r4, #0]
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	9b01      	ldr	r3, [sp, #4]
 8007c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c8e:	b15b      	cbz	r3, 8007ca8 <__smakebuf_r+0x70>
 8007c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f81d 	bl	8007cd4 <_isatty_r>
 8007c9a:	b128      	cbz	r0, 8007ca8 <__smakebuf_r+0x70>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f023 0303 	bic.w	r3, r3, #3
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	431d      	orrs	r5, r3
 8007cac:	81a5      	strh	r5, [r4, #12]
 8007cae:	e7cf      	b.n	8007c50 <__smakebuf_r+0x18>

08007cb0 <_fstat_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	@ (8007cd0 <_fstat_r+0x20>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f7fa fba6 	bl	800240e <_fstat>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d102      	bne.n	8007ccc <_fstat_r+0x1c>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b103      	cbz	r3, 8007ccc <_fstat_r+0x1c>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200042e0 	.word	0x200042e0

08007cd4 <_isatty_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	@ (8007cf0 <_isatty_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7fa fba5 	bl	800242e <_isatty>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_isatty_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_isatty_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	200042e0 	.word	0x200042e0

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
