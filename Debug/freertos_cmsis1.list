
freertos_cmsis1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a0  080061a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a8  080061a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080061b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004178  20000078  08006228  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041f0  08006228  000241f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a523  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b02  00000000  00000000  0003a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  0003e0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024f55  00000000  00000000  00040748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d21  00000000  00000000  0006569d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d417d  00000000  00000000  000763be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  0014a5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f28 	.word	0x08005f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005f28 	.word	0x08005f28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

	// Enable USART3 clock
	__HAL_RCC_USART3_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <UART_Init+0x108>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <UART_Init+0x108>)
 8000694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <UART_Init+0x108>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]

	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <UART_Init+0x108>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <UART_Init+0x108>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <UART_Init+0x108>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

	// Configure USART3 TX and RX pins
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80006d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006e4:	2307      	movs	r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4828      	ldr	r0, [pc, #160]	; (8000790 <UART_Init+0x10c>)
 80006f0:	f001 fabe 	bl	8001c70 <HAL_GPIO_Init>

	// Configure USART3
	USART3->CR1 &= ~USART_CR1_UE; // Disable USART3
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <UART_Init+0x110>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <UART_Init+0x110>)
 80006fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006fe:	60d3      	str	r3, [r2, #12]

	// Communication bidirectionnelle, 8 bits de donnée, 1 bit de stop, pas de parité
	USART3->CR1 &= ~USART_CR1_M; // 8 bits de donnée
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <UART_Init+0x110>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a23      	ldr	r2, [pc, #140]	; (8000794 <UART_Init+0x110>)
 8000706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800070a:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~USART_CR1_PCE; // Pas de parité
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <UART_Init+0x110>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <UART_Init+0x110>)
 8000712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000716:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_STOP; // 1 bit de stop
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <UART_Init+0x110>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <UART_Init+0x110>)
 800071e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000722:	6113      	str	r3, [r2, #16]

	USART3->CR1 |= USART_CR1_RXNEIE; // Activate RXNIE for interruptions
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <UART_Init+0x110>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <UART_Init+0x110>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_LBDL; // 10 bits for break
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <UART_Init+0x110>)
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <UART_Init+0x110>)
 8000736:	f023 0320 	bic.w	r3, r3, #32
 800073a:	6113      	str	r3, [r2, #16]
	// Vitesse de communication de 9600bauds et oversampling à 16
	// BRR = fclk / (16 * baudrate)
	// Ici, fclk = 84MHz, baudrate = 9600
	// BRR = 84MHz / (16 * 9600) = 546.875
	// Integer part = 546, Fractional part = 0.875 * 16 = 14
	USART3->BRR = 0x00001117; // 273d (546d = 0x222)
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <UART_Init+0x110>)
 800073e:	f241 1217 	movw	r2, #4375	; 0x1117
 8000742:	609a      	str	r2, [r3, #8]
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE; // Enable Tx and Rx
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <UART_Init+0x110>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <UART_Init+0x110>)
 800074a:	f043 030c 	orr.w	r3, r3, #12
 800074e:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_UE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <UART_Init+0x110>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <UART_Init+0x110>)
 8000756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075a:	60d3      	str	r3, [r2, #12]

	HAL_Delay(1); // Attente de 1ms
 800075c:	2001      	movs	r0, #1
 800075e:	f001 f983 	bl	8001a68 <HAL_Delay>
	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 6));
 8000762:	f7ff ff05 	bl	8000570 <__NVIC_GetPriorityGrouping>
 8000766:	4603      	mov	r3, r0
 8000768:	2206      	movs	r2, #6
 800076a:	2106      	movs	r1, #6
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff55 	bl	800061c <NVIC_EncodePriority>
 8000772:	4603      	mov	r3, r0
 8000774:	4619      	mov	r1, r3
 8000776:	2027      	movs	r0, #39	; 0x27
 8000778:	f7ff ff26 	bl	80005c8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 800077c:	2027      	movs	r0, #39	; 0x27
 800077e:	f7ff ff05 	bl	800058c <__NVIC_EnableIRQ>

	//
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400
 8000794:	40004800 	.word	0x40004800

08000798 <slave_response>:
		Rx_Msg.data[i] = USART3->DR;
	}
}
*/

int slave_response(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
		}

	}
	else{
	*/
	if(USART3->SR & USART_SR_RXNE){
 800079e:	4b58      	ldr	r3, [pc, #352]	; (8000900 <slave_response+0x168>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 80a6 	beq.w	80008f8 <slave_response+0x160>
			int data = USART3->DR;
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <slave_response+0x168>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	61fb      	str	r3, [r7, #28]
			char tmp[2];



			if(data == LIN_SYNCH){
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	2b55      	cmp	r3, #85	; 0x55
 80007b6:	d103      	bne.n	80007c0 <slave_response+0x28>
				action = ACTION_READ_ID;
 80007b8:	4b52      	ldr	r3, [pc, #328]	; (8000904 <slave_response+0x16c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e09b      	b.n	80008f8 <slave_response+0x160>
//				serial_puts("Received SYNCH");
			}
			else if((data == 0) && (action != ACTION_READ_MESSAGE)){
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d107      	bne.n	80007d6 <slave_response+0x3e>
 80007c6:	4b4f      	ldr	r3, [pc, #316]	; (8000904 <slave_response+0x16c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d003      	beq.n	80007d6 <slave_response+0x3e>
				action = ACTION_READ_ID;
 80007ce:	4b4d      	ldr	r3, [pc, #308]	; (8000904 <slave_response+0x16c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e090      	b.n	80008f8 <slave_response+0x160>
//				serial_puts("Received BREAK");
//				newLine();
				return;
			}
			else{
				switch (action) {
 80007d6:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <slave_response+0x16c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <slave_response+0x4c>
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d01a      	beq.n	8000818 <slave_response+0x80>
							}
						}
						break;

					default:
						break;
 80007e2:	e089      	b.n	80008f8 <slave_response+0x160>
						Rx_Msg.ID = data;
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <slave_response+0x170>)
 80007ea:	701a      	strb	r2, [r3, #0]
						switch (Rx_Msg.ID) {
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <slave_response+0x170>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b44      	cmp	r3, #68	; 0x44
 80007f2:	d004      	beq.n	80007fe <slave_response+0x66>
 80007f4:	2b45      	cmp	r3, #69	; 0x45
 80007f6:	d10b      	bne.n	8000810 <slave_response+0x78>
								slave_send_RTC();
 80007f8:	f000 f910 	bl	8000a1c <slave_send_RTC>
								break;
 80007fc:	e00b      	b.n	8000816 <slave_response+0x7e>
								action = ACTION_READ_MESSAGE;
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <slave_response+0x16c>)
 8000800:	2202      	movs	r2, #2
 8000802:	601a      	str	r2, [r3, #0]
								Rx_Msg.length = LIN_SLAVE_READ_ACC_LENGTH;
 8000804:	4b40      	ldr	r3, [pc, #256]	; (8000908 <slave_response+0x170>)
 8000806:	2203      	movs	r2, #3
 8000808:	705a      	strb	r2, [r3, #1]
								i = 0;
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <slave_response+0x174>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
								handle_request();
 8000810:	f000 f884 	bl	800091c <handle_request>
								break;
 8000814:	bf00      	nop
						break;
 8000816:	e06f      	b.n	80008f8 <slave_response+0x160>
						switch (Rx_Msg.ID) {
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <slave_response+0x170>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b44      	cmp	r3, #68	; 0x44
 800081e:	d000      	beq.n	8000822 <slave_response+0x8a>
									break;
 8000820:	e003      	b.n	800082a <slave_response+0x92>
									reading_acc = 1;
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <slave_response+0x178>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
									break;
 8000828:	bf00      	nop
						Rx_Msg.data[i] = data;
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <slave_response+0x174>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	69fa      	ldr	r2, [r7, #28]
 8000830:	b2d1      	uxtb	r1, r2
 8000832:	4a35      	ldr	r2, [pc, #212]	; (8000908 <slave_response+0x170>)
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	709a      	strb	r2, [r3, #2]
						i++;
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <slave_response+0x174>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	4a32      	ldr	r2, [pc, #200]	; (800090c <slave_response+0x174>)
 8000842:	6013      	str	r3, [r2, #0]
						if(Rx_Msg.length == i){
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <slave_response+0x170>)
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	461a      	mov	r2, r3
 800084a:	4b30      	ldr	r3, [pc, #192]	; (800090c <slave_response+0x174>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d151      	bne.n	80008f6 <slave_response+0x15e>
							action = ACTION_NOTHING;
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <slave_response+0x16c>)
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	601a      	str	r2, [r3, #0]
							serial_puts("LIN received: ");
 800085a:	482e      	ldr	r0, [pc, #184]	; (8000914 <slave_response+0x17c>)
 800085c:	f000 fffe 	bl	800185c <serial_puts>
							for(int k = 0; k < Rx_Msg.length; k++){
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
 8000864:	e016      	b.n	8000894 <slave_response+0xfc>
								int2string(Rx_Msg.data[k], converted_data);
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <slave_response+0x170>)
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	4413      	add	r3, r2
 800086c:	3302      	adds	r3, #2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	4610      	mov	r0, r2
 800087a:	f001 f815 	bl	80018a8 <int2string>
								serial_puts(converted_data);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffea 	bl	800185c <serial_puts>
								serial_puts(",");
 8000888:	4823      	ldr	r0, [pc, #140]	; (8000918 <slave_response+0x180>)
 800088a:	f000 ffe7 	bl	800185c <serial_puts>
							for(int k = 0; k < Rx_Msg.length; k++){
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <slave_response+0x170>)
 8000896:	785b      	ldrb	r3, [r3, #1]
 8000898:	461a      	mov	r2, r3
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	4293      	cmp	r3, r2
 800089e:	dbe2      	blt.n	8000866 <slave_response+0xce>
							newLine();
 80008a0:	f000 fff7 	bl	8001892 <newLine>
							frame.STDID = CAN_ACC_ID;
 80008a4:	2302      	movs	r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
							for(int j = 0; j < Rx_Msg.length; j++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	e00c      	b.n	80008c8 <slave_response+0x130>
								frame.data[j] = Rx_Msg.data[j];
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <slave_response+0x170>)
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	4413      	add	r3, r2
 80008b4:	3302      	adds	r3, #2
 80008b6:	7819      	ldrb	r1, [r3, #0]
 80008b8:	1dba      	adds	r2, r7, #6
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	4413      	add	r3, r2
 80008be:	460a      	mov	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
							for(int j = 0; j < Rx_Msg.length; j++){
 80008c2:	6a3b      	ldr	r3, [r7, #32]
 80008c4:	3301      	adds	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <slave_response+0x170>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	461a      	mov	r2, r3
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	4293      	cmp	r3, r2
 80008d2:	dbec      	blt.n	80008ae <slave_response+0x116>
							frame.RTR = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	713b      	strb	r3, [r7, #4]
							int status = CAN_sendFrame(frame);
 80008d8:	463b      	mov	r3, r7
 80008da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008dc:	f000 f9b0 	bl	8000c40 <CAN_sendFrame>
 80008e0:	4603      	mov	r3, r0
 80008e2:	61bb      	str	r3, [r7, #24]
							switch (Rx_Msg.ID) {
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <slave_response+0x170>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b44      	cmp	r3, #68	; 0x44
 80008ea:	d000      	beq.n	80008ee <slave_response+0x156>
									break;
 80008ec:	e003      	b.n	80008f6 <slave_response+0x15e>
									reading_acc = 0;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <slave_response+0x178>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
									break;
 80008f4:	bf00      	nop
						break;
 80008f6:	bf00      	nop
				}
			}

		}
	//}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40004800 	.word	0x40004800
 8000904:	20000094 	.word	0x20000094
 8000908:	20004084 	.word	0x20004084
 800090c:	200002ec 	.word	0x200002ec
 8000910:	200002f0 	.word	0x200002f0
 8000914:	08005f98 	.word	0x08005f98
 8000918:	08005fa8 	.word	0x08005fa8

0800091c <handle_request>:
	Tx_Msg.data[5] = rtc_date.Date;
	Tx_Msg.length = 6;
	SendMessage(&Tx_Msg);
}

void handle_request(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	switch (Rx_Msg.ID) {
 8000920:	4b36      	ldr	r3, [pc, #216]	; (80009fc <handle_request+0xe0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	2b06      	cmp	r3, #6
 8000928:	d865      	bhi.n	80009f6 <handle_request+0xda>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <handle_request+0x14>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	0800094d 	.word	0x0800094d
 8000934:	0800095d 	.word	0x0800095d
 8000938:	0800096d 	.word	0x0800096d
 800093c:	0800099f 	.word	0x0800099f
 8000940:	08000985 	.word	0x08000985
 8000944:	080009af 	.word	0x080009af
 8000948:	080009c9 	.word	0x080009c9
		case LIN_CLIGNO_GAUCHE:
			serial_puts("CLIGNO GAUCHE");
 800094c:	482c      	ldr	r0, [pc, #176]	; (8000a00 <handle_request+0xe4>)
 800094e:	f000 ff85 	bl	800185c <serial_puts>
			newLine();
 8000952:	f000 ff9e 	bl	8001892 <newLine>

			allumer_clignotants_gauche();
 8000956:	f000 fd99 	bl	800148c <allumer_clignotants_gauche>
			break;
 800095a:	e04d      	b.n	80009f8 <handle_request+0xdc>

		case LIN_CLIGNO_DROIT:
			serial_puts("CLIGNO DROIT");
 800095c:	4829      	ldr	r0, [pc, #164]	; (8000a04 <handle_request+0xe8>)
 800095e:	f000 ff7d 	bl	800185c <serial_puts>
			newLine();
 8000962:	f000 ff96 	bl	8001892 <newLine>

			allumer_clignotants_droit();
 8000966:	f000 fd9c 	bl	80014a2 <allumer_clignotants_droit>
			break;
 800096a:	e045      	b.n	80009f8 <handle_request+0xdc>

		case LIN_CLIGNO_STOP:
			serial_puts("CLIGNO STOP");
 800096c:	4826      	ldr	r0, [pc, #152]	; (8000a08 <handle_request+0xec>)
 800096e:	f000 ff75 	bl	800185c <serial_puts>
			newLine();
 8000972:	f000 ff8e 	bl	8001892 <newLine>

			eteindre_clignotants_droit();
 8000976:	f000 fdaa 	bl	80014ce <eteindre_clignotants_droit>
			HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f001 f874 	bl	8001a68 <HAL_Delay>
			eteindre_clignotants_gauche();
 8000980:	f000 fd9a 	bl	80014b8 <eteindre_clignotants_gauche>

		case LIN_PHARE_ARRIERE:
			serial_puts("PHARE ARRIERE");
 8000984:	4821      	ldr	r0, [pc, #132]	; (8000a0c <handle_request+0xf0>)
 8000986:	f000 ff69 	bl	800185c <serial_puts>
			newLine();
 800098a:	f000 ff82 	bl	8001892 <newLine>

//			allumer_feux_arriere();
			allumer_clignotant_arriere_droit();
 800098e:	f000 fcdb 	bl	8001348 <allumer_clignotant_arriere_droit>
			HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f001 f868 	bl	8001a68 <HAL_Delay>
			allumer_clignotant_arriere_gauche();
 8000998:	f000 fcc0 	bl	800131c <allumer_clignotant_arriere_gauche>
			break;
 800099c:	e02c      	b.n	80009f8 <handle_request+0xdc>

		case LIN_PHARE_AVANT:
			serial_puts("PHARE AVANTS");
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <handle_request+0xf4>)
 80009a0:	f000 ff5c 	bl	800185c <serial_puts>
			newLine();
 80009a4:	f000 ff75 	bl	8001892 <newLine>

			allumer_phares();
 80009a8:	f000 fc4a 	bl	8001240 <allumer_phares>
			break;
 80009ac:	e024      	b.n	80009f8 <handle_request+0xdc>

		case LIN_PHARE_STOP:
			serial_puts("PHARE STOP");
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <handle_request+0xf8>)
 80009b0:	f000 ff54 	bl	800185c <serial_puts>
			newLine();
 80009b4:	f000 ff6d 	bl	8001892 <newLine>

			eteindre_phares();
 80009b8:	f000 fc4d 	bl	8001256 <eteindre_phares>
			HAL_Delay(50);
 80009bc:	2032      	movs	r0, #50	; 0x32
 80009be:	f001 f853 	bl	8001a68 <HAL_Delay>
			eteindre_feux_arriere();
 80009c2:	f000 fd2f 	bl	8001424 <eteindre_feux_arriere>
			break;
 80009c6:	e017      	b.n	80009f8 <handle_request+0xdc>

		case LIN_RESET:
			serial_puts("RESET");
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <handle_request+0xfc>)
 80009ca:	f000 ff47 	bl	800185c <serial_puts>
			newLine();
 80009ce:	f000 ff60 	bl	8001892 <newLine>

			eteindre_phares();
 80009d2:	f000 fc40 	bl	8001256 <eteindre_phares>
			HAL_Delay(50);
 80009d6:	2032      	movs	r0, #50	; 0x32
 80009d8:	f001 f846 	bl	8001a68 <HAL_Delay>
			eteindre_feux_arriere();
 80009dc:	f000 fd22 	bl	8001424 <eteindre_feux_arriere>
			HAL_Delay(50);
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f001 f841 	bl	8001a68 <HAL_Delay>

			eteindre_clignotants_droit();
 80009e6:	f000 fd72 	bl	80014ce <eteindre_clignotants_droit>
			HAL_Delay(50);
 80009ea:	2032      	movs	r0, #50	; 0x32
 80009ec:	f001 f83c 	bl	8001a68 <HAL_Delay>
			eteindre_clignotants_gauche();
 80009f0:	f000 fd62 	bl	80014b8 <eteindre_clignotants_gauche>
			break;
 80009f4:	e000      	b.n	80009f8 <handle_request+0xdc>
		default:
			break;
 80009f6:	bf00      	nop
	}
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20004084 	.word	0x20004084
 8000a00:	08005fac 	.word	0x08005fac
 8000a04:	08005fbc 	.word	0x08005fbc
 8000a08:	08005fcc 	.word	0x08005fcc
 8000a0c:	08005fd8 	.word	0x08005fd8
 8000a10:	08005fe8 	.word	0x08005fe8
 8000a14:	08005ff8 	.word	0x08005ff8
 8000a18:	08006004 	.word	0x08006004

08000a1c <slave_send_RTC>:

int slave_send_RTC(void){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
//	SendMessage(&Tx_Msg);

	// TODO: create new function for this
//	allumer_phares();

	osSignalSet(linReceiverTaskHandle, 1); //LIN_RECEIVED
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <slave_send_RTC+0x18>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fd52 	bl	80034d0 <osSignalSet>
}
 8000a2c:	bf00      	nop
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20004080 	.word	0x20004080

08000a38 <CAN_config_filter>:
//
//}
//
void CAN_config_filter(uint8_t IDE, uint32_t Filter_ID_high, uint32_t Filter_ID_low,
		uint32_t Filter_Mask_high, uint32_t Filter_Mask_low)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
	// We will use filter 0 for 0x100 to 0x10F (Mask mode)
	// Filter 1 for 0x200 and 0x205 (ID List mode)
	// ////////////////////////////////////////////////////////

	// Deactivate Filter 0 and 1
	CAN1->FA1R &= 0xFFFFFFFC;
 8000a48:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <CAN_config_filter+0x100>)
 8000a4a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000a4e:	4a3a      	ldr	r2, [pc, #232]	; (8000b38 <CAN_config_filter+0x100>)
 8000a50:	f023 0303 	bic.w	r3, r3, #3
 8000a54:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	// initialize mode for all filters
	CAN1->FMR |= 0x1;
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <CAN_config_filter+0x100>)
 8000a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a5e:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <CAN_config_filter+0x100>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	if(IDE == 0){
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d12c      	bne.n	8000ac8 <CAN_config_filter+0x90>
		// ///////////////////////////
		// Filters with 32 bits mode//
		// ///////////////////////////

		CAN1->FS1R |= 0x00000003; // 32 bits filter for filter 0 ,1
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <CAN_config_filter+0x100>)
 8000a70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000a74:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <CAN_config_filter+0x100>)
 8000a76:	f043 0303 	orr.w	r3, r3, #3
 8000a7a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

		//CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
		CAN1->FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <CAN_config_filter+0x100>)
 8000a80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a84:	4a2c      	ldr	r2, [pc, #176]	; (8000b38 <CAN_config_filter+0x100>)
 8000a86:	f023 0303 	bic.w	r3, r3, #3
 8000a8a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		CAN1->FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <CAN_config_filter+0x100>)
 8000a90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a94:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <CAN_config_filter+0x100>)
 8000a96:	f023 0303 	bic.w	r3, r3, #3
 8000a9a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		// Configure the filter bank
		/*
		 **/
		CAN1->sFilterRegister[0].FR1 = (Filter_ID_high << 21); //ID
 8000a9e:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <CAN_config_filter+0x100>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	055b      	lsls	r3, r3, #21
 8000aa4:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
		CAN1->sFilterRegister[0].FR2 = (Filter_Mask_high << 21); // Mask
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <CAN_config_filter+0x100>)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	055b      	lsls	r3, r3, #21
 8000aae:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244


		CAN1->sFilterRegister[1].FR1 = (Filter_ID_low << 21); //ID
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <CAN_config_filter+0x100>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	055b      	lsls	r3, r3, #21
 8000ab8:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
		CAN1->sFilterRegister[1].FR2 = (Filter_Mask_low << 21); // ID
 8000abc:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <CAN_config_filter+0x100>)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	055b      	lsls	r3, r3, #21
 8000ac2:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 8000ac6:	e020      	b.n	8000b0a <CAN_config_filter+0xd2>
		//CAN1->sFilterRegister[1].FR2 |= 0x2; //ID with RTR = 1

	}
	else{
		// Filters with dual 16 bits config
		CAN1->FS1R &= 0xFFFFFFC; // Dual 16 bits filter for filter 0 ,1
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <CAN_config_filter+0x100>)
 8000aca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000ace:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <CAN_config_filter+0x100>)
 8000ad0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ad4:	f023 0303 	bic.w	r3, r3, #3
 8000ad8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		//CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
		CAN1->FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <CAN_config_filter+0x100>)
 8000ade:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <CAN_config_filter+0x100>)
 8000ae4:	f023 0303 	bic.w	r3, r3, #3
 8000ae8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		CAN1->FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <CAN_config_filter+0x100>)
 8000aee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <CAN_config_filter+0x100>)
 8000af4:	f023 0303 	bic.w	r3, r3, #3
 8000af8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		// Configure the filter bank
		//CAN1->sFilterRegister[0].FR1 =  (Filter_ID_low << 5) ; //((Filter_Mask_low <<5) <<16) || (Filter_ID_low << 5); //ID
		CAN1->sFilterRegister[0].FR1 =  ( Filter_Mask_low << 16) | (Filter_ID_low ) ;//((Filter_Mask_low <<5) <<16); // Mask
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	041a      	lsls	r2, r3, #16
 8000b00:	490d      	ldr	r1, [pc, #52]	; (8000b38 <CAN_config_filter+0x100>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	f8c1 3240 	str.w	r3, [r1, #576]	; 0x240

	}

	// Activate Filter 0 and 1
	CAN1->FA1R |= 0x00000003;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <CAN_config_filter+0x100>)
 8000b0c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000b10:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <CAN_config_filter+0x100>)
 8000b12:	f043 0303 	orr.w	r3, r3, #3
 8000b16:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	// Leave Filter init
	CAN1->FMR &= 0xFFFFFFFE;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <CAN_config_filter+0x100>)
 8000b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <CAN_config_filter+0x100>)
 8000b22:	f023 0301 	bic.w	r3, r3, #1
 8000b26:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40006400 	.word	0x40006400

08000b3c <CAN_config>:




void CAN_config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct={0};
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

	//EnableCANCLock
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <CAN_config+0xf4>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a35      	ldr	r2, [pc, #212]	; (8000c30 <CAN_config+0xf4>)
 8000b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <CAN_config+0xf4>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]

	//ConfigureGPIOs
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <CAN_config+0xf4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2e      	ldr	r2, [pc, #184]	; (8000c30 <CAN_config+0xf4>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <CAN_config+0xf4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
	/*CAN1GPIOConfiguration
	PB8------>CAN1_RX
	PB9------>CAN1_TX*/

	GPIO_InitStruct.Pin=GPIO_PIN_8|GPIO_PIN_9;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode=GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate=GPIO_AF9_CAN1;
 8000b9c:	2309      	movs	r3, #9
 8000b9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4823      	ldr	r0, [pc, #140]	; (8000c34 <CAN_config+0xf8>)
 8000ba8:	f001 f862 	bl	8001c70 <HAL_GPIO_Init>


	//ClearSleepbittowakeup
	CAN1->MCR&=0xFFFFFFFD;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <CAN_config+0xfc>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <CAN_config+0xfc>)
 8000bb2:	f023 0302 	bic.w	r3, r3, #2
 8000bb6:	6013      	str	r3, [r2, #0]
	//WaitforCANtowakeup
	while(CAN1->MSR&0x00000002);
 8000bb8:	bf00      	nop
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <CAN_config+0xfc>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f9      	bne.n	8000bba <CAN_config+0x7e>
	//Switchtoconfigmode
	CAN1->MCR|=0x00000001;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <CAN_config+0xfc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <CAN_config+0xfc>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6013      	str	r3, [r2, #0]
	//Waitforconfigmod
	while(!(CAN1->MSR&0x1));
 8000bd2:	bf00      	nop
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <CAN_config+0xfc>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f9      	beq.n	8000bd4 <CAN_config+0x98>

	//Setconfig
	CAN1->MCR&=0x00000001;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <CAN_config+0xfc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <CAN_config+0xfc>)
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]


	CAN1->BTR = 0x00250010; //Par ordre : loop back activé
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <CAN_config+0xfc>)
 8000bee:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <CAN_config+0x100>)
 8000bf0:	61da      	str	r2, [r3, #28]

	//INTERRUPTION//
	//Set Interrupt RXFIFO0 (FMPIE0) and TX box empty

	CAN1->IER|=0x2;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <CAN_config+0xfc>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <CAN_config+0xfc>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6153      	str	r3, [r2, #20]
	///Activate Interrupton NVIC
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,6,1); // 0, 1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2106      	movs	r1, #6
 8000c02:	2014      	movs	r0, #20
 8000c04:	f001 f80a 	bl	8001c1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f001 f823 	bl	8001c54 <HAL_NVIC_EnableIRQ>
	//HAL_NVIC_SetPriority(CAN1_TX_IRQn,0,2);
	//HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
	////////////////
	// Go to normal mode
	CAN1->MCR &= 0xFFFFFFFE;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <CAN_config+0xfc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <CAN_config+0xfc>)
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	6013      	str	r3, [r2, #0]
	//Wait f o r normal mod
	while (CAN1->MSR & 0x1 ) ;
 8000c1a:	bf00      	nop
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <CAN_config+0xfc>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f9      	bne.n	8000c1c <CAN_config+0xe0>

//	  initializeBuffer(&farriere_portA);
//	  initializeBuffer(&farriere_portB);
//	  initializeBuffer(&farriere_portC);
//	  initializeBuffer(&etat_commodo);
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40006400 	.word	0x40006400
 8000c3c:	00250010 	.word	0x00250010

08000c40 <CAN_sendFrame>:





uint8_t CAN_sendFrame (CAN_frame CAN_mess) {
 8000c40:	b490      	push	{r4, r7}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	463c      	mov	r4, r7
 8000c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Check i f TxMailbox0 i s empty
	if (CAN1->TSR & 0x04000000 )
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d030      	beq.n	8000cba <CAN_sendFrame+0x7a>
//		CAN1->sTxMailBox[0].TDHR = CAN_mess.data [ 7 ] << 24 | CAN_mess.data[ 6 ] << 16 | CAN_mess.data [ 5 ] << 8 | CAN_mess.data [ 4 ] ;
//		CAN1->sTxMailBox[0].TIR |= 1 ; //Send the message
//		return ( 1 ) ;

		//fillthemailbox
		CAN1->sTxMailBox[0].TIR=(CAN_mess.STDID<<3)|(CAN_mess.RTR<<1)|(1<<2);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	793a      	ldrb	r2, [r7, #4]
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	4313      	orrs	r3, r2
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
		CAN1->sTxMailBox[0].TDTR=CAN_mess.DLC;
 8000c6c:	797a      	ldrb	r2, [r7, #5]
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000c70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		CAN1->sTxMailBox[0].TDLR=CAN_mess.data[3]<<24|CAN_mess.data[2]<<16|CAN_mess.data[1]<<8|CAN_mess.data[0];
 8000c74:	7a7b      	ldrb	r3, [r7, #9]
 8000c76:	061a      	lsls	r2, r3, #24
 8000c78:	7a3b      	ldrb	r3, [r7, #8]
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	4313      	orrs	r3, r2
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000c8a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		CAN1->sTxMailBox[0].TDHR=CAN_mess.data[7]<<24|CAN_mess.data[6]<<16|CAN_mess.data[5]<<8|CAN_mess.data[4];
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	061a      	lsls	r2, r3, #24
 8000c92:	7b3b      	ldrb	r3, [r7, #12]
 8000c94:	041b      	lsls	r3, r3, #16
 8000c96:	431a      	orrs	r2, r3
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	7aba      	ldrb	r2, [r7, #10]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000ca4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		CAN1->sTxMailBox[0].TIR|=1;//Sendthemessage
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000caa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <CAN_sendFrame+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}
		else return ( 0 ) ;
}
 8000cb8:	e000      	b.n	8000cbc <CAN_sendFrame+0x7c>
		else return ( 0 ) ;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc90      	pop	{r4, r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40006400 	.word	0x40006400

08000ccc <CAN_readFrame>:

uint8_t CAN_readFrame(){
 8000ccc:	b490      	push	{r4, r7}
 8000cce:	af00      	add	r7, sp, #0
//	CAN_RxMessage.data [4] = CAN1->sFIFOMailBox [0].RDHR &0xFF;
//	CAN_RxMessage.data [5] = (CAN1->sFIFOMailBox [0].RDHR >>8) &0xFF;
//	CAN_RxMessage.data [6] = (CAN1->sFIFOMailBox [0].RDHR >>16) &0xFF;
//	CAN_RxMessage.data [7] = (CAN1->sFIFOMailBox [0].RDHR >>24) &0xFF;

	CAN_RxMessage.STDID=CAN1->sFIFOMailBox[0].RIR>>3;
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <CAN_readFrame+0x104>)
 8000cd2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <CAN_readFrame+0x108>)
 8000cda:	6013      	str	r3, [r2, #0]
	    CAN_RxMessage.RTR=(CAN1->sFIFOMailBox[0].RIR>>1)&0x1;
 8000cdc:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <CAN_readFrame+0x104>)
 8000cde:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000ce2:	085b      	lsrs	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <CAN_readFrame+0x108>)
 8000cee:	711a      	strb	r2, [r3, #4]
	    CAN_RxMessage.DLC=CAN1->sFIFOMailBox[0].RDTR&0xF;
 8000cf0:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <CAN_readFrame+0x104>)
 8000cf2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d00:	715a      	strb	r2, [r3, #5]
	    CAN_RxMessage.data[0]=CAN1->sFIFOMailBox[0].RDLR&0xFF;
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d04:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d0c:	719a      	strb	r2, [r3, #6]
	    CAN_RxMessage.data[1]=(CAN1->sFIFOMailBox[0].RDLR>>8)&0xFF;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d10:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d1a:	71da      	strb	r2, [r3, #7]
	    CAN_RxMessage.data[2]=(CAN1->sFIFOMailBox[0].RDLR>>16)&0xFF;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d1e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d28:	721a      	strb	r2, [r3, #8]
	    CAN_RxMessage.data[3]=(CAN1->sFIFOMailBox[0].RDLR>>24)&0xFF;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d2c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000d30:	0e1b      	lsrs	r3, r3, #24
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d36:	725a      	strb	r2, [r3, #9]
	    CAN_RxMessage.data[4]=CAN1->sFIFOMailBox[0].RDHR&0xFF;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d3a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d42:	729a      	strb	r2, [r3, #10]
	    CAN_RxMessage.data[5]=(CAN1->sFIFOMailBox[0].RDHR>>8)&0xFF;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d46:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d50:	72da      	strb	r2, [r3, #11]
	    CAN_RxMessage.data[6]=(CAN1->sFIFOMailBox[0].RDHR>>16)&0xFF;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d54:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d5e:	731a      	strb	r2, [r3, #12]
	    CAN_RxMessage.data[7]=(CAN1->sFIFOMailBox[0].RDHR>>24)&0xFF;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <CAN_readFrame+0x104>)
 8000d62:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000d66:	0e1b      	lsrs	r3, r3, #24
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d6c:	735a      	strb	r2, [r3, #13]

	CAN_RxMessages[total_received] = CAN_RxMessage;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <CAN_readFrame+0x10c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <CAN_readFrame+0x110>)
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	4413      	add	r3, r2
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <CAN_readFrame+0x108>)
 8000d7a:	461c      	mov	r4, r3
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	total_received = (total_received + 1) % BUFFER_LIMIT;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <CAN_readFrame+0x10c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1c59      	adds	r1, r3, #1
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <CAN_readFrame+0x114>)
 8000d8c:	fb83 2301 	smull	r2, r3, r3, r1
 8000d90:	109a      	asrs	r2, r3, #2
 8000d92:	17cb      	asrs	r3, r1, #31
 8000d94:	1ad2      	subs	r2, r2, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	1aca      	subs	r2, r1, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <CAN_readFrame+0x10c>)
 8000da2:	601a      	str	r2, [r3, #0]
	can_read_data = 1;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <CAN_readFrame+0x118>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
	if(total_received >= (BUFFER_LIMIT - 3)) { //== read_index
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <CAN_readFrame+0x10c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	dd02      	ble.n	8000db8 <CAN_readFrame+0xec>
		emergency_data_read = 1;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <CAN_readFrame+0x11c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
	}


	CAN1->RF0R |= 0x20 ;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <CAN_readFrame+0x104>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <CAN_readFrame+0x104>)
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	60d3      	str	r3, [r2, #12]

}
 8000dc4:	bf00      	nop
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc90      	pop	{r4, r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40006400 	.word	0x40006400
 8000dd4:	20004068 	.word	0x20004068
 8000dd8:	20004050 	.word	0x20004050
 8000ddc:	20004108 	.word	0x20004108
 8000de0:	66666667 	.word	0x66666667
 8000de4:	200040fc 	.word	0x200040fc
 8000de8:	200002f4 	.word	0x200002f4

08000dec <CAN1_RX0_IRQHandler>:
	  auto_frame.RTR = 1;
	  CAN_sendFrame(auto_frame);
}

void CAN1_RX0_IRQHandler( void )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	CAN_readFrame();
 8000df0:	f7ff ff6c 	bl	8000ccc <CAN_readFrame>
	if(CAN_RxMessage.STDID == COMMODO_PHARE_RETURN_ID){
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <CAN1_RX0_IRQHandler+0x2c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <CAN1_RX0_IRQHandler+0x30>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10a      	bne.n	8000e14 <CAN1_RX0_IRQHandler+0x28>
		if(CAN_RxMessage.data[0] == COMMODO_PHARE_RETURN_VALUE){
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <CAN1_RX0_IRQHandler+0x2c>)
 8000e00:	799b      	ldrb	r3, [r3, #6]
 8000e02:	2b34      	cmp	r3, #52	; 0x34
 8000e04:	d103      	bne.n	8000e0e <CAN1_RX0_IRQHandler+0x22>
			phare_state = 0;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <CAN1_RX0_IRQHandler+0x34>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
		}else{
			phare_state = 1;
		}
	}
}
 8000e0c:	e002      	b.n	8000e14 <CAN1_RX0_IRQHandler+0x28>
			phare_state = 1;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <CAN1_RX0_IRQHandler+0x34>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20004068 	.word	0x20004068
 8000e1c:	801a8884 	.word	0x801a8884
 8000e20:	20000000 	.word	0x20000000

08000e24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <vApplicationGetIdleTaskMemory+0x30>)
 8000e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000098 	.word	0x20000098
 8000e54:	200000ec 	.word	0x200000ec

08000e58 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	HAL_USART_Transmit(&husart2, (uint8_t *)ptr, len, 10);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	230a      	movs	r3, #10
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <_write+0x24>)
 8000e6e:	f001 ffd0 	bl	8002e12 <HAL_USART_Transmit>
	return len;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200040b4 	.word	0x200040b4

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b09c      	sub	sp, #112	; 0x70
 8000e84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f000 fdad 	bl	80019e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f86d 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 f901 	bl	8001094 <MX_GPIO_Init>
  MX_USART2_Init();
 8000e92:	f000 f8d3 	bl	800103c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  UART_Init();
 8000e96:	f7ff fbf5 	bl	8000684 <UART_Init>
  CAN_config();
 8000e9a:	f7ff fe4f 	bl	8000b3c <CAN_config>
  CAN_config_filter(0, 0, 0x0, 0x10520312, 0x10035110);
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <main+0xc0>)
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <main+0xc4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fdc5 	bl	8000a38 <CAN_config_filter>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of linCanQueue */
  osMessageQDef(linCanQueue, 16, uint16_t);
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0xc8>)
 8000eb0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linCanQueueHandle = osMessageCreate(osMessageQ(linCanQueue), NULL);
 8000eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fb91 	bl	80035e8 <osMessageCreate>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <main+0xcc>)
 8000eca:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of linReceiverTask */
  osThreadDef(linReceiverTask, StartLinReceiverTask, osPriorityNormal, 0, 128);
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <main+0xd0>)
 8000ece:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  linReceiverTaskHandle = osThreadCreate(osThread(linReceiverTask), NULL);
 8000ee0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fa91 	bl	800340e <osThreadCreate>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <main+0xd4>)
 8000ef0:	601a      	str	r2, [r3, #0]

  /* definition and creation of canSenderTask */
  osThreadDef(canSenderTask, StartCanSenderTask, osPriorityIdle, 0, 128);
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <main+0xd8>)
 8000ef4:	f107 0420 	add.w	r4, r7, #32
 8000ef8:	461d      	mov	r5, r3
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canSenderTaskHandle = osThreadCreate(osThread(canSenderTask), NULL);
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fa7e 	bl	800340e <osThreadCreate>
 8000f12:	4602      	mov	r2, r0
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <main+0xdc>)
 8000f16:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <main+0xe0>)
 8000f1a:	1d3c      	adds	r4, r7, #4
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fa6d 	bl	800340e <osThreadCreate>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <main+0xe4>)
 8000f38:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f3a:	f002 fa61 	bl	8003400 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <main+0xbe>
 8000f40:	10035110 	.word	0x10035110
 8000f44:	10520312 	.word	0x10520312
 8000f48:	0800600c 	.word	0x0800600c
 8000f4c:	20004100 	.word	0x20004100
 8000f50:	0800602c 	.word	0x0800602c
 8000f54:	20004080 	.word	0x20004080
 8000f58:	08006058 	.word	0x08006058
 8000f5c:	20004054 	.word	0x20004054
 8000f60:	08006080 	.word	0x08006080
 8000f64:	200040f8 	.word	0x200040f8

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	; 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f8ea 	bl	8005150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <SystemClock_Config+0xcc>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <SystemClock_Config+0xd0>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fdc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fe0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fffc 	bl	8001fec <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ffa:	f000 f8f1 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2302      	movs	r3, #2
 8001004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2105      	movs	r1, #5
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fa55 	bl	80024cc <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001028:	f000 f8da 	bl	80011e0 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	; 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_USART2_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_USART2_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 19200;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART2_Init+0x50>)
 8001048:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800104c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART2_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <MX_USART2_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART2_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_USART2_Init+0x50>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART2_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_USART2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_USART2_Init+0x50>)
 800107a:	f001 fe89 	bl	8002d90 <HAL_USART_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f8ac 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200040b4 	.word	0x200040b4
 8001090:	40004400 	.word	0x40004400

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_GPIO_Init+0x80>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <MX_GPIO_Init+0x80>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_GPIO_Init+0x80>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_GPIO_Init+0x80>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <MX_GPIO_Init+0x80>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_GPIO_Init+0x80>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_GPIO_Init+0x84>)
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_GPIO_Init+0x88>)
 80010f6:	f000 fdbb 	bl	8001c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	2006      	movs	r0, #6
 8001100:	f000 fd8c 	bl	8001c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001104:	2006      	movs	r0, #6
 8001106:	f000 fda5 	bl	8001c54 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	10110000 	.word	0x10110000
 800111c:	40020000 	.word	0x40020000

08001120 <StartLinReceiverTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLinReceiverTask */
void StartLinReceiverTask(void const * argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	int lin_msg_cnt = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(LIN_RECEIVED, osWaitForever);
 800112c:	463b      	mov	r3, r7
 800112e:	f04f 32ff 	mov.w	r2, #4294967295
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fa0b 	bl	8003550 <osSignalWait>
	  lin_msg_cnt ++;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
	  printf("LIN Received n° %d \n\r", lin_msg_cnt);
 8001140:	69f9      	ldr	r1, [r7, #28]
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <StartLinReceiverTask+0x3c>)
 8001144:	f004 f80c 	bl	8005160 <iprintf>
	  HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f000 fc8d 	bl	8001a68 <HAL_Delay>

	  osSignalSet(canSenderTaskHandle, LIN_RECEIVED);
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <StartLinReceiverTask+0x40>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f002 f9bb 	bl	80034d0 <osSignalSet>
	  osSignalWait(LIN_RECEIVED, osWaitForever);
 800115a:	e7e7      	b.n	800112c <StartLinReceiverTask+0xc>
 800115c:	0800609c 	.word	0x0800609c
 8001160:	20004054 	.word	0x20004054

08001164 <StartCanSenderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanSenderTask */
void StartCanSenderTask(void const * argument)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartCanSenderTask */
	CAN_frame auto_frame;
	uint8_t i = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(LIN_RECEIVED, osWaitForever);
 8001172:	463b      	mov	r3, r7
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	2101      	movs	r1, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f9e8 	bl	8003550 <osSignalWait>
	  printf("Clignotant arriere droit \n \r");
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <StartCanSenderTask+0x44>)
 8001182:	f003 ffed 	bl	8005160 <iprintf>
	  if (i == 0){
 8001186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <StartCanSenderTask+0x36>
		  allumer_clignotant_arriere_droit();
 800118e:	f000 f8db 	bl	8001348 <allumer_clignotant_arriere_droit>
		  i = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001198:	e7eb      	b.n	8001172 <StartCanSenderTask+0xe>
	  }
	  else{
		  eteindre_clignotant_arriere_droit();
 800119a:	f000 f917 	bl	80013cc <eteindre_clignotant_arriere_droit>
		  i = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  osSignalWait(LIN_RECEIVED, osWaitForever);
 80011a4:	e7e5      	b.n	8001172 <StartCanSenderTask+0xe>
 80011a6:	bf00      	nop
 80011a8:	080060b4 	.word	0x080060b4

080011ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f002 f976 	bl	80034a6 <osDelay>
 80011ba:	e7fb      	b.n	80011b4 <StartTask03+0x8>

080011bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ce:	f000 fc2b 	bl	8001a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40001000 	.word	0x40001000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <Error_Handler+0x6>

080011e8 <allumer_phare_gauche>:
 */

#include "phares.h"
#include "can.h"

void allumer_phare_gauche(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_GAUCHE_PHARE_ID;//0x10520312;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <allumer_phare_gauche+0x28>)
 80011f0:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1<<FEUX_AVANT_GAUCHE_PHARE_POS;
 80011fa:	2301      	movs	r3, #1
 80011fc:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 80011fe:	463b      	mov	r3, r7
 8001200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001202:	f7ff fd1d 	bl	8000c40 <CAN_sendFrame>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	10520312 	.word	0x10520312

08001214 <allumer_phare_droit>:

void allumer_phare_droit(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_PHARE_DROIT_ID;//0x10520312;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <allumer_phare_droit+0x28>)
 800121c:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1<<FEUX_AVANT_PHARE_DROIT_POS;
 8001226:	2320      	movs	r3, #32
 8001228:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 800122a:	463b      	mov	r3, r7
 800122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122e:	f7ff fd07 	bl	8000c40 <CAN_sendFrame>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	10520311 	.word	0x10520311

08001240 <allumer_phares>:

void allumer_phares(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	allumer_phare_droit();
 8001244:	f7ff ffe6 	bl	8001214 <allumer_phare_droit>
	HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f000 fc0d 	bl	8001a68 <HAL_Delay>
	allumer_phare_gauche();
 800124e:	f7ff ffcb 	bl	80011e8 <allumer_phare_gauche>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <eteindre_phares>:
	auto_frame.data[0] = 1<<FEUX_AVANT_VEILLEUSE_DROIT_POS;
	CAN_sendFrame(auto_frame);
}

// eteindre phares
void eteindre_phares(void){
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
	eteindre_phare_gauche();
 800125a:	f000 f807 	bl	800126c <eteindre_phare_gauche>
	HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f000 fc02 	bl	8001a68 <HAL_Delay>
	eteindre_phare_droit();
 8001264:	f000 f818 	bl	8001298 <eteindre_phare_droit>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <eteindre_phare_gauche>:

void eteindre_phare_gauche(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
		auto_frame.STDID = FEUX_AVANT_GAUCHE_PHARE_ID;//0x10520312;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <eteindre_phare_gauche+0x28>)
 8001274:	603b      	str	r3, [r7, #0]
		auto_frame.DLC = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	717b      	strb	r3, [r7, #5]
		auto_frame.RTR = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	713b      	strb	r3, [r7, #4]
		auto_frame.data[0] = (8 & ~(1<<FEUX_AVANT_GAUCHE_PHARE_POS));
 800127e:	2308      	movs	r3, #8
 8001280:	71bb      	strb	r3, [r7, #6]
		CAN_sendFrame(auto_frame);
 8001282:	463b      	mov	r3, r7
 8001284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001286:	f7ff fcdb 	bl	8000c40 <CAN_sendFrame>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	10520312 	.word	0x10520312

08001298 <eteindre_phare_droit>:

void eteindre_phare_droit(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_PHARE_DROIT_ID;//0x10520312;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <eteindre_phare_droit+0x28>)
 80012a0:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_AVANT_PHARE_DROIT_POS));
 80012aa:	2308      	movs	r3, #8
 80012ac:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 80012ae:	463b      	mov	r3, r7
 80012b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b2:	f7ff fcc5 	bl	8000c40 <CAN_sendFrame>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	10520311 	.word	0x10520311

080012c4 <allumer_clignotant_gauche>:
void allumer_clignotants_avant(void){
	allumer_clignotant_droit();
	allumer_clignotant_gauche();
}

void allumer_clignotant_gauche(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_GAUCHE_CLIGNONTANT_ID;//0x10520312;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <allumer_clignotant_gauche+0x28>)
 80012cc:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1 << FEUX_AVANT_GAUCHE_CLIGNONTANT_POS;
 80012d6:	2320      	movs	r3, #32
 80012d8:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 80012da:	463b      	mov	r3, r7
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	f7ff fcaf 	bl	8000c40 <CAN_sendFrame>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	10520312 	.word	0x10520312

080012f0 <allumer_clignotant_droit>:
void allumer_clignotant_droit(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_DROIT_CLIGNONTANT_ID;//0x10520312;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <allumer_clignotant_droit+0x28>)
 80012f8:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1 << FEUX_AVANT_DROIT_CLIGNONTANT_POS;
 8001302:	2301      	movs	r3, #1
 8001304:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 8001306:	463b      	mov	r3, r7
 8001308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130a:	f7ff fc99 	bl	8000c40 <CAN_sendFrame>
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	10520311 	.word	0x10520311

0800131c <allumer_clignotant_arriere_gauche>:

void allumer_clignotants_arrirere(void){
	allumer_clignotant_arriere_droit();
	allumer_clignotant_arriere_gauche();
}
void allumer_clignotant_arriere_gauche(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_CLIGNOTANT_GAUCHE_ID;//0x10520312;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <allumer_clignotant_arriere_gauche+0x28>)
 8001324:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1 << FEUX_ARRIERE_CLIGNOTANT_GAUCHE_POS;
 800132e:	2304      	movs	r3, #4
 8001330:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 8001332:	463b      	mov	r3, r7
 8001334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001336:	f7ff fc83 	bl	8000c40 <CAN_sendFrame>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	10530312 	.word	0x10530312

08001348 <allumer_clignotant_arriere_droit>:
void allumer_clignotant_arriere_droit(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_CLIGNOTANT_DROIT_ID;//0x10520312;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <allumer_clignotant_arriere_droit+0x28>)
 8001350:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = 1 << FEUX_ARRIERE_CLIGNOTANT_DROIT_POS;
 800135a:	2301      	movs	r3, #1
 800135c:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 800135e:	463b      	mov	r3, r7
 8001360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001362:	f7ff fc6d 	bl	8000c40 <CAN_sendFrame>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	10530310 	.word	0x10530310

08001374 <eteindre_clignotant_avant_gauche>:
// éteindre clignotants
void eteindre_clignotans_avant(void){
	eteindre_clignotant_avant_droit();
	eteindre_clignotant_avant_gauche();
}
void eteindre_clignotant_avant_gauche(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_GAUCHE_CLIGNONTANT_ID;//0x10520312;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <eteindre_clignotant_avant_gauche+0x28>)
 800137c:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_AVANT_GAUCHE_CLIGNONTANT_POS));
 8001386:	2308      	movs	r3, #8
 8001388:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 800138a:	463b      	mov	r3, r7
 800138c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138e:	f7ff fc57 	bl	8000c40 <CAN_sendFrame>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	10520312 	.word	0x10520312

080013a0 <eteindre_clignotant_avant_droit>:
void eteindre_clignotant_avant_droit(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_AVANT_DROIT_CLIGNONTANT_ID;//0x10520312;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <eteindre_clignotant_avant_droit+0x28>)
 80013a8:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_AVANT_DROIT_CLIGNONTANT_POS));
 80013b2:	2308      	movs	r3, #8
 80013b4:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 80013b6:	463b      	mov	r3, r7
 80013b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ba:	f7ff fc41 	bl	8000c40 <CAN_sendFrame>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	10520311 	.word	0x10520311

080013cc <eteindre_clignotant_arriere_droit>:

void eteindre_clignotans_arriere(void){
	eteindre_clignotant_arriere_droit();
	eteindre_clignotant_arriere_gauche();
}
void eteindre_clignotant_arriere_droit(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_STOP_DROIT_ID;// FEUX_ARRIERE_CLIGNOTANT_DROIT_ID;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <eteindre_clignotant_arriere_droit+0x28>)
 80013d4:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_ARRIERE_STOP_DROIT_POS)); // FEUX_ARRIERE_CLIGNOTANT_DROIT_POS
 80013de:	2300      	movs	r3, #0
 80013e0:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 80013e2:	463b      	mov	r3, r7
 80013e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e6:	f7ff fc2b 	bl	8000c40 <CAN_sendFrame>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	10530310 	.word	0x10530310

080013f8 <eteindre_clignotant_arriere_gauche>:
void eteindre_clignotant_arriere_gauche(void){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_CLIGNOTANT_GAUCHE_ID;//0x10520312;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <eteindre_clignotant_arriere_gauche+0x28>)
 8001400:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_ARRIERE_CLIGNOTANT_GAUCHE_POS));
 800140a:	2308      	movs	r3, #8
 800140c:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 800140e:	463b      	mov	r3, r7
 8001410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001412:	f7ff fc15 	bl	8000c40 <CAN_sendFrame>
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	10530312 	.word	0x10530312

08001424 <eteindre_feux_arriere>:
	auto_frame.RTR = 0;
	auto_frame.data[0] = 1<<FEUX_ARRIERE_STOP_DROIT_POS;
	CAN_sendFrame(auto_frame);
}

void eteindre_feux_arriere(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	eteindre_feux_arriere_droit();
 8001428:	f000 f81a 	bl	8001460 <eteindre_feux_arriere_droit>
	eteindre_feux_arriere_gauche();
 800142c:	f000 f802 	bl	8001434 <eteindre_feux_arriere_gauche>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <eteindre_feux_arriere_gauche>:
void eteindre_feux_arriere_gauche(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_STOP_GAUCHE_ID;//0x10520312;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <eteindre_feux_arriere_gauche+0x28>)
 800143c:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_ARRIERE_STOP_GAUCHE_POS));
 8001446:	2308      	movs	r3, #8
 8001448:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 800144a:	463b      	mov	r3, r7
 800144c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144e:	f7ff fbf7 	bl	8000c40 <CAN_sendFrame>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	10530310 	.word	0x10530310

08001460 <eteindre_feux_arriere_droit>:
void eteindre_feux_arriere_droit(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
	CAN_frame auto_frame;
	auto_frame.STDID = FEUX_ARRIERE_STOP_DROIT_ID;//0x10520312;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <eteindre_feux_arriere_droit+0x28>)
 8001468:	603b      	str	r3, [r7, #0]
	auto_frame.DLC = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	717b      	strb	r3, [r7, #5]
	auto_frame.RTR = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	713b      	strb	r3, [r7, #4]
	auto_frame.data[0] = (8 & ~(1<<FEUX_ARRIERE_STOP_DROIT_POS));
 8001472:	2300      	movs	r3, #0
 8001474:	71bb      	strb	r3, [r7, #6]
	CAN_sendFrame(auto_frame);
 8001476:	463b      	mov	r3, r7
 8001478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147a:	f7ff fbe1 	bl	8000c40 <CAN_sendFrame>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	10530310 	.word	0x10530310

0800148c <allumer_clignotants_gauche>:

void allumer_clignotants_gauche(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	allumer_clignotant_gauche();
 8001490:	f7ff ff18 	bl	80012c4 <allumer_clignotant_gauche>
	HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f000 fae7 	bl	8001a68 <HAL_Delay>
	allumer_clignotant_arriere_gauche();
 800149a:	f7ff ff3f 	bl	800131c <allumer_clignotant_arriere_gauche>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <allumer_clignotants_droit>:
void allumer_clignotants_droit(void){
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
	allumer_clignotant_droit();
 80014a6:	f7ff ff23 	bl	80012f0 <allumer_clignotant_droit>
	HAL_Delay(10);
 80014aa:	200a      	movs	r0, #10
 80014ac:	f000 fadc 	bl	8001a68 <HAL_Delay>
	allumer_clignotant_arriere_droit();
 80014b0:	f7ff ff4a 	bl	8001348 <allumer_clignotant_arriere_droit>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <eteindre_clignotants_gauche>:

void eteindre_clignotants_gauche(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	eteindre_clignotant_avant_gauche();
 80014bc:	f7ff ff5a 	bl	8001374 <eteindre_clignotant_avant_gauche>
	HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 fad1 	bl	8001a68 <HAL_Delay>
	eteindre_clignotant_arriere_gauche();
 80014c6:	f7ff ff97 	bl	80013f8 <eteindre_clignotant_arriere_gauche>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <eteindre_clignotants_droit>:
void eteindre_clignotants_droit(void){
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
	eteindre_clignotant_avant_droit();
 80014d2:	f7ff ff65 	bl	80013a0 <eteindre_clignotant_avant_droit>
	HAL_Delay(10);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 fac6 	bl	8001a68 <HAL_Delay>
	eteindre_clignotant_arriere_droit();
 80014dc:	f7ff ff76 	bl	80013cc <eteindre_clignotant_arriere_droit>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_MspInit+0x54>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_MspInit+0x54>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x54>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_MspInit+0x54>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_MspInit+0x54>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_MspInit+0x54>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	f06f 0001 	mvn.w	r0, #1
 800152a:	f000 fb77 	bl	8001c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_USART_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_USART_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_USART_MspInit+0x88>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_USART_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_USART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_USART_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_USART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001596:	231c      	movs	r3, #28
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_USART_MspInit+0x8c>)
 80015b2:	f000 fb5d 	bl	8001c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	2036      	movs	r0, #54	; 0x36
 80015e2:	f000 fb1b 	bl	8001c1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015e6:	2036      	movs	r0, #54	; 0x36
 80015e8:	f000 fb34 	bl	8001c54 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_InitTick+0xa4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_InitTick+0xa4>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_InitTick+0xa4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 0210 	add.w	r2, r7, #16
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f94c 	bl	80028b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001618:	f001 f922 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_InitTick+0xa8>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9b      	lsrs	r3, r3, #18
 800162c:	3b01      	subs	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_InitTick+0xac>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <HAL_InitTick+0xb0>)
 8001634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_InitTick+0xac>)
 8001638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_InitTick+0xac>)
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_InitTick+0xac>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_InitTick+0xac>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_InitTick+0xac>)
 8001652:	f001 f95f 	bl	8002914 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <HAL_InitTick+0xac>)
 800165e:	f001 f98e 	bl	800297e <HAL_TIM_Base_Start_IT>
 8001662:	4603      	mov	r3, r0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3730      	adds	r7, #48	; 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	431bde83 	.word	0x431bde83
 8001678:	200041a8 	.word	0x200041a8
 800167c:	40001000 	.word	0x40001000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 fc77 	bl	8001fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
//  osSignalSet(linReceiverTaskHandle, LIN_RECEIVED);
  printf("Boutton Poussoir \n\r");
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <EXTI0_IRQHandler+0x14>)
 80016b8:	f003 fd52 	bl	8005160 <iprintf>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080060d4 	.word	0x080060d4

080016c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM6_DAC_IRQHandler+0x10>)
 80016ca:	f001 f97c 	bl	80029c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200041a8 	.word	0x200041a8

080016d8 <USART3_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART3_IRQHandler(void){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	slave_response();
 80016dc:	f7ff f85c 	bl	8000798 <slave_response>
//	HAL_Delay(1000);
//	printf("interrupt n° %d\n\r", interrupt_cnt);
//	interrupt_cnt++;
//	osSignalSet(linReceiverTaskHandle, LIN_RECEIVED);
//	HAL_Delay(1000);
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
	}

return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:
	}
	return len;
}

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f003 fca0 	bl	80050fc <__errno>
 80017bc:	4602      	mov	r2, r0
 80017be:	230c      	movs	r3, #12
 80017c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	200002f8 	.word	0x200002f8
 80017f0:	200041f0 	.word	0x200041f0

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <SystemInit+0x28>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <SystemInit+0x28>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <SystemInit+0x28>)
 800180a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800180e:	609a      	str	r2, [r3, #8]
#endif
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <serial_putc>:
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 6));
	NVIC_EnableIRQ(USART2_IRQn);
}

void serial_putc(char c)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	//Load data to register
	USART2->DR = c;
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <serial_putc+0x38>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x00000080));
 8001830:	bf00      	nop
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <serial_putc+0x38>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f9      	beq.n	8001832 <serial_putc+0x12>
	while(!(USART2->SR & 0x00000040));
 800183e:	bf00      	nop
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <serial_putc+0x38>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f9      	beq.n	8001840 <serial_putc+0x20>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40004400 	.word	0x40004400

0800185c <serial_puts>:

void serial_puts( char *msg)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	int cnt = 0;;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 8001868:	e009      	b.n	800187e <serial_puts+0x22>
		serial_putc(msg[cnt]);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffd4 	bl	8001820 <serial_putc>
		cnt++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
	while(msg[cnt] != '\0'){
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <serial_puts+0xe>
	}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <newLine>:

void newLine()
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
	serial_putc(10); // nouvelle ligne
 8001896:	200a      	movs	r0, #10
 8001898:	f7ff ffc2 	bl	8001820 <serial_putc>
	serial_putc(13); // retour chariot
 800189c:	200d      	movs	r0, #13
 800189e:	f7ff ffbf 	bl	8001820 <serial_putc>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <int2string>:
   return(result);
}


char * int2string(signed int num, char * s)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
     unsigned int temp=1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
     unsigned int i,sign=0,cnt=0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
     char c;

     if(num<0) {  									// Traitement du signe
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da25      	bge.n	8001910 <int2string+0x68>
         sign=1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
         num*=-1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	425b      	negs	r3, r3
 80018cc:	607b      	str	r3, [r7, #4]
     }
     while(temp>0) {
 80018ce:	e01f      	b.n	8001910 <int2string+0x68>

         s[cnt]=(num%10)+'0';    					// Conversion
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <int2string+0xe4>)
 80018d4:	fb83 1302 	smull	r1, r3, r3, r2
 80018d8:	1099      	asrs	r1, r3, #2
 80018da:	17d3      	asrs	r3, r2, #31
 80018dc:	1ac9      	subs	r1, r1, r3
 80018de:	460b      	mov	r3, r1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	1ad1      	subs	r1, r2, r3
 80018e8:	b2ca      	uxtb	r2, r1
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	440b      	add	r3, r1
 80018f0:	3230      	adds	r2, #48	; 0x30
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

         cnt++;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3301      	adds	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]

		 temp=(num/10);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a23      	ldr	r2, [pc, #140]	; (800198c <int2string+0xe4>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1092      	asrs	r2, r2, #2
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	61fb      	str	r3, [r7, #28]
         num=temp;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	607b      	str	r3, [r7, #4]
     while(temp>0) {
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1dc      	bne.n	80018d0 <int2string+0x28>
     }
     if(sign==1) {
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <int2string+0x84>
         s[cnt]=0x2D;      							// caract�re '-'
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	222d      	movs	r2, #45	; 0x2d
 8001924:	701a      	strb	r2, [r3, #0]
         cnt++;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3301      	adds	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
     }
     for(i = 0;i<(int)(cnt/2);i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	e01a      	b.n	8001968 <int2string+0xc0>

         c=s[i];
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	73fb      	strb	r3, [r7, #15]
         s[i]=s[cnt-i-1];        					// inverse le nombre
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	3b01      	subs	r3, #1
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	441a      	add	r2, r3
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	440b      	add	r3, r1
 800194e:	7812      	ldrb	r2, [r2, #0]
 8001950:	701a      	strb	r2, [r3, #0]
         s[cnt-i-1]=c;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	701a      	strb	r2, [r3, #0]
     for(i = 0;i<(int)(cnt/2);i++) {
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3301      	adds	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	429a      	cmp	r2, r3
 8001970:	d3df      	bcc.n	8001932 <int2string+0x8a>
     }
     s[cnt]='\0';     								// met un terme � la cha�ne de caract�res
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
     return s;
 800197c:	683b      	ldr	r3, [r7, #0]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	66666667 	.word	0x66666667

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001994:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001996:	e003      	b.n	80019a0 <LoopCopyDataInit>

08001998 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800199a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800199c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199e:	3104      	adds	r1, #4

080019a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a8:	d3f6      	bcc.n	8001998 <CopyDataInit>
  ldr  r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019ac:	e002      	b.n	80019b4 <LoopFillZerobss>

080019ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b0:	f842 3b04 	str.w	r3, [r2], #4

080019b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b8:	d3f9      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ba:	f7ff ff1b 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f003 fba3 	bl	8005108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7ff fa5d 	bl	8000e80 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019cc:	080061b0 	.word	0x080061b0
  ldr  r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80019d8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80019dc:	200041f0 	.word	0x200041f0

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f8fa 	bl	8001c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fdda 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fd64 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	200041e8 	.word	0x200041e8

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200041e8 	.word	0x200041e8

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000000c 	.word	0x2000000c

08001aac <__NVIC_SetPriorityGrouping>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff4c 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2e:	f7ff ff61 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	6978      	ldr	r0, [r7, #20]
 8001c3a:	f7ff ffb1 	bl	8001ba0 <NVIC_EncodePriority>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff80 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff54 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e16b      	b.n	8001f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 815a 	bne.w	8001f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00b      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0xfc>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80b4 	beq.w	8001f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_GPIO_Init+0x308>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a5e      	ldr	r2, [pc, #376]	; (8001f78 <HAL_GPIO_Init+0x308>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <HAL_GPIO_Init+0x308>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <HAL_GPIO_Init+0x30c>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x310>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d02b      	beq.n	8001e96 <HAL_GPIO_Init+0x226>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a50      	ldr	r2, [pc, #320]	; (8001f84 <HAL_GPIO_Init+0x314>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x222>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_GPIO_Init+0x318>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x21e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4e      	ldr	r2, [pc, #312]	; (8001f8c <HAL_GPIO_Init+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x21a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <HAL_GPIO_Init+0x320>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x216>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x324>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x212>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <HAL_GPIO_Init+0x328>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x20e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_GPIO_Init+0x32c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x20a>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00e      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	e00c      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e7e:	2306      	movs	r3, #6
 8001e80:	e00a      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e86:	2304      	movs	r3, #4
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x228>
 8001e96:	2300      	movs	r3, #0
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_GPIO_Init+0x30c>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_GPIO_Init+0x330>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	f67f ae90 	bls.w	8001c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3724      	adds	r7, #36	; 0x24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40021c00 	.word	0x40021c00
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f806 	bl	8001fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e25b      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d075      	beq.n	80020f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200a:	4ba3      	ldr	r3, [pc, #652]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d00c      	beq.n	8002030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4ba0      	ldr	r3, [pc, #640]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	2b08      	cmp	r3, #8
 8002020:	d112      	bne.n	8002048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b9d      	ldr	r3, [pc, #628]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202e:	d10b      	bne.n	8002048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	4b99      	ldr	r3, [pc, #612]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05b      	beq.n	80020f4 <HAL_RCC_OscConfig+0x108>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d157      	bne.n	80020f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e236      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x74>
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a90      	ldr	r2, [pc, #576]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x98>
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a8a      	ldr	r2, [pc, #552]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a87      	ldr	r2, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a83      	ldr	r2, [pc, #524]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a80      	ldr	r2, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fcd4 	bl	8001a50 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fcd0 	bl	8001a50 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1fb      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xc0>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fcc0 	bl	8001a50 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fcbc 	bl	8001a50 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1e7      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0xe8>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b62      	ldr	r3, [pc, #392]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x152>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1bb      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4952      	ldr	r1, [pc, #328]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_RCC_OscConfig+0x2b0>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff fc75 	bl	8001a50 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fc71 	bl	8001a50 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e19c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4940      	ldr	r1, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x2b0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff fc54 	bl	8001a50 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc50 	bl	8001a50 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e17b      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d030      	beq.n	8002238 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x2b4>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff fc34 	bl	8001a50 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fc30 	bl	8001a50 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e15b      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x200>
 800220a:	e015      	b.n	8002238 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_OscConfig+0x2b4>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff fc1d 	bl	8001a50 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221a:	f7ff fc19 	bl	8001a50 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e144      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a0 	beq.w	8002386 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x2b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d121      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_OscConfig+0x2b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_RCC_OscConfig+0x2b8>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff fbdf 	bl	8001a50 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e011      	b.n	80022ba <HAL_RCC_OscConfig+0x2ce>
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	42470000 	.word	0x42470000
 80022a0:	42470e80 	.word	0x42470e80
 80022a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a8:	f7ff fbd2 	bl	8001a50 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0fd      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x2f0>
 80022ce:	4b7d      	ldr	r3, [pc, #500]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a7c      	ldr	r2, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	e01c      	b.n	8002316 <HAL_RCC_OscConfig+0x32a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x312>
 80022e4:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a76      	ldr	r2, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	4a73      	ldr	r2, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	; 0x70
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0x32a>
 80022fe:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a70      	ldr	r2, [pc, #448]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	4b6e      	ldr	r3, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a6d      	ldr	r2, [pc, #436]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d015      	beq.n	800234a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7ff fb97 	bl	8001a50 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7ff fb93 	bl	8001a50 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0bc      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCC_OscConfig+0x33a>
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb81 	bl	8001a50 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff fb7d 	bl	8001a50 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0a6      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8092 	beq.w	80024b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d05c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d141      	bne.n	8002428 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <HAL_RCC_OscConfig+0x4dc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fb51 	bl	8001a50 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff fb4d 	bl	8001a50 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e078      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	019b      	lsls	r3, r3, #6
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	3b01      	subs	r3, #1
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
 80023f4:	4933      	ldr	r1, [pc, #204]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff fb26 	bl	8001a50 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff fb22 	bl	8001a50 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04d      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x41c>
 8002426:	e045      	b.n	80024b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x4dc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fb0f 	bl	8001a50 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fb0b 	bl	8001a50 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e036      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x44a>
 8002454:	e02e      	b.n	80024b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e029      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_RCC_OscConfig+0x4d8>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	429a      	cmp	r2, r3
 8002474:	d11c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d115      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002490:	4293      	cmp	r3, r2
 8002492:	d10d      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470060 	.word	0x42470060

080024cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0cc      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d90c      	bls.n	8002508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b65      	ldr	r3, [pc, #404]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d044      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d119      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002586:	2b03      	cmp	r3, #3
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e06f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e067      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff fa48 	bl	8001a50 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff fa44 	bl	8001a50 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04f      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d20c      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4601      	mov	r1, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	fa21 f303 	lsr.w	r3, r1, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe ffaa 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00
 8002688:	40023800 	.word	0x40023800
 800268c:	080060f0 	.word	0x080060f0
 8002690:	20000004 	.word	0x20000004
 8002694:	20000008 	.word	0x20000008

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x32>
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d008      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x38>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 80b4 	bne.w	800282c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026c6:	60bb      	str	r3, [r7, #8]
       break;
 80026c8:	e0b3      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e0b0      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04a      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	ea03 0501 	and.w	r5, r3, r1
 80026fc:	ea04 0602 	and.w	r6, r4, r2
 8002700:	4629      	mov	r1, r5
 8002702:	4632      	mov	r2, r6
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	f04f 0400 	mov.w	r4, #0
 800270c:	0154      	lsls	r4, r2, #5
 800270e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002712:	014b      	lsls	r3, r1, #5
 8002714:	4619      	mov	r1, r3
 8002716:	4622      	mov	r2, r4
 8002718:	1b49      	subs	r1, r1, r5
 800271a:	eb62 0206 	sbc.w	r2, r2, r6
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f04f 0400 	mov.w	r4, #0
 8002726:	0194      	lsls	r4, r2, #6
 8002728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800272c:	018b      	lsls	r3, r1, #6
 800272e:	1a5b      	subs	r3, r3, r1
 8002730:	eb64 0402 	sbc.w	r4, r4, r2
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	00e2      	lsls	r2, r4, #3
 800273e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002742:	00d9      	lsls	r1, r3, #3
 8002744:	460b      	mov	r3, r1
 8002746:	4614      	mov	r4, r2
 8002748:	195b      	adds	r3, r3, r5
 800274a:	eb44 0406 	adc.w	r4, r4, r6
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	0262      	lsls	r2, r4, #9
 8002758:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	460b      	mov	r3, r1
 8002760:	4614      	mov	r4, r2
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f04f 0400 	mov.w	r4, #0
 800276c:	461a      	mov	r2, r3
 800276e:	4623      	mov	r3, r4
 8002770:	f7fd fd7e 	bl	8000270 <__aeabi_uldivmod>
 8002774:	4603      	mov	r3, r0
 8002776:	460c      	mov	r4, r1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e049      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	f240 11ff 	movw	r1, #511	; 0x1ff
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	ea03 0501 	and.w	r5, r3, r1
 8002792:	ea04 0602 	and.w	r6, r4, r2
 8002796:	4629      	mov	r1, r5
 8002798:	4632      	mov	r2, r6
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	f04f 0400 	mov.w	r4, #0
 80027a2:	0154      	lsls	r4, r2, #5
 80027a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a8:	014b      	lsls	r3, r1, #5
 80027aa:	4619      	mov	r1, r3
 80027ac:	4622      	mov	r2, r4
 80027ae:	1b49      	subs	r1, r1, r5
 80027b0:	eb62 0206 	sbc.w	r2, r2, r6
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	f04f 0400 	mov.w	r4, #0
 80027bc:	0194      	lsls	r4, r2, #6
 80027be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027c2:	018b      	lsls	r3, r1, #6
 80027c4:	1a5b      	subs	r3, r3, r1
 80027c6:	eb64 0402 	sbc.w	r4, r4, r2
 80027ca:	f04f 0100 	mov.w	r1, #0
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	00e2      	lsls	r2, r4, #3
 80027d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d8:	00d9      	lsls	r1, r3, #3
 80027da:	460b      	mov	r3, r1
 80027dc:	4614      	mov	r4, r2
 80027de:	195b      	adds	r3, r3, r5
 80027e0:	eb44 0406 	adc.w	r4, r4, r6
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	02a2      	lsls	r2, r4, #10
 80027ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027f2:	0299      	lsls	r1, r3, #10
 80027f4:	460b      	mov	r3, r1
 80027f6:	4614      	mov	r4, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	4621      	mov	r1, r4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f04f 0400 	mov.w	r4, #0
 8002802:	461a      	mov	r2, r3
 8002804:	4623      	mov	r3, r4
 8002806:	f7fd fd33 	bl	8000270 <__aeabi_uldivmod>
 800280a:	4603      	mov	r3, r0
 800280c:	460c      	mov	r4, r1
 800280e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	60bb      	str	r3, [r7, #8]
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800282e:	60bb      	str	r3, [r7, #8]
      break;
 8002830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002832:	68bb      	ldr	r3, [r7, #8]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400
 8002844:	007a1200 	.word	0x007a1200

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08006100 	.word	0x08006100

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffdc 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002890:	4601      	mov	r1, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0b5b      	lsrs	r3, r3, #13
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08006100 	.word	0x08006100

080028b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	220f      	movs	r2, #15
 80028be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_GetClockConfig+0x5c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_RCC_GetClockConfig+0x5c>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCC_GetClockConfig+0x5c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_GetClockConfig+0x5c>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCC_GetClockConfig+0x60>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	601a      	str	r2, [r3, #0]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e01d      	b.n	8002962 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f815 	bl	800296a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 f968 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d007      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d122      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d11b      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0202 	mvn.w	r2, #2
 80029f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8ee 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002a0e:	e005      	b.n	8002a1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f8e0 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8f1 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d122      	bne.n	8002a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d11b      	bne.n	8002a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0204 	mvn.w	r2, #4
 8002a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f8c4 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002a62:	e005      	b.n	8002a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8b6 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8c7 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d122      	bne.n	8002aca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d11b      	bne.n	8002aca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0208 	mvn.w	r2, #8
 8002a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f89a 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002ab6:	e005      	b.n	8002ac4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f88c 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f89d 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d122      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d11b      	bne.n	8002b1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0210 	mvn.w	r2, #16
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2208      	movs	r2, #8
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f870 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e005      	b.n	8002b18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f862 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f873 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0201 	mvn.w	r2, #1
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe fb39 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f903 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d10e      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f838 	bl	8002c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0220 	mvn.w	r2, #32
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8cd 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d00f      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d027      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d023      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d017      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <TIM_Base_SetConfig+0x128>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <TIM_Base_SetConfig+0x12c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <TIM_Base_SetConfig+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0x134>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <TIM_Base_SetConfig+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <TIM_Base_SetConfig+0x13c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d108      	bne.n	8002cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0xf8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40010400 	.word	0x40010400
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	40001800 	.word	0x40001800
 8002d60:	40001c00 	.word	0x40001c00
 8002d64:	40002000 	.word	0x40002000

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e033      	b.n	8002e0a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fbc0 	bl	800153c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f913 	bl	8002ff0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b088      	sub	sp, #32
 8002e16:	af02      	add	r7, sp, #8
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]

  if (husart->State == HAL_USART_STATE_READY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	f040 8083 	bne.w	8002f3a <HAL_USART_Transmit+0x128>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_USART_Transmit+0x2e>
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_USART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e07b      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_USART_Transmit+0x40>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e074      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2212      	movs	r2, #18
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e68:	f7fe fdf2 	bl	8001a50 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002e7a:	e042      	b.n	8002f02 <HAL_USART_Transmit+0xf0>
    {
      husart->TxXferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      if (husart->Init.WordLength == USART_WORDLENGTH_9B)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e92:	d122      	bne.n	8002eda <HAL_USART_Transmit+0xc8>
      {
        /* Wait for TC flag in order to write data in DR */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f850 	bl	8002f44 <USART_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_USART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e046      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pTxData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        husart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	605a      	str	r2, [r3, #4]
        if (husart->Init.Parity == USART_PARITY_NONE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_USART_Transmit+0xc0>
        {
          pTxData += 2U;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	e017      	b.n	8002f02 <HAL_USART_Transmit+0xf0>
        }
        else
        {
          pTxData += 1U;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	e013      	b.n	8002f02 <HAL_USART_Transmit+0xf0>
        }
      }
      else
      {
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f82d 	bl	8002f44 <USART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_USART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e023      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
        }
        husart->Instance->DR = (*pTxData++ & (uint8_t)0xFF);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
    while (husart->TxXferCount > 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1b7      	bne.n	8002e7c <HAL_USART_Transmit+0x6a>
      }
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f814 	bl	8002f44 <USART_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_USART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e00a      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
    }

    husart->State = HAL_USART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_USART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f54:	e038      	b.n	8002fc8 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d034      	beq.n	8002fc8 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <USART_WaitOnFlagUntilTimeout+0x30>
 8002f64:	f7fe fd74 	bl	8001a50 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d229      	bcs.n	8002fc8 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f82:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0220 	bic.w	r2, r2, #32
 8002f92:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa2:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e00f      	b.n	8002fe8 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d0b7      	beq.n	8002f56 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 020c 	bic.w	r2, r2, #12
 800300c:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800301c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003026:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003032:	431a      	orrs	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800303c:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003054:	f023 030c 	bic.w	r3, r3, #12
 8003058:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800308a:	615a      	str	r2, [r3, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4ac3      	ldr	r2, [pc, #780]	; (80033a0 <USART_SetConfig+0x3b0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d005      	beq.n	80030a2 <USART_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4ac2      	ldr	r2, [pc, #776]	; (80033a4 <USART_SetConfig+0x3b4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	f040 80bd 	bne.w	800321c <USART_SetConfig+0x22c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a2:	f7ff fbf1 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80030a6:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	461d      	mov	r5, r3
 80030ac:	f04f 0600 	mov.w	r6, #0
 80030b0:	46a8      	mov	r8, r5
 80030b2:	46b1      	mov	r9, r6
 80030b4:	eb18 0308 	adds.w	r3, r8, r8
 80030b8:	eb49 0409 	adc.w	r4, r9, r9
 80030bc:	4698      	mov	r8, r3
 80030be:	46a1      	mov	r9, r4
 80030c0:	eb18 0805 	adds.w	r8, r8, r5
 80030c4:	eb49 0906 	adc.w	r9, r9, r6
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030dc:	4688      	mov	r8, r1
 80030de:	4691      	mov	r9, r2
 80030e0:	eb18 0005 	adds.w	r0, r8, r5
 80030e4:	eb49 0106 	adc.w	r1, r9, r6
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	461d      	mov	r5, r3
 80030ee:	f04f 0600 	mov.w	r6, #0
 80030f2:	196b      	adds	r3, r5, r5
 80030f4:	eb46 0406 	adc.w	r4, r6, r6
 80030f8:	461a      	mov	r2, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	f7fd f8b8 	bl	8000270 <__aeabi_uldivmod>
 8003100:	4603      	mov	r3, r0
 8003102:	460c      	mov	r4, r1
 8003104:	461a      	mov	r2, r3
 8003106:	4ba8      	ldr	r3, [pc, #672]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003108:	fba3 2302 	umull	r2, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	461d      	mov	r5, r3
 8003116:	f04f 0600 	mov.w	r6, #0
 800311a:	46a9      	mov	r9, r5
 800311c:	46b2      	mov	sl, r6
 800311e:	eb19 0309 	adds.w	r3, r9, r9
 8003122:	eb4a 040a 	adc.w	r4, sl, sl
 8003126:	4699      	mov	r9, r3
 8003128:	46a2      	mov	sl, r4
 800312a:	eb19 0905 	adds.w	r9, r9, r5
 800312e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800313e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003146:	4689      	mov	r9, r1
 8003148:	4692      	mov	sl, r2
 800314a:	eb19 0005 	adds.w	r0, r9, r5
 800314e:	eb4a 0106 	adc.w	r1, sl, r6
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	461d      	mov	r5, r3
 8003158:	f04f 0600 	mov.w	r6, #0
 800315c:	196b      	adds	r3, r5, r5
 800315e:	eb46 0406 	adc.w	r4, r6, r6
 8003162:	461a      	mov	r2, r3
 8003164:	4623      	mov	r3, r4
 8003166:	f7fd f883 	bl	8000270 <__aeabi_uldivmod>
 800316a:	4603      	mov	r3, r0
 800316c:	460c      	mov	r4, r1
 800316e:	461a      	mov	r2, r3
 8003170:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003172:	fba3 1302 	umull	r1, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2164      	movs	r1, #100	; 0x64
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	3332      	adds	r3, #50	; 0x32
 8003184:	4a88      	ldr	r2, [pc, #544]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003192:	4498      	add	r8, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	461d      	mov	r5, r3
 8003198:	f04f 0600 	mov.w	r6, #0
 800319c:	46a9      	mov	r9, r5
 800319e:	46b2      	mov	sl, r6
 80031a0:	eb19 0309 	adds.w	r3, r9, r9
 80031a4:	eb4a 040a 	adc.w	r4, sl, sl
 80031a8:	4699      	mov	r9, r3
 80031aa:	46a2      	mov	sl, r4
 80031ac:	eb19 0905 	adds.w	r9, r9, r5
 80031b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031c8:	4689      	mov	r9, r1
 80031ca:	4692      	mov	sl, r2
 80031cc:	eb19 0005 	adds.w	r0, r9, r5
 80031d0:	eb4a 0106 	adc.w	r1, sl, r6
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	461d      	mov	r5, r3
 80031da:	f04f 0600 	mov.w	r6, #0
 80031de:	196b      	adds	r3, r5, r5
 80031e0:	eb46 0406 	adc.w	r4, r6, r6
 80031e4:	461a      	mov	r2, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	f7fd f842 	bl	8000270 <__aeabi_uldivmod>
 80031ec:	4603      	mov	r3, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b6d      	ldr	r3, [pc, #436]	; (80033a8 <USART_SetConfig+0x3b8>)
 80031f4:	fba3 1302 	umull	r1, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	2164      	movs	r1, #100	; 0x64
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	3332      	adds	r3, #50	; 0x32
 8003206:	4a68      	ldr	r2, [pc, #416]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	f003 0207 	and.w	r2, r3, #7
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4442      	add	r2, r8
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	e0bb      	b.n	8003394 <USART_SetConfig+0x3a4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff fb20 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003220:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	461d      	mov	r5, r3
 8003226:	f04f 0600 	mov.w	r6, #0
 800322a:	46a8      	mov	r8, r5
 800322c:	46b1      	mov	r9, r6
 800322e:	eb18 0308 	adds.w	r3, r8, r8
 8003232:	eb49 0409 	adc.w	r4, r9, r9
 8003236:	4698      	mov	r8, r3
 8003238:	46a1      	mov	r9, r4
 800323a:	eb18 0805 	adds.w	r8, r8, r5
 800323e:	eb49 0906 	adc.w	r9, r9, r6
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800324e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003252:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003256:	4688      	mov	r8, r1
 8003258:	4691      	mov	r9, r2
 800325a:	eb18 0005 	adds.w	r0, r8, r5
 800325e:	eb49 0106 	adc.w	r1, r9, r6
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	461d      	mov	r5, r3
 8003268:	f04f 0600 	mov.w	r6, #0
 800326c:	196b      	adds	r3, r5, r5
 800326e:	eb46 0406 	adc.w	r4, r6, r6
 8003272:	461a      	mov	r2, r3
 8003274:	4623      	mov	r3, r4
 8003276:	f7fc fffb 	bl	8000270 <__aeabi_uldivmod>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	461a      	mov	r2, r3
 8003280:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003282:	fba3 2302 	umull	r2, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	461d      	mov	r5, r3
 8003290:	f04f 0600 	mov.w	r6, #0
 8003294:	46a9      	mov	r9, r5
 8003296:	46b2      	mov	sl, r6
 8003298:	eb19 0309 	adds.w	r3, r9, r9
 800329c:	eb4a 040a 	adc.w	r4, sl, sl
 80032a0:	4699      	mov	r9, r3
 80032a2:	46a2      	mov	sl, r4
 80032a4:	eb19 0905 	adds.w	r9, r9, r5
 80032a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032c0:	4689      	mov	r9, r1
 80032c2:	4692      	mov	sl, r2
 80032c4:	eb19 0005 	adds.w	r0, r9, r5
 80032c8:	eb4a 0106 	adc.w	r1, sl, r6
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	461d      	mov	r5, r3
 80032d2:	f04f 0600 	mov.w	r6, #0
 80032d6:	196b      	adds	r3, r5, r5
 80032d8:	eb46 0406 	adc.w	r4, r6, r6
 80032dc:	461a      	mov	r2, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	f7fc ffc6 	bl	8000270 <__aeabi_uldivmod>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <USART_SetConfig+0x3b8>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	4498      	add	r8, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	461d      	mov	r5, r3
 8003312:	f04f 0600 	mov.w	r6, #0
 8003316:	46a9      	mov	r9, r5
 8003318:	46b2      	mov	sl, r6
 800331a:	eb19 0309 	adds.w	r3, r9, r9
 800331e:	eb4a 040a 	adc.w	r4, sl, sl
 8003322:	4699      	mov	r9, r3
 8003324:	46a2      	mov	sl, r4
 8003326:	eb19 0905 	adds.w	r9, r9, r5
 800332a:	eb4a 0a06 	adc.w	sl, sl, r6
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800333e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003342:	4689      	mov	r9, r1
 8003344:	4692      	mov	sl, r2
 8003346:	eb19 0005 	adds.w	r0, r9, r5
 800334a:	eb4a 0106 	adc.w	r1, sl, r6
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	461d      	mov	r5, r3
 8003354:	f04f 0600 	mov.w	r6, #0
 8003358:	196b      	adds	r3, r5, r5
 800335a:	eb46 0406 	adc.w	r4, r6, r6
 800335e:	461a      	mov	r2, r3
 8003360:	4623      	mov	r3, r4
 8003362:	f7fc ff85 	bl	8000270 <__aeabi_uldivmod>
 8003366:	4603      	mov	r3, r0
 8003368:	460c      	mov	r4, r1
 800336a:	461a      	mov	r2, r3
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <USART_SetConfig+0x3b8>)
 800336e:	fba3 1302 	umull	r1, r3, r3, r2
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2164      	movs	r1, #100	; 0x64
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3332      	adds	r3, #50	; 0x32
 8003380:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <USART_SetConfig+0x3b8>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	f003 0207 	and.w	r2, r3, #7
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4442      	add	r2, r8
 8003392:	609a      	str	r2, [r3, #8]
  }
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800339e:	bf00      	nop
 80033a0:	40011000 	.word	0x40011000
 80033a4:	40011400 	.word	0x40011400
 80033a8:	51eb851f 	.word	0x51eb851f

080033ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033be:	2b84      	cmp	r3, #132	; 0x84
 80033c0:	d005      	beq.n	80033ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	3303      	adds	r3, #3
 80033cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033ce:	68fb      	ldr	r3, [r7, #12]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033e2:	f3ef 8305 	mrs	r3, IPSR
 80033e6:	607b      	str	r3, [r7, #4]
  return(result);
 80033e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003404:	f000 fcca 	bl	8003d9c <vTaskStartScheduler>
  
  return osOK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}

0800340e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800340e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003410:	b089      	sub	sp, #36	; 0x24
 8003412:	af04      	add	r7, sp, #16
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <osThreadCreate+0x54>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01c      	beq.n	8003462 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685c      	ldr	r4, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681d      	ldr	r5, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691e      	ldr	r6, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ffb6 	bl	80033ac <makeFreeRtosPriority>
 8003440:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344a:	9202      	str	r2, [sp, #8]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	9100      	str	r1, [sp, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4632      	mov	r2, r6
 8003454:	4629      	mov	r1, r5
 8003456:	4620      	mov	r0, r4
 8003458:	f000 fadd 	bl	8003a16 <xTaskCreateStatic>
 800345c:	4603      	mov	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e01c      	b.n	800349c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685c      	ldr	r4, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800346e:	b29e      	uxth	r6, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff98 	bl	80033ac <makeFreeRtosPriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	9200      	str	r2, [sp, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	4632      	mov	r2, r6
 800348a:	4629      	mov	r1, r5
 800348c:	4620      	mov	r0, r4
 800348e:	f000 fb1c 	bl	8003aca <xTaskCreate>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d001      	beq.n	800349c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800349c:	68fb      	ldr	r3, [r7, #12]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <osDelay+0x16>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	e000      	b.n	80034be <osDelay+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fc38 	bl	8003d34 <vTaskDelay>
  
  return osOK;
 80034c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80034e2:	f7ff ff7b 	bl	80033dc <inHandlerMode>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01c      	beq.n	8003526 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	2201      	movs	r2, #1
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f001 f8a7 	bl	8004650 <xTaskGenericNotifyFromISR>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <osSignalSet+0x3e>
      return 0x80000000;
 8003508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800350c:	e019      	b.n	8003542 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <osSignalSet+0x70>
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <osSignalSet+0x7c>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	e00c      	b.n	8003540 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	2201      	movs	r2, #1
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 ffdc 	bl	80044ec <xTaskGenericNotify>
 8003534:	4603      	mov	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d002      	beq.n	8003540 <osSignalSet+0x70>
    return 0x80000000;
 800353a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800353e:	e000      	b.n	8003542 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003540:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d103      	bne.n	8003574 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e009      	b.n	8003588 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <osSignalWait+0x38>
      ticks = 1;
 8003584:	2301      	movs	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003588:	f7ff ff28 	bl	80033dc <inHandlerMode>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003592:	2382      	movs	r3, #130	; 0x82
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	e01b      	b.n	80035d0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	f107 0310 	add.w	r3, r7, #16
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2000      	movs	r0, #0
 80035a4:	f000 ff48 	bl	8004438 <xTaskNotifyWait>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d008      	beq.n	80035c0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <osSignalWait+0x6a>
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e00a      	b.n	80035d0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e007      	b.n	80035d0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da02      	bge.n	80035cc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80035c6:	2386      	movs	r3, #134	; 0x86
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e001      	b.n	80035d0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80035cc:	2308      	movs	r3, #8
 80035ce:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	461c      	mov	r4, r3
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	3724      	adds	r7, #36	; 0x24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd90      	pop	{r4, r7, pc}

080035e8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d012      	beq.n	8003620 <osMessageCreate+0x38>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68dc      	ldr	r4, [r3, #12]
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	4623      	mov	r3, r4
 8003618:	f000 f92c 	bl	8003874 <xQueueGenericCreateStatic>
 800361c:	4603      	mov	r3, r0
 800361e:	e008      	b.n	8003632 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	f000 f995 	bl	800395a <xQueueGenericCreate>
 8003630:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f103 0208 	add.w	r2, r3, #8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f04f 32ff 	mov.w	r2, #4294967295
 8003652:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f103 0208 	add.w	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f103 0208 	add.w	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d103      	bne.n	80036fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e00c      	b.n	8003716 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3308      	adds	r3, #8
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e002      	b.n	800370a <vListInsert+0x2e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d2f6      	bcs.n	8003704 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6852      	ldr	r2, [r2, #4]
 800376e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d103      	bne.n	8003782 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	1e5a      	subs	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	e7fe      	b.n	80037ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80037cc:	f001 f9a6 	bl	8004b1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	441a      	add	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	3b01      	subs	r3, #1
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d114      	bne.n	800384c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01a      	beq.n	8003860 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3310      	adds	r3, #16
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fcce 	bl	80041d0 <xTaskRemoveFromEventList>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <xQueueGenericReset+0xcc>)
 800383c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	e009      	b.n	8003860 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3310      	adds	r3, #16
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fef2 	bl	800363a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3324      	adds	r3, #36	; 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff feed 	bl	800363a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003860:	f001 f98a 	bl	8004b78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003864:	2301      	movs	r3, #1
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xQueueGenericCreateStatic+0x28>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	e7fe      	b.n	800389a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <xQueueGenericCreateStatic+0x42>
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <xQueueGenericCreateStatic+0x4e>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <xQueueGenericCreateStatic+0x52>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <xQueueGenericCreateStatic+0x54>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <xQueueGenericCreateStatic+0x6c>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	e7fe      	b.n	80038de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <xQueueGenericCreateStatic+0x78>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <xQueueGenericCreateStatic+0x7c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <xQueueGenericCreateStatic+0x7e>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xQueueGenericCreateStatic+0x96>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e7fe      	b.n	8003908 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800390a:	2348      	movs	r3, #72	; 0x48
 800390c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b48      	cmp	r3, #72	; 0x48
 8003912:	d009      	beq.n	8003928 <xQueueGenericCreateStatic+0xb4>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e7fe      	b.n	8003926 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003928:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800393c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f844 	bl	80039d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003952:	4618      	mov	r0, r3
 8003954:	3730      	adds	r7, #48	; 0x30
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800395a:	b580      	push	{r7, lr}
 800395c:	b08a      	sub	sp, #40	; 0x28
 800395e:	af02      	add	r7, sp, #8
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <xQueueGenericCreate+0x28>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e7fe      	b.n	8003980 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e004      	b.n	8003998 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3348      	adds	r3, #72	; 0x48
 800399c:	4618      	mov	r0, r3
 800399e:	f001 f9d7 	bl	8004d50 <pvPortMalloc>
 80039a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3348      	adds	r3, #72	; 0x48
 80039b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039bc:	79fa      	ldrb	r2, [r7, #7]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f805 	bl	80039d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039ce:	69bb      	ldr	r3, [r7, #24]
	}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e002      	b.n	80039fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a06:	2101      	movs	r1, #1
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	f7ff fecb 	bl	80037a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08e      	sub	sp, #56	; 0x38
 8003a1a:	af04      	add	r7, sp, #16
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <xTaskCreateStatic+0x28>
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	e7fe      	b.n	8003a3c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <xTaskCreateStatic+0x42>
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e7fe      	b.n	8003a56 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a58:	2354      	movs	r3, #84	; 0x54
 8003a5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b54      	cmp	r3, #84	; 0x54
 8003a60:	d009      	beq.n	8003a76 <xTaskCreateStatic+0x60>
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e7fe      	b.n	8003a74 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01e      	beq.n	8003abc <xTaskCreateStatic+0xa6>
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a96:	2300      	movs	r3, #0
 8003a98:	9303      	str	r3, [sp, #12]
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	9302      	str	r3, [sp, #8]
 8003a9e:	f107 0314 	add.w	r3, r7, #20
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f850 	bl	8003b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab6:	f000 f8d3 	bl	8003c60 <prvAddNewTaskToReadyList>
 8003aba:	e001      	b.n	8003ac0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ac0:	697b      	ldr	r3, [r7, #20]
	}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3728      	adds	r7, #40	; 0x28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08c      	sub	sp, #48	; 0x30
 8003ace:	af04      	add	r7, sp, #16
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f936 	bl	8004d50 <pvPortMalloc>
 8003ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00e      	beq.n	8003b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aec:	2054      	movs	r0, #84	; 0x54
 8003aee:	f001 f92f 	bl	8004d50 <pvPortMalloc>
 8003af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	e005      	b.n	8003b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	f001 f9e6 	bl	8004ed4 <vPortFree>
 8003b08:	e001      	b.n	8003b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	9302      	str	r3, [sp, #8]
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f80e 	bl	8003b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b38:	69f8      	ldr	r0, [r7, #28]
 8003b3a:	f000 f891 	bl	8003c60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e002      	b.n	8003b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <prvInitialiseNewTask+0x46>
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e7fe      	b.n	8003b98 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01f      	beq.n	8003be0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e012      	b.n	8003bcc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	7819      	ldrb	r1, [r3, #0]
 8003bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3334      	adds	r3, #52	; 0x34
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d9e9      	bls.n	8003ba6 <prvInitialiseNewTask+0x52>
 8003bd2:	e000      	b.n	8003bd6 <prvInitialiseNewTask+0x82>
			{
				break;
 8003bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bde:	e003      	b.n	8003be8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d901      	bls.n	8003bf2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bee:	2306      	movs	r3, #6
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fd36 	bl	800367a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	3318      	adds	r3, #24
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd31 	bl	800367a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f1c3 0207 	rsb	r2, r3, #7
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	69b8      	ldr	r0, [r7, #24]
 8003c42:	f000 fe43 	bl	80048cc <pxPortInitialiseStack>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c58:	bf00      	nop
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c68:	f000 ff58 	bl	8004b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <prvAddNewTaskToReadyList+0xb8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <prvAddNewTaskToReadyList+0xb8>)
 8003c74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <prvAddNewTaskToReadyList+0xbc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c7e:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <prvAddNewTaskToReadyList+0xbc>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <prvAddNewTaskToReadyList+0xb8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d110      	bne.n	8003cae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c8c:	f000 fb1a 	bl	80042c4 <prvInitialiseTaskLists>
 8003c90:	e00d      	b.n	8003cae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <prvAddNewTaskToReadyList+0xc0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <prvAddNewTaskToReadyList+0xbc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d802      	bhi.n	8003cae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <prvAddNewTaskToReadyList+0xbc>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <prvAddNewTaskToReadyList+0xc4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <prvAddNewTaskToReadyList+0xc4>)
 8003cb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <prvAddNewTaskToReadyList+0xc8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <prvAddNewTaskToReadyList+0xc8>)
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <prvAddNewTaskToReadyList+0xcc>)
 8003cd8:	441a      	add	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7ff fcd7 	bl	8003694 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ce6:	f000 ff47 	bl	8004b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <prvAddNewTaskToReadyList+0xc0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <prvAddNewTaskToReadyList+0xbc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d207      	bcs.n	8003d10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <prvAddNewTaskToReadyList+0xd0>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200003fc 	.word	0x200003fc
 8003d1c:	200002fc 	.word	0x200002fc
 8003d20:	20000408 	.word	0x20000408
 8003d24:	20000418 	.word	0x20000418
 8003d28:	20000404 	.word	0x20000404
 8003d2c:	20000300 	.word	0x20000300
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <vTaskDelay+0x60>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <vTaskDelay+0x2e>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	e7fe      	b.n	8003d60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d62:	f000 f879 	bl	8003e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d66:	2100      	movs	r1, #0
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fd49 	bl	8004800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d6e:	f000 f881 	bl	8003e74 <xTaskResumeAll>
 8003d72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d107      	bne.n	8003d8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <vTaskDelay+0x64>)
 8003d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000424 	.word	0x20000424
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003daa:	463a      	mov	r2, r7
 8003dac:	1d39      	adds	r1, r7, #4
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd f836 	bl	8000e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	9202      	str	r2, [sp, #8]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	460a      	mov	r2, r1
 8003dca:	491d      	ldr	r1, [pc, #116]	; (8003e40 <vTaskStartScheduler+0xa4>)
 8003dcc:	481d      	ldr	r0, [pc, #116]	; (8003e44 <vTaskStartScheduler+0xa8>)
 8003dce:	f7ff fe22 	bl	8003a16 <xTaskCreateStatic>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <vTaskStartScheduler+0xac>)
 8003dd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <vTaskStartScheduler+0xac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e001      	b.n	8003dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d115      	bne.n	8003e1c <vTaskStartScheduler+0x80>
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <vTaskStartScheduler+0xb0>)
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <vTaskStartScheduler+0xb4>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e10:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <vTaskStartScheduler+0xb8>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e16:	f000 fde3 	bl	80049e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e1a:	e00d      	b.n	8003e38 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d109      	bne.n	8003e38 <vTaskStartScheduler+0x9c>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e7fe      	b.n	8003e36 <vTaskStartScheduler+0x9a>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	080060e8 	.word	0x080060e8
 8003e44:	08004295 	.word	0x08004295
 8003e48:	20000420 	.word	0x20000420
 8003e4c:	2000041c 	.word	0x2000041c
 8003e50:	20000408 	.word	0x20000408
 8003e54:	20000400 	.word	0x20000400

08003e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <vTaskSuspendAll+0x18>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <vTaskSuspendAll+0x18>)
 8003e64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20000424 	.word	0x20000424

08003e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <xTaskResumeAll+0x114>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <xTaskResumeAll+0x2a>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	e7fe      	b.n	8003e9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e9e:	f000 fe3d 	bl	8004b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <xTaskResumeAll+0x114>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	4a37      	ldr	r2, [pc, #220]	; (8003f88 <xTaskResumeAll+0x114>)
 8003eaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <xTaskResumeAll+0x114>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d161      	bne.n	8003f78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eb4:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <xTaskResumeAll+0x118>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05d      	beq.n	8003f78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ebc:	e02e      	b.n	8003f1c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <xTaskResumeAll+0x11c>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3318      	adds	r3, #24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fc3f 	bl	800374e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fc3a 	bl	800374e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <xTaskResumeAll+0x120>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <xTaskResumeAll+0x120>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <xTaskResumeAll+0x124>)
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7ff fbc6 	bl	8003694 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <xTaskResumeAll+0x128>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <xTaskResumeAll+0x12c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <xTaskResumeAll+0x11c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1cc      	bne.n	8003ebe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f2a:	f000 fa65 	bl	80043f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <xTaskResumeAll+0x130>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f3a:	f000 f837 	bl	8003fac <xTaskIncrementTick>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <xTaskResumeAll+0x12c>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f1      	bne.n	8003f3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <xTaskResumeAll+0x130>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <xTaskResumeAll+0x12c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <xTaskResumeAll+0x134>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f78:	f000 fdfe 	bl	8004b78 <vPortExitCritical>

	return xAlreadyYielded;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000424 	.word	0x20000424
 8003f8c:	200003fc 	.word	0x200003fc
 8003f90:	200003bc 	.word	0x200003bc
 8003f94:	20000404 	.word	0x20000404
 8003f98:	20000300 	.word	0x20000300
 8003f9c:	200002fc 	.word	0x200002fc
 8003fa0:	20000410 	.word	0x20000410
 8003fa4:	2000040c 	.word	0x2000040c
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <xTaskIncrementTick+0x144>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8087 	bne.w	80040ce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <xTaskIncrementTick+0x148>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <xTaskIncrementTick+0x148>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11f      	bne.n	8004014 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd4:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <xTaskIncrementTick+0x46>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	e7fe      	b.n	8003ff0 <xTaskIncrementTick+0x44>
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4b40      	ldr	r3, [pc, #256]	; (80040fc <xTaskIncrementTick+0x150>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3e      	ldr	r2, [pc, #248]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4a3e      	ldr	r2, [pc, #248]	; (80040fc <xTaskIncrementTick+0x150>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <xTaskIncrementTick+0x154>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <xTaskIncrementTick+0x154>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	f000 f9f2 	bl	80043f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <xTaskIncrementTick+0x158>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d348      	bcc.n	80040b0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <xTaskIncrementTick+0x158>)
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	601a      	str	r2, [r3, #0]
					break;
 8004030:	e03e      	b.n	80040b0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d203      	bcs.n	8004052 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800404a:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <xTaskIncrementTick+0x158>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004050:	e02e      	b.n	80040b0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fb79 	bl	800374e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fb70 	bl	800374e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	2201      	movs	r2, #1
 8004074:	409a      	lsls	r2, r3
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <xTaskIncrementTick+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	4a22      	ldr	r2, [pc, #136]	; (8004108 <xTaskIncrementTick+0x15c>)
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <xTaskIncrementTick+0x160>)
 800408e:	441a      	add	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff fafc 	bl	8003694 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <xTaskIncrementTick+0x164>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3b9      	bcc.n	800401e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ae:	e7b6      	b.n	800401e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <xTaskIncrementTick+0x164>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	4915      	ldr	r1, [pc, #84]	; (800410c <xTaskIncrementTick+0x160>)
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d907      	bls.n	80040d8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e004      	b.n	80040d8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <xTaskIncrementTick+0x168>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <xTaskIncrementTick+0x168>)
 80040d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <xTaskIncrementTick+0x16c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e4:	697b      	ldr	r3, [r7, #20]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000424 	.word	0x20000424
 80040f4:	20000400 	.word	0x20000400
 80040f8:	200003b4 	.word	0x200003b4
 80040fc:	200003b8 	.word	0x200003b8
 8004100:	20000414 	.word	0x20000414
 8004104:	2000041c 	.word	0x2000041c
 8004108:	20000404 	.word	0x20000404
 800410c:	20000300 	.word	0x20000300
 8004110:	200002fc 	.word	0x200002fc
 8004114:	2000040c 	.word	0x2000040c
 8004118:	20000410 	.word	0x20000410

0800411c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <vTaskSwitchContext+0xa0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800412a:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <vTaskSwitchContext+0xa4>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004130:	e03e      	b.n	80041b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004132:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <vTaskSwitchContext+0xa4>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <vTaskSwitchContext+0xa8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004146:	7afb      	ldrb	r3, [r7, #11]
 8004148:	f1c3 031f 	rsb	r3, r3, #31
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	491e      	ldr	r1, [pc, #120]	; (80041c8 <vTaskSwitchContext+0xac>)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	e7fe      	b.n	8004174 <vTaskSwitchContext+0x58>
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <vTaskSwitchContext+0xac>)
 8004182:	4413      	add	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3308      	adds	r3, #8
 8004198:	429a      	cmp	r2, r3
 800419a:	d104      	bne.n	80041a6 <vTaskSwitchContext+0x8a>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <vTaskSwitchContext+0xb0>)
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	20000424 	.word	0x20000424
 80041c0:	20000410 	.word	0x20000410
 80041c4:	20000404 	.word	0x20000404
 80041c8:	20000300 	.word	0x20000300
 80041cc:	200002fc 	.word	0x200002fc

080041d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <xTaskRemoveFromEventList+0x2a>
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e7fe      	b.n	80041f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3318      	adds	r3, #24
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff faa5 	bl	800374e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <xTaskRemoveFromEventList+0xac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11c      	bne.n	8004246 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fa9c 	bl	800374e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	2201      	movs	r2, #1
 800421c:	409a      	lsls	r2, r3
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <xTaskRemoveFromEventList+0xb0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <xTaskRemoveFromEventList+0xb0>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <xTaskRemoveFromEventList+0xb4>)
 8004236:	441a      	add	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f7ff fa28 	bl	8003694 <vListInsertEnd>
 8004244:	e005      	b.n	8004252 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3318      	adds	r3, #24
 800424a:	4619      	mov	r1, r3
 800424c:	480e      	ldr	r0, [pc, #56]	; (8004288 <xTaskRemoveFromEventList+0xb8>)
 800424e:	f7ff fa21 	bl	8003694 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <xTaskRemoveFromEventList+0xbc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	429a      	cmp	r2, r3
 800425e:	d905      	bls.n	800426c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <xTaskRemoveFromEventList+0xc0>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e001      	b.n	8004270 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004270:	697b      	ldr	r3, [r7, #20]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000424 	.word	0x20000424
 8004280:	20000404 	.word	0x20000404
 8004284:	20000300 	.word	0x20000300
 8004288:	200003bc 	.word	0x200003bc
 800428c:	200002fc 	.word	0x200002fc
 8004290:	20000410 	.word	0x20000410

08004294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800429c:	f000 f852 	bl	8004344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <prvIdleTask+0x28>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d9f9      	bls.n	800429c <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <prvIdleTask+0x2c>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b8:	e7f0      	b.n	800429c <prvIdleTask+0x8>
 80042ba:	bf00      	nop
 80042bc:	20000300 	.word	0x20000300
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e00c      	b.n	80042ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <prvInitialiseTaskLists+0x60>)
 80042dc:	4413      	add	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f9ab 	bl	800363a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d9ef      	bls.n	80042d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <prvInitialiseTaskLists+0x64>)
 80042f2:	f7ff f9a2 	bl	800363a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <prvInitialiseTaskLists+0x68>)
 80042f8:	f7ff f99f 	bl	800363a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042fc:	480c      	ldr	r0, [pc, #48]	; (8004330 <prvInitialiseTaskLists+0x6c>)
 80042fe:	f7ff f99c 	bl	800363a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004302:	480c      	ldr	r0, [pc, #48]	; (8004334 <prvInitialiseTaskLists+0x70>)
 8004304:	f7ff f999 	bl	800363a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004308:	480b      	ldr	r0, [pc, #44]	; (8004338 <prvInitialiseTaskLists+0x74>)
 800430a:	f7ff f996 	bl	800363a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <prvInitialiseTaskLists+0x78>)
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <prvInitialiseTaskLists+0x64>)
 8004312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <prvInitialiseTaskLists+0x7c>)
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <prvInitialiseTaskLists+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000300 	.word	0x20000300
 8004328:	2000038c 	.word	0x2000038c
 800432c:	200003a0 	.word	0x200003a0
 8004330:	200003bc 	.word	0x200003bc
 8004334:	200003d0 	.word	0x200003d0
 8004338:	200003e8 	.word	0x200003e8
 800433c:	200003b4 	.word	0x200003b4
 8004340:	200003b8 	.word	0x200003b8

08004344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434a:	e019      	b.n	8004380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800434c:	f000 fbe6 	bl	8004b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <prvCheckTasksWaitingTermination+0x4c>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f9f6 	bl	800374e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <prvCheckTasksWaitingTermination+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <prvCheckTasksWaitingTermination+0x50>)
 800436a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <prvCheckTasksWaitingTermination+0x54>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <prvCheckTasksWaitingTermination+0x54>)
 8004374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004376:	f000 fbff 	bl	8004b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f80e 	bl	800439c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <prvCheckTasksWaitingTermination+0x54>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e1      	bne.n	800434c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200003d0 	.word	0x200003d0
 8004394:	200003fc 	.word	0x200003fc
 8004398:	200003e4 	.word	0x200003e4

0800439c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fd8e 	bl	8004ed4 <vPortFree>
				vPortFree( pxTCB );
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fd8b 	bl	8004ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043be:	e017      	b.n	80043f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d103      	bne.n	80043d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fd82 	bl	8004ed4 <vPortFree>
	}
 80043d0:	e00e      	b.n	80043f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d009      	beq.n	80043f0 <prvDeleteTCB+0x54>
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e7fe      	b.n	80043ee <prvDeleteTCB+0x52>
	}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <prvResetNextTaskUnblockTime+0x38>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <prvResetNextTaskUnblockTime+0x3c>)
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004410:	e008      	b.n	8004424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4a04      	ldr	r2, [pc, #16]	; (8004434 <prvResetNextTaskUnblockTime+0x3c>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	200003b4 	.word	0x200003b4
 8004434:	2000041c 	.word	0x2000041c

08004438 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004446:	f000 fb69 	bl	8004b1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <xTaskNotifyWait+0xac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d01a      	beq.n	800448e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <xTaskNotifyWait+0xac>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	43d2      	mvns	r2, r2
 8004462:	400a      	ands	r2, r1
 8004464:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <xTaskNotifyWait+0xac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f000 f9c1 	bl	8004800 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <xTaskNotifyWait+0xb0>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800448e:	f000 fb73 	bl	8004b78 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004492:	f000 fb43 	bl	8004b1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <xTaskNotifyWait+0xac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <xTaskNotifyWait+0xac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d002      	beq.n	80044ba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e008      	b.n	80044cc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <xTaskNotifyWait+0xac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	43d2      	mvns	r2, r2
 80044c4:	400a      	ands	r2, r1
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <xTaskNotifyWait+0xac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80044d6:	f000 fb4f 	bl	8004b78 <vPortExitCritical>

		return xReturn;
 80044da:	697b      	ldr	r3, [r7, #20]
	}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200002fc 	.word	0x200002fc
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80044fc:	2301      	movs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <xTaskGenericNotify+0x2e>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e7fe      	b.n	8004518 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800451e:	f000 fafd 	bl	8004b1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004536:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d827      	bhi.n	8004596 <xTaskGenericNotify+0xaa>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <xTaskGenericNotify+0x60>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004561 	.word	0x08004561
 8004554:	0800456f 	.word	0x0800456f
 8004558:	0800457b 	.word	0x0800457b
 800455c:	08004583 	.word	0x08004583
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	431a      	orrs	r2, r3
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800456c:	e025      	b.n	80045ba <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004578:	e01f      	b.n	80045ba <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004580:	e01b      	b.n	80045ba <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d003      	beq.n	8004590 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800458e:	e014      	b.n	80045ba <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8004590:	2300      	movs	r3, #0
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004594:	e011      	b.n	80045ba <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d00b      	beq.n	80045b8 <xTaskGenericNotify+0xcc>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e7fe      	b.n	80045b2 <xTaskGenericNotify+0xc6>
					break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <xTaskGenericNotify+0xce>

					break;
 80045b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d138      	bne.n	8004632 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff f8c2 	bl	800374e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2201      	movs	r2, #1
 80045d0:	409a      	lsls	r2, r3
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <xTaskGenericNotify+0x154>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	4a19      	ldr	r2, [pc, #100]	; (8004640 <xTaskGenericNotify+0x154>)
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <xTaskGenericNotify+0x158>)
 80045ea:	441a      	add	r2, r3
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7ff f84e 	bl	8003694 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <xTaskGenericNotify+0x128>
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e7fe      	b.n	8004612 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <xTaskGenericNotify+0x15c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	429a      	cmp	r2, r3
 8004620:	d907      	bls.n	8004632 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <xTaskGenericNotify+0x160>)
 8004624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004632:	f000 faa1 	bl	8004b78 <vPortExitCritical>

		return xReturn;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004638:	4618      	mov	r0, r3
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000404 	.word	0x20000404
 8004644:	20000300 	.word	0x20000300
 8004648:	200002fc 	.word	0x200002fc
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004660:	2301      	movs	r3, #1
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <xTaskGenericNotifyFromISR+0x2e>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	e7fe      	b.n	800467c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800467e:	f000 fb29 	bl	8004cd4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004686:	f3ef 8211 	mrs	r2, BASEPRI
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	623a      	str	r2, [r7, #32]
 800469c:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800469e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d829      	bhi.n	800471c <xTaskGenericNotifyFromISR+0xcc>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <xTaskGenericNotifyFromISR+0x80>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	0800473b 	.word	0x0800473b
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046f3 	.word	0x080046f3
 80046dc:	080046ff 	.word	0x080046ff
 80046e0:	08004707 	.word	0x08004707
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80046f0:	e026      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80046fc:	e020      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004704:	e01c      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800470a:	2b02      	cmp	r3, #2
 800470c:	d003      	beq.n	8004716 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004714:	e014      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800471a:	e011      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d00b      	beq.n	800473e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e7fe      	b.n	8004738 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800473e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004744:	2b01      	cmp	r3, #1
 8004746:	d144      	bne.n	80047d2 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <xTaskGenericNotifyFromISR+0x114>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e7fe      	b.n	8004762 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <xTaskGenericNotifyFromISR+0x198>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11c      	bne.n	80047a6 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	3304      	adds	r3, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe ffec 	bl	800374e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	409a      	lsls	r2, r3
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <xTaskGenericNotifyFromISR+0x19c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <xTaskGenericNotifyFromISR+0x19c>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <xTaskGenericNotifyFromISR+0x1a0>)
 8004796:	441a      	add	r2, r3
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fe ff78 	bl	8003694 <vListInsertEnd>
 80047a4:	e005      	b.n	80047b2 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	3318      	adds	r3, #24
 80047aa:	4619      	mov	r1, r3
 80047ac:	4811      	ldr	r0, [pc, #68]	; (80047f4 <xTaskGenericNotifyFromISR+0x1a4>)
 80047ae:	f7fe ff71 	bl	8003694 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <xTaskGenericNotifyFromISR+0x1a8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	429a      	cmp	r2, r3
 80047be:	d908      	bls.n	80047d2 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80047c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <xTaskGenericNotifyFromISR+0x1ac>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80047de:	4618      	mov	r0, r3
 80047e0:	3738      	adds	r7, #56	; 0x38
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000424 	.word	0x20000424
 80047ec:	20000404 	.word	0x20000404
 80047f0:	20000300 	.word	0x20000300
 80047f4:	200003bc 	.word	0x200003bc
 80047f8:	200002fc 	.word	0x200002fc
 80047fc:	20000410 	.word	0x20000410

08004800 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800480a:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3304      	adds	r3, #4
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe ff99 	bl	800374e <uxListRemove>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2201      	movs	r2, #1
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43da      	mvns	r2, r3
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4013      	ands	r3, r2
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004838:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d10a      	bne.n	8004858 <prvAddCurrentTaskToDelayedList+0x58>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	481a      	ldr	r0, [pc, #104]	; (80048bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004852:	f7fe ff1f 	bl	8003694 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004856:	e026      	b.n	80048a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	429a      	cmp	r2, r3
 800486e:	d209      	bcs.n	8004884 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004870:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f7fe ff2d 	bl	80036dc <vListInsert>
}
 8004882:	e010      	b.n	80048a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3304      	adds	r3, #4
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f7fe ff23 	bl	80036dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d202      	bcs.n	80048a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048a0:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000400 	.word	0x20000400
 80048b4:	200002fc 	.word	0x200002fc
 80048b8:	20000404 	.word	0x20000404
 80048bc:	200003e8 	.word	0x200003e8
 80048c0:	200003b8 	.word	0x200003b8
 80048c4:	200003b4 	.word	0x200003b4
 80048c8:	2000041c 	.word	0x2000041c

080048cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b04      	subs	r3, #4
 80048dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3b04      	subs	r3, #4
 80048ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b04      	subs	r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048fc:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <pxPortInitialiseStack+0x64>)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b14      	subs	r3, #20
 8004906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b04      	subs	r3, #4
 8004912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f06f 0202 	mvn.w	r2, #2
 800491a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3b20      	subs	r3, #32
 8004920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	08004935 	.word	0x08004935

08004934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <prvTaskExitError+0x50>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d009      	beq.n	800495c <prvTaskExitError+0x28>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	e7fe      	b.n	800495a <prvTaskExitError+0x26>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800496e:	bf00      	nop
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0fc      	beq.n	8004970 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000010 	.word	0x20000010
	...

08004990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <pxCurrentTCBConst2>)
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	6808      	ldr	r0, [r1, #0]
 8004996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	f380 8809 	msr	PSP, r0
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	4770      	bx	lr
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst2>:
 80049b0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049b8:	4808      	ldr	r0, [pc, #32]	; (80049dc <prvPortStartFirstTask+0x24>)
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	6800      	ldr	r0, [r0, #0]
 80049be:	f380 8808 	msr	MSP, r0
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8814 	msr	CONTROL, r0
 80049ca:	b662      	cpsie	i
 80049cc:	b661      	cpsie	f
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	df00      	svc	0
 80049d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049da:	bf00      	nop
 80049dc:	e000ed08 	.word	0xe000ed08

080049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049e6:	4b44      	ldr	r3, [pc, #272]	; (8004af8 <xPortStartScheduler+0x118>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a44      	ldr	r2, [pc, #272]	; (8004afc <xPortStartScheduler+0x11c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <xPortStartScheduler+0x24>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e7fe      	b.n	8004a02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a04:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <xPortStartScheduler+0x118>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <xPortStartScheduler+0x120>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d109      	bne.n	8004a22 <xPortStartScheduler+0x42>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e7fe      	b.n	8004a20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a22:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <xPortStartScheduler+0x124>)
 8004a24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <xPortStartScheduler+0x128>)
 8004a48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a4c:	2207      	movs	r2, #7
 8004a4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a50:	e009      	b.n	8004a66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004a52:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d0ef      	beq.n	8004a52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a72:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1c3 0307 	rsb	r3, r3, #7
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d009      	beq.n	8004a92 <xPortStartScheduler+0xb2>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	e7fe      	b.n	8004a90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <xPortStartScheduler+0x12c>)
 8004aa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ab0:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <xPortStartScheduler+0x130>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <xPortStartScheduler+0x130>)
 8004ac2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ac6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ac8:	f000 f8d6 	bl	8004c78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <xPortStartScheduler+0x134>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ad2:	f000 f8f5 	bl	8004cc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <xPortStartScheduler+0x138>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <xPortStartScheduler+0x138>)
 8004adc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ae0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ae2:	f7ff ff69 	bl	80049b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ae6:	f7ff fb19 	bl	800411c <vTaskSwitchContext>
	prvTaskExitError();
 8004aea:	f7ff ff23 	bl	8004934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed00 	.word	0xe000ed00
 8004afc:	410fc271 	.word	0x410fc271
 8004b00:	410fc270 	.word	0x410fc270
 8004b04:	e000e400 	.word	0xe000e400
 8004b08:	20000428 	.word	0x20000428
 8004b0c:	2000042c 	.word	0x2000042c
 8004b10:	e000ed20 	.word	0xe000ed20
 8004b14:	20000010 	.word	0x20000010
 8004b18:	e000ef34 	.word	0xe000ef34

08004b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b34:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <vPortEnterCritical+0x54>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10e      	bne.n	8004b64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <vPortEnterCritical+0x58>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <vPortEnterCritical+0x48>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	e7fe      	b.n	8004b62 <vPortEnterCritical+0x46>
	}
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000010 	.word	0x20000010
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <vPortExitCritical+0x22>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e7fe      	b.n	8004b98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004ba2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <vPortExitCritical+0x4c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <vPortExitCritical+0x3e>
 8004bac:	2300      	movs	r3, #0
 8004bae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000010 	.word	0x20000010
	...

08004bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f7ff fa8c 	bl	800411c <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c50:	f7ff f9ac 	bl	8003fac <xTaskIncrementTick>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <SysTick_Handler+0x3c>)
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <vPortSetupTimerInterrupt+0x34>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortSetupTimerInterrupt+0x38>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vPortSetupTimerInterrupt+0x3c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <vPortSetupTimerInterrupt+0x40>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	099b      	lsrs	r3, r3, #6
 8004c94:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <vPortSetupTimerInterrupt+0x44>)
 8004c96:	3b01      	subs	r3, #1
 8004c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <vPortSetupTimerInterrupt+0x34>)
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	e000e010 	.word	0xe000e010
 8004cb0:	e000e018 	.word	0xe000e018
 8004cb4:	20000004 	.word	0x20000004
 8004cb8:	10624dd3 	.word	0x10624dd3
 8004cbc:	e000e014 	.word	0xe000e014

08004cc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cd0 <vPortEnableVFP+0x10>
 8004cc4:	6801      	ldr	r1, [r0, #0]
 8004cc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cca:	6001      	str	r1, [r0, #0]
 8004ccc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cce:	bf00      	nop
 8004cd0:	e000ed88 	.word	0xe000ed88

08004cd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cda:	f3ef 8305 	mrs	r3, IPSR
 8004cde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d913      	bls.n	8004d0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ce6:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <vPortValidateInterruptPriority+0x6c>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <vPortValidateInterruptPriority+0x70>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	7afa      	ldrb	r2, [r7, #11]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d209      	bcs.n	8004d0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	e7fe      	b.n	8004d0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d0e:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <vPortValidateInterruptPriority+0x74>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <vPortValidateInterruptPriority+0x78>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d909      	bls.n	8004d32 <vPortValidateInterruptPriority+0x5e>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	e7fe      	b.n	8004d30 <vPortValidateInterruptPriority+0x5c>
	}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e3f0 	.word	0xe000e3f0
 8004d44:	20000428 	.word	0x20000428
 8004d48:	e000ed0c 	.word	0xe000ed0c
 8004d4c:	2000042c 	.word	0x2000042c

08004d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	; 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d5c:	f7ff f87c 	bl	8003e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d60:	4b57      	ldr	r3, [pc, #348]	; (8004ec0 <pvPortMalloc+0x170>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d68:	f000 f90c 	bl	8004f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d6c:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <pvPortMalloc+0x174>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 808c 	bne.w	8004e92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01c      	beq.n	8004dba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d80:	2208      	movs	r2, #8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d013      	beq.n	8004dba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f023 0307 	bic.w	r3, r3, #7
 8004d98:	3308      	adds	r3, #8
 8004d9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <pvPortMalloc+0x6a>
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e7fe      	b.n	8004db8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d068      	beq.n	8004e92 <pvPortMalloc+0x142>
 8004dc0:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <pvPortMalloc+0x178>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d863      	bhi.n	8004e92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <pvPortMalloc+0x17c>)
 8004dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <pvPortMalloc+0x17c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dd4:	e004      	b.n	8004de0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d903      	bls.n	8004df2 <pvPortMalloc+0xa2>
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f1      	bne.n	8004dd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004df2:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <pvPortMalloc+0x170>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d04a      	beq.n	8004e92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2208      	movs	r2, #8
 8004e02:	4413      	add	r3, r2
 8004e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	2308      	movs	r3, #8
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d91e      	bls.n	8004e5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <pvPortMalloc+0xf4>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	e7fe      	b.n	8004e42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e56:	69b8      	ldr	r0, [r7, #24]
 8004e58:	f000 f8f6 	bl	8005048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <pvPortMalloc+0x178>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <pvPortMalloc+0x178>)
 8004e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <pvPortMalloc+0x178>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <pvPortMalloc+0x180>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d203      	bcs.n	8004e7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <pvPortMalloc+0x178>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <pvPortMalloc+0x180>)
 8004e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <pvPortMalloc+0x174>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e92:	f7fe ffef 	bl	8003e74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <pvPortMalloc+0x164>
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0x162>
	return pvReturn;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20004038 	.word	0x20004038
 8004ec4:	20004044 	.word	0x20004044
 8004ec8:	2000403c 	.word	0x2000403c
 8004ecc:	20004030 	.word	0x20004030
 8004ed0:	20004040 	.word	0x20004040

08004ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d046      	beq.n	8004f74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	425b      	negs	r3, r3
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <vPortFree+0xa8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <vPortFree+0x42>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e7fe      	b.n	8004f14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <vPortFree+0x5e>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	e7fe      	b.n	8004f30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <vPortFree+0xa8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d019      	beq.n	8004f74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <vPortFree+0xa8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f58:	f7fe ff7e 	bl	8003e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <vPortFree+0xac>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <vPortFree+0xac>)
 8004f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f000 f86c 	bl	8005048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f70:	f7fe ff80 	bl	8003e74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20004044 	.word	0x20004044
 8004f80:	2000403c 	.word	0x2000403c

08004f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <prvHeapInit+0xac>)
 8004f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <prvHeapInit+0xac>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <prvHeapInit+0xb0>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <prvHeapInit+0xb0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0307 	bic.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <prvHeapInit+0xb4>)
 8004fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <prvHeapInit+0xb4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <prvHeapInit+0xb4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <prvHeapInit+0xb4>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <prvHeapInit+0xb8>)
 8005012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <prvHeapInit+0xbc>)
 800501a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <prvHeapInit+0xc0>)
 800501e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000430 	.word	0x20000430
 8005034:	20004030 	.word	0x20004030
 8005038:	20004038 	.word	0x20004038
 800503c:	20004040 	.word	0x20004040
 8005040:	2000403c 	.word	0x2000403c
 8005044:	20004044 	.word	0x20004044

08005048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <prvInsertBlockIntoFreeList+0xac>)
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e002      	b.n	800505c <prvInsertBlockIntoFreeList+0x14>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d8f7      	bhi.n	8005056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d108      	bne.n	800508a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	441a      	add	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d118      	bne.n	80050d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d00d      	beq.n	80050c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e008      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e003      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d002      	beq.n	80050e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20004030 	.word	0x20004030
 80050f8:	20004038 	.word	0x20004038

080050fc <__errno>:
 80050fc:	4b01      	ldr	r3, [pc, #4]	; (8005104 <__errno+0x8>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000014 	.word	0x20000014

08005108 <__libc_init_array>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4e0d      	ldr	r6, [pc, #52]	; (8005140 <__libc_init_array+0x38>)
 800510c:	4c0d      	ldr	r4, [pc, #52]	; (8005144 <__libc_init_array+0x3c>)
 800510e:	1ba4      	subs	r4, r4, r6
 8005110:	10a4      	asrs	r4, r4, #2
 8005112:	2500      	movs	r5, #0
 8005114:	42a5      	cmp	r5, r4
 8005116:	d109      	bne.n	800512c <__libc_init_array+0x24>
 8005118:	4e0b      	ldr	r6, [pc, #44]	; (8005148 <__libc_init_array+0x40>)
 800511a:	4c0c      	ldr	r4, [pc, #48]	; (800514c <__libc_init_array+0x44>)
 800511c:	f000 ff04 	bl	8005f28 <_init>
 8005120:	1ba4      	subs	r4, r4, r6
 8005122:	10a4      	asrs	r4, r4, #2
 8005124:	2500      	movs	r5, #0
 8005126:	42a5      	cmp	r5, r4
 8005128:	d105      	bne.n	8005136 <__libc_init_array+0x2e>
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005130:	4798      	blx	r3
 8005132:	3501      	adds	r5, #1
 8005134:	e7ee      	b.n	8005114 <__libc_init_array+0xc>
 8005136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800513a:	4798      	blx	r3
 800513c:	3501      	adds	r5, #1
 800513e:	e7f2      	b.n	8005126 <__libc_init_array+0x1e>
 8005140:	080061a8 	.word	0x080061a8
 8005144:	080061a8 	.word	0x080061a8
 8005148:	080061a8 	.word	0x080061a8
 800514c:	080061ac 	.word	0x080061ac

08005150 <memset>:
 8005150:	4402      	add	r2, r0
 8005152:	4603      	mov	r3, r0
 8005154:	4293      	cmp	r3, r2
 8005156:	d100      	bne.n	800515a <memset+0xa>
 8005158:	4770      	bx	lr
 800515a:	f803 1b01 	strb.w	r1, [r3], #1
 800515e:	e7f9      	b.n	8005154 <memset+0x4>

08005160 <iprintf>:
 8005160:	b40f      	push	{r0, r1, r2, r3}
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <iprintf+0x2c>)
 8005164:	b513      	push	{r0, r1, r4, lr}
 8005166:	681c      	ldr	r4, [r3, #0]
 8005168:	b124      	cbz	r4, 8005174 <iprintf+0x14>
 800516a:	69a3      	ldr	r3, [r4, #24]
 800516c:	b913      	cbnz	r3, 8005174 <iprintf+0x14>
 800516e:	4620      	mov	r0, r4
 8005170:	f000 f84e 	bl	8005210 <__sinit>
 8005174:	ab05      	add	r3, sp, #20
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	68a1      	ldr	r1, [r4, #8]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f955 	bl	800542c <_vfiprintf_r>
 8005182:	b002      	add	sp, #8
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	b004      	add	sp, #16
 800518a:	4770      	bx	lr
 800518c:	20000014 	.word	0x20000014

08005190 <std>:
 8005190:	2300      	movs	r3, #0
 8005192:	b510      	push	{r4, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	e9c0 3300 	strd	r3, r3, [r0]
 800519a:	6083      	str	r3, [r0, #8]
 800519c:	8181      	strh	r1, [r0, #12]
 800519e:	6643      	str	r3, [r0, #100]	; 0x64
 80051a0:	81c2      	strh	r2, [r0, #14]
 80051a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051a6:	6183      	str	r3, [r0, #24]
 80051a8:	4619      	mov	r1, r3
 80051aa:	2208      	movs	r2, #8
 80051ac:	305c      	adds	r0, #92	; 0x5c
 80051ae:	f7ff ffcf 	bl	8005150 <memset>
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std+0x38>)
 80051b4:	6263      	str	r3, [r4, #36]	; 0x24
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x3c>)
 80051b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std+0x40>)
 80051bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <std+0x44>)
 80051c0:	6224      	str	r4, [r4, #32]
 80051c2:	6323      	str	r3, [r4, #48]	; 0x30
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	08005989 	.word	0x08005989
 80051cc:	080059ab 	.word	0x080059ab
 80051d0:	080059e3 	.word	0x080059e3
 80051d4:	08005a07 	.word	0x08005a07

080051d8 <_cleanup_r>:
 80051d8:	4901      	ldr	r1, [pc, #4]	; (80051e0 <_cleanup_r+0x8>)
 80051da:	f000 b885 	b.w	80052e8 <_fwalk_reent>
 80051de:	bf00      	nop
 80051e0:	08005ce1 	.word	0x08005ce1

080051e4 <__sfmoreglue>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	1e4a      	subs	r2, r1, #1
 80051e8:	2568      	movs	r5, #104	; 0x68
 80051ea:	4355      	muls	r5, r2
 80051ec:	460e      	mov	r6, r1
 80051ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051f2:	f000 f897 	bl	8005324 <_malloc_r>
 80051f6:	4604      	mov	r4, r0
 80051f8:	b140      	cbz	r0, 800520c <__sfmoreglue+0x28>
 80051fa:	2100      	movs	r1, #0
 80051fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005200:	300c      	adds	r0, #12
 8005202:	60a0      	str	r0, [r4, #8]
 8005204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005208:	f7ff ffa2 	bl	8005150 <memset>
 800520c:	4620      	mov	r0, r4
 800520e:	bd70      	pop	{r4, r5, r6, pc}

08005210 <__sinit>:
 8005210:	6983      	ldr	r3, [r0, #24]
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
 8005216:	bb33      	cbnz	r3, 8005266 <__sinit+0x56>
 8005218:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800521c:	6503      	str	r3, [r0, #80]	; 0x50
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <__sinit+0x58>)
 8005220:	4a12      	ldr	r2, [pc, #72]	; (800526c <__sinit+0x5c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6282      	str	r2, [r0, #40]	; 0x28
 8005226:	4298      	cmp	r0, r3
 8005228:	bf04      	itt	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	6183      	streq	r3, [r0, #24]
 800522e:	f000 f81f 	bl	8005270 <__sfp>
 8005232:	6060      	str	r0, [r4, #4]
 8005234:	4620      	mov	r0, r4
 8005236:	f000 f81b 	bl	8005270 <__sfp>
 800523a:	60a0      	str	r0, [r4, #8]
 800523c:	4620      	mov	r0, r4
 800523e:	f000 f817 	bl	8005270 <__sfp>
 8005242:	2200      	movs	r2, #0
 8005244:	60e0      	str	r0, [r4, #12]
 8005246:	2104      	movs	r1, #4
 8005248:	6860      	ldr	r0, [r4, #4]
 800524a:	f7ff ffa1 	bl	8005190 <std>
 800524e:	2201      	movs	r2, #1
 8005250:	2109      	movs	r1, #9
 8005252:	68a0      	ldr	r0, [r4, #8]
 8005254:	f7ff ff9c 	bl	8005190 <std>
 8005258:	2202      	movs	r2, #2
 800525a:	2112      	movs	r1, #18
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	f7ff ff97 	bl	8005190 <std>
 8005262:	2301      	movs	r3, #1
 8005264:	61a3      	str	r3, [r4, #24]
 8005266:	bd10      	pop	{r4, pc}
 8005268:	08006108 	.word	0x08006108
 800526c:	080051d9 	.word	0x080051d9

08005270 <__sfp>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <__sfp+0x70>)
 8005274:	681e      	ldr	r6, [r3, #0]
 8005276:	69b3      	ldr	r3, [r6, #24]
 8005278:	4607      	mov	r7, r0
 800527a:	b913      	cbnz	r3, 8005282 <__sfp+0x12>
 800527c:	4630      	mov	r0, r6
 800527e:	f7ff ffc7 	bl	8005210 <__sinit>
 8005282:	3648      	adds	r6, #72	; 0x48
 8005284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	d503      	bpl.n	8005294 <__sfp+0x24>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	b133      	cbz	r3, 800529e <__sfp+0x2e>
 8005290:	6836      	ldr	r6, [r6, #0]
 8005292:	e7f7      	b.n	8005284 <__sfp+0x14>
 8005294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005298:	b16d      	cbz	r5, 80052b6 <__sfp+0x46>
 800529a:	3468      	adds	r4, #104	; 0x68
 800529c:	e7f4      	b.n	8005288 <__sfp+0x18>
 800529e:	2104      	movs	r1, #4
 80052a0:	4638      	mov	r0, r7
 80052a2:	f7ff ff9f 	bl	80051e4 <__sfmoreglue>
 80052a6:	6030      	str	r0, [r6, #0]
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d1f1      	bne.n	8005290 <__sfp+0x20>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4604      	mov	r4, r0
 80052b2:	4620      	mov	r0, r4
 80052b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <__sfp+0x74>)
 80052b8:	6665      	str	r5, [r4, #100]	; 0x64
 80052ba:	e9c4 5500 	strd	r5, r5, [r4]
 80052be:	60a5      	str	r5, [r4, #8]
 80052c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80052c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80052c8:	2208      	movs	r2, #8
 80052ca:	4629      	mov	r1, r5
 80052cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052d0:	f7ff ff3e 	bl	8005150 <memset>
 80052d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052dc:	e7e9      	b.n	80052b2 <__sfp+0x42>
 80052de:	bf00      	nop
 80052e0:	08006108 	.word	0x08006108
 80052e4:	ffff0001 	.word	0xffff0001

080052e8 <_fwalk_reent>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	4680      	mov	r8, r0
 80052ee:	4689      	mov	r9, r1
 80052f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052f4:	2600      	movs	r6, #0
 80052f6:	b914      	cbnz	r4, 80052fe <_fwalk_reent+0x16>
 80052f8:	4630      	mov	r0, r6
 80052fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005302:	3f01      	subs	r7, #1
 8005304:	d501      	bpl.n	800530a <_fwalk_reent+0x22>
 8005306:	6824      	ldr	r4, [r4, #0]
 8005308:	e7f5      	b.n	80052f6 <_fwalk_reent+0xe>
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d907      	bls.n	8005320 <_fwalk_reent+0x38>
 8005310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005314:	3301      	adds	r3, #1
 8005316:	d003      	beq.n	8005320 <_fwalk_reent+0x38>
 8005318:	4629      	mov	r1, r5
 800531a:	4640      	mov	r0, r8
 800531c:	47c8      	blx	r9
 800531e:	4306      	orrs	r6, r0
 8005320:	3568      	adds	r5, #104	; 0x68
 8005322:	e7ee      	b.n	8005302 <_fwalk_reent+0x1a>

08005324 <_malloc_r>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	1ccd      	adds	r5, r1, #3
 8005328:	f025 0503 	bic.w	r5, r5, #3
 800532c:	3508      	adds	r5, #8
 800532e:	2d0c      	cmp	r5, #12
 8005330:	bf38      	it	cc
 8005332:	250c      	movcc	r5, #12
 8005334:	2d00      	cmp	r5, #0
 8005336:	4606      	mov	r6, r0
 8005338:	db01      	blt.n	800533e <_malloc_r+0x1a>
 800533a:	42a9      	cmp	r1, r5
 800533c:	d903      	bls.n	8005346 <_malloc_r+0x22>
 800533e:	230c      	movs	r3, #12
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	2000      	movs	r0, #0
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	f000 fd6b 	bl	8005e20 <__malloc_lock>
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <_malloc_r+0xac>)
 800534c:	6814      	ldr	r4, [r2, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	b991      	cbnz	r1, 8005378 <_malloc_r+0x54>
 8005352:	4c20      	ldr	r4, [pc, #128]	; (80053d4 <_malloc_r+0xb0>)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b91b      	cbnz	r3, 8005360 <_malloc_r+0x3c>
 8005358:	4630      	mov	r0, r6
 800535a:	f000 fb05 	bl	8005968 <_sbrk_r>
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f000 fb00 	bl	8005968 <_sbrk_r>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d124      	bne.n	80053b6 <_malloc_r+0x92>
 800536c:	230c      	movs	r3, #12
 800536e:	6033      	str	r3, [r6, #0]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 fd56 	bl	8005e22 <__malloc_unlock>
 8005376:	e7e4      	b.n	8005342 <_malloc_r+0x1e>
 8005378:	680b      	ldr	r3, [r1, #0]
 800537a:	1b5b      	subs	r3, r3, r5
 800537c:	d418      	bmi.n	80053b0 <_malloc_r+0x8c>
 800537e:	2b0b      	cmp	r3, #11
 8005380:	d90f      	bls.n	80053a2 <_malloc_r+0x7e>
 8005382:	600b      	str	r3, [r1, #0]
 8005384:	50cd      	str	r5, [r1, r3]
 8005386:	18cc      	adds	r4, r1, r3
 8005388:	4630      	mov	r0, r6
 800538a:	f000 fd4a 	bl	8005e22 <__malloc_unlock>
 800538e:	f104 000b 	add.w	r0, r4, #11
 8005392:	1d23      	adds	r3, r4, #4
 8005394:	f020 0007 	bic.w	r0, r0, #7
 8005398:	1ac3      	subs	r3, r0, r3
 800539a:	d0d3      	beq.n	8005344 <_malloc_r+0x20>
 800539c:	425a      	negs	r2, r3
 800539e:	50e2      	str	r2, [r4, r3]
 80053a0:	e7d0      	b.n	8005344 <_malloc_r+0x20>
 80053a2:	428c      	cmp	r4, r1
 80053a4:	684b      	ldr	r3, [r1, #4]
 80053a6:	bf16      	itet	ne
 80053a8:	6063      	strne	r3, [r4, #4]
 80053aa:	6013      	streq	r3, [r2, #0]
 80053ac:	460c      	movne	r4, r1
 80053ae:	e7eb      	b.n	8005388 <_malloc_r+0x64>
 80053b0:	460c      	mov	r4, r1
 80053b2:	6849      	ldr	r1, [r1, #4]
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x2c>
 80053b6:	1cc4      	adds	r4, r0, #3
 80053b8:	f024 0403 	bic.w	r4, r4, #3
 80053bc:	42a0      	cmp	r0, r4
 80053be:	d005      	beq.n	80053cc <_malloc_r+0xa8>
 80053c0:	1a21      	subs	r1, r4, r0
 80053c2:	4630      	mov	r0, r6
 80053c4:	f000 fad0 	bl	8005968 <_sbrk_r>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d0cf      	beq.n	800536c <_malloc_r+0x48>
 80053cc:	6025      	str	r5, [r4, #0]
 80053ce:	e7db      	b.n	8005388 <_malloc_r+0x64>
 80053d0:	20004048 	.word	0x20004048
 80053d4:	2000404c 	.word	0x2000404c

080053d8 <__sfputc_r>:
 80053d8:	6893      	ldr	r3, [r2, #8]
 80053da:	3b01      	subs	r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	b410      	push	{r4}
 80053e0:	6093      	str	r3, [r2, #8]
 80053e2:	da08      	bge.n	80053f6 <__sfputc_r+0x1e>
 80053e4:	6994      	ldr	r4, [r2, #24]
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	db01      	blt.n	80053ee <__sfputc_r+0x16>
 80053ea:	290a      	cmp	r1, #10
 80053ec:	d103      	bne.n	80053f6 <__sfputc_r+0x1e>
 80053ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053f2:	f000 bb0d 	b.w	8005a10 <__swbuf_r>
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	1c58      	adds	r0, r3, #1
 80053fa:	6010      	str	r0, [r2, #0]
 80053fc:	7019      	strb	r1, [r3, #0]
 80053fe:	4608      	mov	r0, r1
 8005400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005404:	4770      	bx	lr

08005406 <__sfputs_r>:
 8005406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005408:	4606      	mov	r6, r0
 800540a:	460f      	mov	r7, r1
 800540c:	4614      	mov	r4, r2
 800540e:	18d5      	adds	r5, r2, r3
 8005410:	42ac      	cmp	r4, r5
 8005412:	d101      	bne.n	8005418 <__sfputs_r+0x12>
 8005414:	2000      	movs	r0, #0
 8005416:	e007      	b.n	8005428 <__sfputs_r+0x22>
 8005418:	463a      	mov	r2, r7
 800541a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800541e:	4630      	mov	r0, r6
 8005420:	f7ff ffda 	bl	80053d8 <__sfputc_r>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d1f3      	bne.n	8005410 <__sfputs_r+0xa>
 8005428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800542c <_vfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	b09d      	sub	sp, #116	; 0x74
 8005434:	4617      	mov	r7, r2
 8005436:	461d      	mov	r5, r3
 8005438:	4606      	mov	r6, r0
 800543a:	b118      	cbz	r0, 8005444 <_vfiprintf_r+0x18>
 800543c:	6983      	ldr	r3, [r0, #24]
 800543e:	b90b      	cbnz	r3, 8005444 <_vfiprintf_r+0x18>
 8005440:	f7ff fee6 	bl	8005210 <__sinit>
 8005444:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <_vfiprintf_r+0x20c>)
 8005446:	429c      	cmp	r4, r3
 8005448:	d158      	bne.n	80054fc <_vfiprintf_r+0xd0>
 800544a:	6874      	ldr	r4, [r6, #4]
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	0718      	lsls	r0, r3, #28
 8005450:	d55e      	bpl.n	8005510 <_vfiprintf_r+0xe4>
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05b      	beq.n	8005510 <_vfiprintf_r+0xe4>
 8005458:	2300      	movs	r3, #0
 800545a:	9309      	str	r3, [sp, #36]	; 0x24
 800545c:	2320      	movs	r3, #32
 800545e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005462:	2330      	movs	r3, #48	; 0x30
 8005464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005468:	9503      	str	r5, [sp, #12]
 800546a:	f04f 0b01 	mov.w	fp, #1
 800546e:	46b8      	mov	r8, r7
 8005470:	4645      	mov	r5, r8
 8005472:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005476:	b10b      	cbz	r3, 800547c <_vfiprintf_r+0x50>
 8005478:	2b25      	cmp	r3, #37	; 0x25
 800547a:	d154      	bne.n	8005526 <_vfiprintf_r+0xfa>
 800547c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005480:	d00b      	beq.n	800549a <_vfiprintf_r+0x6e>
 8005482:	4653      	mov	r3, sl
 8005484:	463a      	mov	r2, r7
 8005486:	4621      	mov	r1, r4
 8005488:	4630      	mov	r0, r6
 800548a:	f7ff ffbc 	bl	8005406 <__sfputs_r>
 800548e:	3001      	adds	r0, #1
 8005490:	f000 80c2 	beq.w	8005618 <_vfiprintf_r+0x1ec>
 8005494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005496:	4453      	add	r3, sl
 8005498:	9309      	str	r3, [sp, #36]	; 0x24
 800549a:	f898 3000 	ldrb.w	r3, [r8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80ba 	beq.w	8005618 <_vfiprintf_r+0x1ec>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b6:	931a      	str	r3, [sp, #104]	; 0x68
 80054b8:	46a8      	mov	r8, r5
 80054ba:	2205      	movs	r2, #5
 80054bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80054c0:	485e      	ldr	r0, [pc, #376]	; (800563c <_vfiprintf_r+0x210>)
 80054c2:	f7fa fe85 	bl	80001d0 <memchr>
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	bb78      	cbnz	r0, 800552a <_vfiprintf_r+0xfe>
 80054ca:	06d9      	lsls	r1, r3, #27
 80054cc:	bf44      	itt	mi
 80054ce:	2220      	movmi	r2, #32
 80054d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054d4:	071a      	lsls	r2, r3, #28
 80054d6:	bf44      	itt	mi
 80054d8:	222b      	movmi	r2, #43	; 0x2b
 80054da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054de:	782a      	ldrb	r2, [r5, #0]
 80054e0:	2a2a      	cmp	r2, #42	; 0x2a
 80054e2:	d02a      	beq.n	800553a <_vfiprintf_r+0x10e>
 80054e4:	9a07      	ldr	r2, [sp, #28]
 80054e6:	46a8      	mov	r8, r5
 80054e8:	2000      	movs	r0, #0
 80054ea:	250a      	movs	r5, #10
 80054ec:	4641      	mov	r1, r8
 80054ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f2:	3b30      	subs	r3, #48	; 0x30
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d969      	bls.n	80055cc <_vfiprintf_r+0x1a0>
 80054f8:	b360      	cbz	r0, 8005554 <_vfiprintf_r+0x128>
 80054fa:	e024      	b.n	8005546 <_vfiprintf_r+0x11a>
 80054fc:	4b50      	ldr	r3, [pc, #320]	; (8005640 <_vfiprintf_r+0x214>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <_vfiprintf_r+0xda>
 8005502:	68b4      	ldr	r4, [r6, #8]
 8005504:	e7a2      	b.n	800544c <_vfiprintf_r+0x20>
 8005506:	4b4f      	ldr	r3, [pc, #316]	; (8005644 <_vfiprintf_r+0x218>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68f4      	ldreq	r4, [r6, #12]
 800550e:	e79d      	b.n	800544c <_vfiprintf_r+0x20>
 8005510:	4621      	mov	r1, r4
 8005512:	4630      	mov	r0, r6
 8005514:	f000 fae0 	bl	8005ad8 <__swsetup_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	d09d      	beq.n	8005458 <_vfiprintf_r+0x2c>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	b01d      	add	sp, #116	; 0x74
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	46a8      	mov	r8, r5
 8005528:	e7a2      	b.n	8005470 <_vfiprintf_r+0x44>
 800552a:	4a44      	ldr	r2, [pc, #272]	; (800563c <_vfiprintf_r+0x210>)
 800552c:	1a80      	subs	r0, r0, r2
 800552e:	fa0b f000 	lsl.w	r0, fp, r0
 8005532:	4318      	orrs	r0, r3
 8005534:	9004      	str	r0, [sp, #16]
 8005536:	4645      	mov	r5, r8
 8005538:	e7be      	b.n	80054b8 <_vfiprintf_r+0x8c>
 800553a:	9a03      	ldr	r2, [sp, #12]
 800553c:	1d11      	adds	r1, r2, #4
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	9103      	str	r1, [sp, #12]
 8005542:	2a00      	cmp	r2, #0
 8005544:	db01      	blt.n	800554a <_vfiprintf_r+0x11e>
 8005546:	9207      	str	r2, [sp, #28]
 8005548:	e004      	b.n	8005554 <_vfiprintf_r+0x128>
 800554a:	4252      	negs	r2, r2
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	9207      	str	r2, [sp, #28]
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	f898 3000 	ldrb.w	r3, [r8]
 8005558:	2b2e      	cmp	r3, #46	; 0x2e
 800555a:	d10e      	bne.n	800557a <_vfiprintf_r+0x14e>
 800555c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005560:	2b2a      	cmp	r3, #42	; 0x2a
 8005562:	d138      	bne.n	80055d6 <_vfiprintf_r+0x1aa>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	9203      	str	r2, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	bfb8      	it	lt
 8005570:	f04f 33ff 	movlt.w	r3, #4294967295
 8005574:	f108 0802 	add.w	r8, r8, #2
 8005578:	9305      	str	r3, [sp, #20]
 800557a:	4d33      	ldr	r5, [pc, #204]	; (8005648 <_vfiprintf_r+0x21c>)
 800557c:	f898 1000 	ldrb.w	r1, [r8]
 8005580:	2203      	movs	r2, #3
 8005582:	4628      	mov	r0, r5
 8005584:	f7fa fe24 	bl	80001d0 <memchr>
 8005588:	b140      	cbz	r0, 800559c <_vfiprintf_r+0x170>
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	1b40      	subs	r0, r0, r5
 800558e:	fa03 f000 	lsl.w	r0, r3, r0
 8005592:	9b04      	ldr	r3, [sp, #16]
 8005594:	4303      	orrs	r3, r0
 8005596:	f108 0801 	add.w	r8, r8, #1
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	f898 1000 	ldrb.w	r1, [r8]
 80055a0:	482a      	ldr	r0, [pc, #168]	; (800564c <_vfiprintf_r+0x220>)
 80055a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055a6:	2206      	movs	r2, #6
 80055a8:	f108 0701 	add.w	r7, r8, #1
 80055ac:	f7fa fe10 	bl	80001d0 <memchr>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d037      	beq.n	8005624 <_vfiprintf_r+0x1f8>
 80055b4:	4b26      	ldr	r3, [pc, #152]	; (8005650 <_vfiprintf_r+0x224>)
 80055b6:	bb1b      	cbnz	r3, 8005600 <_vfiprintf_r+0x1d4>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	3307      	adds	r3, #7
 80055bc:	f023 0307 	bic.w	r3, r3, #7
 80055c0:	3308      	adds	r3, #8
 80055c2:	9303      	str	r3, [sp, #12]
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	444b      	add	r3, r9
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ca:	e750      	b.n	800546e <_vfiprintf_r+0x42>
 80055cc:	fb05 3202 	mla	r2, r5, r2, r3
 80055d0:	2001      	movs	r0, #1
 80055d2:	4688      	mov	r8, r1
 80055d4:	e78a      	b.n	80054ec <_vfiprintf_r+0xc0>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f108 0801 	add.w	r8, r8, #1
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	4619      	mov	r1, r3
 80055e0:	250a      	movs	r5, #10
 80055e2:	4640      	mov	r0, r8
 80055e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e8:	3a30      	subs	r2, #48	; 0x30
 80055ea:	2a09      	cmp	r2, #9
 80055ec:	d903      	bls.n	80055f6 <_vfiprintf_r+0x1ca>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0c3      	beq.n	800557a <_vfiprintf_r+0x14e>
 80055f2:	9105      	str	r1, [sp, #20]
 80055f4:	e7c1      	b.n	800557a <_vfiprintf_r+0x14e>
 80055f6:	fb05 2101 	mla	r1, r5, r1, r2
 80055fa:	2301      	movs	r3, #1
 80055fc:	4680      	mov	r8, r0
 80055fe:	e7f0      	b.n	80055e2 <_vfiprintf_r+0x1b6>
 8005600:	ab03      	add	r3, sp, #12
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	4622      	mov	r2, r4
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <_vfiprintf_r+0x228>)
 8005608:	a904      	add	r1, sp, #16
 800560a:	4630      	mov	r0, r6
 800560c:	f3af 8000 	nop.w
 8005610:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005614:	4681      	mov	r9, r0
 8005616:	d1d5      	bne.n	80055c4 <_vfiprintf_r+0x198>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	065b      	lsls	r3, r3, #25
 800561c:	f53f af7e 	bmi.w	800551c <_vfiprintf_r+0xf0>
 8005620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005622:	e77d      	b.n	8005520 <_vfiprintf_r+0xf4>
 8005624:	ab03      	add	r3, sp, #12
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	4622      	mov	r2, r4
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <_vfiprintf_r+0x228>)
 800562c:	a904      	add	r1, sp, #16
 800562e:	4630      	mov	r0, r6
 8005630:	f000 f888 	bl	8005744 <_printf_i>
 8005634:	e7ec      	b.n	8005610 <_vfiprintf_r+0x1e4>
 8005636:	bf00      	nop
 8005638:	0800612c 	.word	0x0800612c
 800563c:	0800616c 	.word	0x0800616c
 8005640:	0800614c 	.word	0x0800614c
 8005644:	0800610c 	.word	0x0800610c
 8005648:	08006172 	.word	0x08006172
 800564c:	08006176 	.word	0x08006176
 8005650:	00000000 	.word	0x00000000
 8005654:	08005407 	.word	0x08005407

08005658 <_printf_common>:
 8005658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	4691      	mov	r9, r2
 800565e:	461f      	mov	r7, r3
 8005660:	688a      	ldr	r2, [r1, #8]
 8005662:	690b      	ldr	r3, [r1, #16]
 8005664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005668:	4293      	cmp	r3, r2
 800566a:	bfb8      	it	lt
 800566c:	4613      	movlt	r3, r2
 800566e:	f8c9 3000 	str.w	r3, [r9]
 8005672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005676:	4606      	mov	r6, r0
 8005678:	460c      	mov	r4, r1
 800567a:	b112      	cbz	r2, 8005682 <_printf_common+0x2a>
 800567c:	3301      	adds	r3, #1
 800567e:	f8c9 3000 	str.w	r3, [r9]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	0699      	lsls	r1, r3, #26
 8005686:	bf42      	ittt	mi
 8005688:	f8d9 3000 	ldrmi.w	r3, [r9]
 800568c:	3302      	addmi	r3, #2
 800568e:	f8c9 3000 	strmi.w	r3, [r9]
 8005692:	6825      	ldr	r5, [r4, #0]
 8005694:	f015 0506 	ands.w	r5, r5, #6
 8005698:	d107      	bne.n	80056aa <_printf_common+0x52>
 800569a:	f104 0a19 	add.w	sl, r4, #25
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	f8d9 2000 	ldr.w	r2, [r9]
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	dc28      	bgt.n	80056fc <_printf_common+0xa4>
 80056aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	3300      	adds	r3, #0
 80056b2:	bf18      	it	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	0692      	lsls	r2, r2, #26
 80056b8:	d42d      	bmi.n	8005716 <_printf_common+0xbe>
 80056ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056be:	4639      	mov	r1, r7
 80056c0:	4630      	mov	r0, r6
 80056c2:	47c0      	blx	r8
 80056c4:	3001      	adds	r0, #1
 80056c6:	d020      	beq.n	800570a <_printf_common+0xb2>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	68e5      	ldr	r5, [r4, #12]
 80056cc:	f8d9 2000 	ldr.w	r2, [r9]
 80056d0:	f003 0306 	and.w	r3, r3, #6
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	bf08      	it	eq
 80056d8:	1aad      	subeq	r5, r5, r2
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	6922      	ldr	r2, [r4, #16]
 80056de:	bf0c      	ite	eq
 80056e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e4:	2500      	movne	r5, #0
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bfc4      	itt	gt
 80056ea:	1a9b      	subgt	r3, r3, r2
 80056ec:	18ed      	addgt	r5, r5, r3
 80056ee:	f04f 0900 	mov.w	r9, #0
 80056f2:	341a      	adds	r4, #26
 80056f4:	454d      	cmp	r5, r9
 80056f6:	d11a      	bne.n	800572e <_printf_common+0xd6>
 80056f8:	2000      	movs	r0, #0
 80056fa:	e008      	b.n	800570e <_printf_common+0xb6>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4652      	mov	r2, sl
 8005700:	4639      	mov	r1, r7
 8005702:	4630      	mov	r0, r6
 8005704:	47c0      	blx	r8
 8005706:	3001      	adds	r0, #1
 8005708:	d103      	bne.n	8005712 <_printf_common+0xba>
 800570a:	f04f 30ff 	mov.w	r0, #4294967295
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	3501      	adds	r5, #1
 8005714:	e7c3      	b.n	800569e <_printf_common+0x46>
 8005716:	18e1      	adds	r1, r4, r3
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	2030      	movs	r0, #48	; 0x30
 800571c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005720:	4422      	add	r2, r4
 8005722:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800572a:	3302      	adds	r3, #2
 800572c:	e7c5      	b.n	80056ba <_printf_common+0x62>
 800572e:	2301      	movs	r3, #1
 8005730:	4622      	mov	r2, r4
 8005732:	4639      	mov	r1, r7
 8005734:	4630      	mov	r0, r6
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d0e6      	beq.n	800570a <_printf_common+0xb2>
 800573c:	f109 0901 	add.w	r9, r9, #1
 8005740:	e7d8      	b.n	80056f4 <_printf_common+0x9c>
	...

08005744 <_printf_i>:
 8005744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005748:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800574c:	460c      	mov	r4, r1
 800574e:	7e09      	ldrb	r1, [r1, #24]
 8005750:	b085      	sub	sp, #20
 8005752:	296e      	cmp	r1, #110	; 0x6e
 8005754:	4617      	mov	r7, r2
 8005756:	4606      	mov	r6, r0
 8005758:	4698      	mov	r8, r3
 800575a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800575c:	f000 80b3 	beq.w	80058c6 <_printf_i+0x182>
 8005760:	d822      	bhi.n	80057a8 <_printf_i+0x64>
 8005762:	2963      	cmp	r1, #99	; 0x63
 8005764:	d036      	beq.n	80057d4 <_printf_i+0x90>
 8005766:	d80a      	bhi.n	800577e <_printf_i+0x3a>
 8005768:	2900      	cmp	r1, #0
 800576a:	f000 80b9 	beq.w	80058e0 <_printf_i+0x19c>
 800576e:	2958      	cmp	r1, #88	; 0x58
 8005770:	f000 8083 	beq.w	800587a <_printf_i+0x136>
 8005774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005778:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800577c:	e032      	b.n	80057e4 <_printf_i+0xa0>
 800577e:	2964      	cmp	r1, #100	; 0x64
 8005780:	d001      	beq.n	8005786 <_printf_i+0x42>
 8005782:	2969      	cmp	r1, #105	; 0x69
 8005784:	d1f6      	bne.n	8005774 <_printf_i+0x30>
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	0605      	lsls	r5, r0, #24
 800578c:	f103 0104 	add.w	r1, r3, #4
 8005790:	d52a      	bpl.n	80057e8 <_printf_i+0xa4>
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	da03      	bge.n	80057a2 <_printf_i+0x5e>
 800579a:	222d      	movs	r2, #45	; 0x2d
 800579c:	425b      	negs	r3, r3
 800579e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057a2:	486f      	ldr	r0, [pc, #444]	; (8005960 <_printf_i+0x21c>)
 80057a4:	220a      	movs	r2, #10
 80057a6:	e039      	b.n	800581c <_printf_i+0xd8>
 80057a8:	2973      	cmp	r1, #115	; 0x73
 80057aa:	f000 809d 	beq.w	80058e8 <_printf_i+0x1a4>
 80057ae:	d808      	bhi.n	80057c2 <_printf_i+0x7e>
 80057b0:	296f      	cmp	r1, #111	; 0x6f
 80057b2:	d020      	beq.n	80057f6 <_printf_i+0xb2>
 80057b4:	2970      	cmp	r1, #112	; 0x70
 80057b6:	d1dd      	bne.n	8005774 <_printf_i+0x30>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	f043 0320 	orr.w	r3, r3, #32
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	e003      	b.n	80057ca <_printf_i+0x86>
 80057c2:	2975      	cmp	r1, #117	; 0x75
 80057c4:	d017      	beq.n	80057f6 <_printf_i+0xb2>
 80057c6:	2978      	cmp	r1, #120	; 0x78
 80057c8:	d1d4      	bne.n	8005774 <_printf_i+0x30>
 80057ca:	2378      	movs	r3, #120	; 0x78
 80057cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057d0:	4864      	ldr	r0, [pc, #400]	; (8005964 <_printf_i+0x220>)
 80057d2:	e055      	b.n	8005880 <_printf_i+0x13c>
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	1d19      	adds	r1, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6011      	str	r1, [r2, #0]
 80057dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e4:	2301      	movs	r3, #1
 80057e6:	e08c      	b.n	8005902 <_printf_i+0x1be>
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6011      	str	r1, [r2, #0]
 80057ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057f0:	bf18      	it	ne
 80057f2:	b21b      	sxthne	r3, r3
 80057f4:	e7cf      	b.n	8005796 <_printf_i+0x52>
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1d18      	adds	r0, r3, #4
 80057fc:	6010      	str	r0, [r2, #0]
 80057fe:	0628      	lsls	r0, r5, #24
 8005800:	d501      	bpl.n	8005806 <_printf_i+0xc2>
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	e002      	b.n	800580c <_printf_i+0xc8>
 8005806:	0668      	lsls	r0, r5, #25
 8005808:	d5fb      	bpl.n	8005802 <_printf_i+0xbe>
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	4854      	ldr	r0, [pc, #336]	; (8005960 <_printf_i+0x21c>)
 800580e:	296f      	cmp	r1, #111	; 0x6f
 8005810:	bf14      	ite	ne
 8005812:	220a      	movne	r2, #10
 8005814:	2208      	moveq	r2, #8
 8005816:	2100      	movs	r1, #0
 8005818:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800581c:	6865      	ldr	r5, [r4, #4]
 800581e:	60a5      	str	r5, [r4, #8]
 8005820:	2d00      	cmp	r5, #0
 8005822:	f2c0 8095 	blt.w	8005950 <_printf_i+0x20c>
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	f021 0104 	bic.w	r1, r1, #4
 800582c:	6021      	str	r1, [r4, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d13d      	bne.n	80058ae <_printf_i+0x16a>
 8005832:	2d00      	cmp	r5, #0
 8005834:	f040 808e 	bne.w	8005954 <_printf_i+0x210>
 8005838:	4665      	mov	r5, ip
 800583a:	2a08      	cmp	r2, #8
 800583c:	d10b      	bne.n	8005856 <_printf_i+0x112>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	07db      	lsls	r3, r3, #31
 8005842:	d508      	bpl.n	8005856 <_printf_i+0x112>
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	bfde      	ittt	le
 800584c:	2330      	movle	r3, #48	; 0x30
 800584e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005852:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005856:	ebac 0305 	sub.w	r3, ip, r5
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	f8cd 8000 	str.w	r8, [sp]
 8005860:	463b      	mov	r3, r7
 8005862:	aa03      	add	r2, sp, #12
 8005864:	4621      	mov	r1, r4
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff fef6 	bl	8005658 <_printf_common>
 800586c:	3001      	adds	r0, #1
 800586e:	d14d      	bne.n	800590c <_printf_i+0x1c8>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	b005      	add	sp, #20
 8005876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800587a:	4839      	ldr	r0, [pc, #228]	; (8005960 <_printf_i+0x21c>)
 800587c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	6821      	ldr	r1, [r4, #0]
 8005884:	1d1d      	adds	r5, r3, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6015      	str	r5, [r2, #0]
 800588a:	060a      	lsls	r2, r1, #24
 800588c:	d50b      	bpl.n	80058a6 <_printf_i+0x162>
 800588e:	07ca      	lsls	r2, r1, #31
 8005890:	bf44      	itt	mi
 8005892:	f041 0120 	orrmi.w	r1, r1, #32
 8005896:	6021      	strmi	r1, [r4, #0]
 8005898:	b91b      	cbnz	r3, 80058a2 <_printf_i+0x15e>
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	f022 0220 	bic.w	r2, r2, #32
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	2210      	movs	r2, #16
 80058a4:	e7b7      	b.n	8005816 <_printf_i+0xd2>
 80058a6:	064d      	lsls	r5, r1, #25
 80058a8:	bf48      	it	mi
 80058aa:	b29b      	uxthmi	r3, r3
 80058ac:	e7ef      	b.n	800588e <_printf_i+0x14a>
 80058ae:	4665      	mov	r5, ip
 80058b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80058b4:	fb02 3311 	mls	r3, r2, r1, r3
 80058b8:	5cc3      	ldrb	r3, [r0, r3]
 80058ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058be:	460b      	mov	r3, r1
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d1f5      	bne.n	80058b0 <_printf_i+0x16c>
 80058c4:	e7b9      	b.n	800583a <_printf_i+0xf6>
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	6961      	ldr	r1, [r4, #20]
 80058cc:	1d18      	adds	r0, r3, #4
 80058ce:	6010      	str	r0, [r2, #0]
 80058d0:	0628      	lsls	r0, r5, #24
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	d501      	bpl.n	80058da <_printf_i+0x196>
 80058d6:	6019      	str	r1, [r3, #0]
 80058d8:	e002      	b.n	80058e0 <_printf_i+0x19c>
 80058da:	066a      	lsls	r2, r5, #25
 80058dc:	d5fb      	bpl.n	80058d6 <_printf_i+0x192>
 80058de:	8019      	strh	r1, [r3, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	4665      	mov	r5, ip
 80058e6:	e7b9      	b.n	800585c <_printf_i+0x118>
 80058e8:	6813      	ldr	r3, [r2, #0]
 80058ea:	1d19      	adds	r1, r3, #4
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	681d      	ldr	r5, [r3, #0]
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	2100      	movs	r1, #0
 80058f4:	4628      	mov	r0, r5
 80058f6:	f7fa fc6b 	bl	80001d0 <memchr>
 80058fa:	b108      	cbz	r0, 8005900 <_printf_i+0x1bc>
 80058fc:	1b40      	subs	r0, r0, r5
 80058fe:	6060      	str	r0, [r4, #4]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	2300      	movs	r3, #0
 8005906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590a:	e7a7      	b.n	800585c <_printf_i+0x118>
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	462a      	mov	r2, r5
 8005910:	4639      	mov	r1, r7
 8005912:	4630      	mov	r0, r6
 8005914:	47c0      	blx	r8
 8005916:	3001      	adds	r0, #1
 8005918:	d0aa      	beq.n	8005870 <_printf_i+0x12c>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	d413      	bmi.n	8005948 <_printf_i+0x204>
 8005920:	68e0      	ldr	r0, [r4, #12]
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	4298      	cmp	r0, r3
 8005926:	bfb8      	it	lt
 8005928:	4618      	movlt	r0, r3
 800592a:	e7a3      	b.n	8005874 <_printf_i+0x130>
 800592c:	2301      	movs	r3, #1
 800592e:	464a      	mov	r2, r9
 8005930:	4639      	mov	r1, r7
 8005932:	4630      	mov	r0, r6
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d09a      	beq.n	8005870 <_printf_i+0x12c>
 800593a:	3501      	adds	r5, #1
 800593c:	68e3      	ldr	r3, [r4, #12]
 800593e:	9a03      	ldr	r2, [sp, #12]
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	42ab      	cmp	r3, r5
 8005944:	dcf2      	bgt.n	800592c <_printf_i+0x1e8>
 8005946:	e7eb      	b.n	8005920 <_printf_i+0x1dc>
 8005948:	2500      	movs	r5, #0
 800594a:	f104 0919 	add.w	r9, r4, #25
 800594e:	e7f5      	b.n	800593c <_printf_i+0x1f8>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ac      	bne.n	80058ae <_printf_i+0x16a>
 8005954:	7803      	ldrb	r3, [r0, #0]
 8005956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800595a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800595e:	e76c      	b.n	800583a <_printf_i+0xf6>
 8005960:	0800617d 	.word	0x0800617d
 8005964:	0800618e 	.word	0x0800618e

08005968 <_sbrk_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4c06      	ldr	r4, [pc, #24]	; (8005984 <_sbrk_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4605      	mov	r5, r0
 8005970:	4608      	mov	r0, r1
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	f7fb ff08 	bl	8001788 <_sbrk>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_sbrk_r+0x1a>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	b103      	cbz	r3, 8005982 <_sbrk_r+0x1a>
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	200041ec 	.word	0x200041ec

08005988 <__sread>:
 8005988:	b510      	push	{r4, lr}
 800598a:	460c      	mov	r4, r1
 800598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005990:	f000 fa96 	bl	8005ec0 <_read_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	bfab      	itete	ge
 8005998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800599a:	89a3      	ldrhlt	r3, [r4, #12]
 800599c:	181b      	addge	r3, r3, r0
 800599e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059a2:	bfac      	ite	ge
 80059a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059a6:	81a3      	strhlt	r3, [r4, #12]
 80059a8:	bd10      	pop	{r4, pc}

080059aa <__swrite>:
 80059aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	461f      	mov	r7, r3
 80059b0:	898b      	ldrh	r3, [r1, #12]
 80059b2:	05db      	lsls	r3, r3, #23
 80059b4:	4605      	mov	r5, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	4616      	mov	r6, r2
 80059ba:	d505      	bpl.n	80059c8 <__swrite+0x1e>
 80059bc:	2302      	movs	r3, #2
 80059be:	2200      	movs	r2, #0
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 f9b6 	bl	8005d34 <_lseek_r>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d2:	81a3      	strh	r3, [r4, #12]
 80059d4:	4632      	mov	r2, r6
 80059d6:	463b      	mov	r3, r7
 80059d8:	4628      	mov	r0, r5
 80059da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	f000 b869 	b.w	8005ab4 <_write_r>

080059e2 <__sseek>:
 80059e2:	b510      	push	{r4, lr}
 80059e4:	460c      	mov	r4, r1
 80059e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ea:	f000 f9a3 	bl	8005d34 <_lseek_r>
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	bf15      	itete	ne
 80059f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059fe:	81a3      	strheq	r3, [r4, #12]
 8005a00:	bf18      	it	ne
 8005a02:	81a3      	strhne	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__sclose>:
 8005a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0a:	f000 b8d3 	b.w	8005bb4 <_close_r>
	...

08005a10 <__swbuf_r>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	460e      	mov	r6, r1
 8005a14:	4614      	mov	r4, r2
 8005a16:	4605      	mov	r5, r0
 8005a18:	b118      	cbz	r0, 8005a22 <__swbuf_r+0x12>
 8005a1a:	6983      	ldr	r3, [r0, #24]
 8005a1c:	b90b      	cbnz	r3, 8005a22 <__swbuf_r+0x12>
 8005a1e:	f7ff fbf7 	bl	8005210 <__sinit>
 8005a22:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <__swbuf_r+0x98>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d12a      	bne.n	8005a7e <__swbuf_r+0x6e>
 8005a28:	686c      	ldr	r4, [r5, #4]
 8005a2a:	69a3      	ldr	r3, [r4, #24]
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	071a      	lsls	r2, r3, #28
 8005a32:	d52e      	bpl.n	8005a92 <__swbuf_r+0x82>
 8005a34:	6923      	ldr	r3, [r4, #16]
 8005a36:	b363      	cbz	r3, 8005a92 <__swbuf_r+0x82>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	6820      	ldr	r0, [r4, #0]
 8005a3c:	1ac0      	subs	r0, r0, r3
 8005a3e:	6963      	ldr	r3, [r4, #20]
 8005a40:	b2f6      	uxtb	r6, r6
 8005a42:	4283      	cmp	r3, r0
 8005a44:	4637      	mov	r7, r6
 8005a46:	dc04      	bgt.n	8005a52 <__swbuf_r+0x42>
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 f948 	bl	8005ce0 <_fflush_r>
 8005a50:	bb28      	cbnz	r0, 8005a9e <__swbuf_r+0x8e>
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	60a3      	str	r3, [r4, #8]
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	701e      	strb	r6, [r3, #0]
 8005a60:	6963      	ldr	r3, [r4, #20]
 8005a62:	3001      	adds	r0, #1
 8005a64:	4283      	cmp	r3, r0
 8005a66:	d004      	beq.n	8005a72 <__swbuf_r+0x62>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	07db      	lsls	r3, r3, #31
 8005a6c:	d519      	bpl.n	8005aa2 <__swbuf_r+0x92>
 8005a6e:	2e0a      	cmp	r6, #10
 8005a70:	d117      	bne.n	8005aa2 <__swbuf_r+0x92>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 f933 	bl	8005ce0 <_fflush_r>
 8005a7a:	b190      	cbz	r0, 8005aa2 <__swbuf_r+0x92>
 8005a7c:	e00f      	b.n	8005a9e <__swbuf_r+0x8e>
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <__swbuf_r+0x9c>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d101      	bne.n	8005a88 <__swbuf_r+0x78>
 8005a84:	68ac      	ldr	r4, [r5, #8]
 8005a86:	e7d0      	b.n	8005a2a <__swbuf_r+0x1a>
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <__swbuf_r+0xa0>)
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	bf08      	it	eq
 8005a8e:	68ec      	ldreq	r4, [r5, #12]
 8005a90:	e7cb      	b.n	8005a2a <__swbuf_r+0x1a>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 f81f 	bl	8005ad8 <__swsetup_r>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d0cc      	beq.n	8005a38 <__swbuf_r+0x28>
 8005a9e:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800612c 	.word	0x0800612c
 8005aac:	0800614c 	.word	0x0800614c
 8005ab0:	0800610c 	.word	0x0800610c

08005ab4 <_write_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4c07      	ldr	r4, [pc, #28]	; (8005ad4 <_write_r+0x20>)
 8005ab8:	4605      	mov	r5, r0
 8005aba:	4608      	mov	r0, r1
 8005abc:	4611      	mov	r1, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	6022      	str	r2, [r4, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fb f9c8 	bl	8000e58 <_write>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_write_r+0x1e>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_write_r+0x1e>
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	200041ec 	.word	0x200041ec

08005ad8 <__swsetup_r>:
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <__swsetup_r+0xcc>)
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	b125      	cbz	r5, 8005aee <__swsetup_r+0x16>
 8005ae4:	69ab      	ldr	r3, [r5, #24]
 8005ae6:	b913      	cbnz	r3, 8005aee <__swsetup_r+0x16>
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f7ff fb91 	bl	8005210 <__sinit>
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <__swsetup_r+0xd0>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d10f      	bne.n	8005b14 <__swsetup_r+0x3c>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	0715      	lsls	r5, r2, #28
 8005afe:	d42c      	bmi.n	8005b5a <__swsetup_r+0x82>
 8005b00:	06d0      	lsls	r0, r2, #27
 8005b02:	d411      	bmi.n	8005b28 <__swsetup_r+0x50>
 8005b04:	2209      	movs	r2, #9
 8005b06:	6032      	str	r2, [r6, #0]
 8005b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	e03e      	b.n	8005b92 <__swsetup_r+0xba>
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <__swsetup_r+0xd4>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d101      	bne.n	8005b1e <__swsetup_r+0x46>
 8005b1a:	68ac      	ldr	r4, [r5, #8]
 8005b1c:	e7eb      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <__swsetup_r+0xd8>)
 8005b20:	429c      	cmp	r4, r3
 8005b22:	bf08      	it	eq
 8005b24:	68ec      	ldreq	r4, [r5, #12]
 8005b26:	e7e6      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b28:	0751      	lsls	r1, r2, #29
 8005b2a:	d512      	bpl.n	8005b52 <__swsetup_r+0x7a>
 8005b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b2e:	b141      	cbz	r1, 8005b42 <__swsetup_r+0x6a>
 8005b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b34:	4299      	cmp	r1, r3
 8005b36:	d002      	beq.n	8005b3e <__swsetup_r+0x66>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 f973 	bl	8005e24 <_free_r>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6363      	str	r3, [r4, #52]	; 0x34
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f043 0308 	orr.w	r3, r3, #8
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	b94b      	cbnz	r3, 8005b72 <__swsetup_r+0x9a>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b68:	d003      	beq.n	8005b72 <__swsetup_r+0x9a>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f917 	bl	8005da0 <__smakebuf_r>
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	f012 0301 	ands.w	r3, r2, #1
 8005b78:	d00c      	beq.n	8005b94 <__swsetup_r+0xbc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	425b      	negs	r3, r3
 8005b82:	61a3      	str	r3, [r4, #24]
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b953      	cbnz	r3, 8005b9e <__swsetup_r+0xc6>
 8005b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b90:	d1ba      	bne.n	8005b08 <__swsetup_r+0x30>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	0792      	lsls	r2, r2, #30
 8005b96:	bf58      	it	pl
 8005b98:	6963      	ldrpl	r3, [r4, #20]
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	e7f2      	b.n	8005b84 <__swsetup_r+0xac>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e7f7      	b.n	8005b92 <__swsetup_r+0xba>
 8005ba2:	bf00      	nop
 8005ba4:	20000014 	.word	0x20000014
 8005ba8:	0800612c 	.word	0x0800612c
 8005bac:	0800614c 	.word	0x0800614c
 8005bb0:	0800610c 	.word	0x0800610c

08005bb4 <_close_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4c06      	ldr	r4, [pc, #24]	; (8005bd0 <_close_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4605      	mov	r5, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	f7fb fdad 	bl	800171e <_close>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_close_r+0x1a>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_close_r+0x1a>
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	200041ec 	.word	0x200041ec

08005bd4 <__sflush_r>:
 8005bd4:	898a      	ldrh	r2, [r1, #12]
 8005bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	4605      	mov	r5, r0
 8005bdc:	0710      	lsls	r0, r2, #28
 8005bde:	460c      	mov	r4, r1
 8005be0:	d458      	bmi.n	8005c94 <__sflush_r+0xc0>
 8005be2:	684b      	ldr	r3, [r1, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc05      	bgt.n	8005bf4 <__sflush_r+0x20>
 8005be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dc02      	bgt.n	8005bf4 <__sflush_r+0x20>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	d0f9      	beq.n	8005bee <__sflush_r+0x1a>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c00:	682f      	ldr	r7, [r5, #0]
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	d032      	beq.n	8005c6e <__sflush_r+0x9a>
 8005c08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	075a      	lsls	r2, r3, #29
 8005c0e:	d505      	bpl.n	8005c1c <__sflush_r+0x48>
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	1ac0      	subs	r0, r0, r3
 8005c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c16:	b10b      	cbz	r3, 8005c1c <__sflush_r+0x48>
 8005c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1a:	1ac0      	subs	r0, r0, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c22:	6a21      	ldr	r1, [r4, #32]
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b0      	blx	r6
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	d106      	bne.n	8005c3c <__sflush_r+0x68>
 8005c2e:	6829      	ldr	r1, [r5, #0]
 8005c30:	291d      	cmp	r1, #29
 8005c32:	d848      	bhi.n	8005cc6 <__sflush_r+0xf2>
 8005c34:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <__sflush_r+0x108>)
 8005c36:	40ca      	lsrs	r2, r1
 8005c38:	07d6      	lsls	r6, r2, #31
 8005c3a:	d544      	bpl.n	8005cc6 <__sflush_r+0xf2>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	6062      	str	r2, [r4, #4]
 8005c40:	04d9      	lsls	r1, r3, #19
 8005c42:	6922      	ldr	r2, [r4, #16]
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	d504      	bpl.n	8005c52 <__sflush_r+0x7e>
 8005c48:	1c42      	adds	r2, r0, #1
 8005c4a:	d101      	bne.n	8005c50 <__sflush_r+0x7c>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b903      	cbnz	r3, 8005c52 <__sflush_r+0x7e>
 8005c50:	6560      	str	r0, [r4, #84]	; 0x54
 8005c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c54:	602f      	str	r7, [r5, #0]
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d0c9      	beq.n	8005bee <__sflush_r+0x1a>
 8005c5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d002      	beq.n	8005c68 <__sflush_r+0x94>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f8de 	bl	8005e24 <_free_r>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c6c:	e7c0      	b.n	8005bf0 <__sflush_r+0x1c>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b0      	blx	r6
 8005c74:	1c41      	adds	r1, r0, #1
 8005c76:	d1c8      	bne.n	8005c0a <__sflush_r+0x36>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0c5      	beq.n	8005c0a <__sflush_r+0x36>
 8005c7e:	2b1d      	cmp	r3, #29
 8005c80:	d001      	beq.n	8005c86 <__sflush_r+0xb2>
 8005c82:	2b16      	cmp	r3, #22
 8005c84:	d101      	bne.n	8005c8a <__sflush_r+0xb6>
 8005c86:	602f      	str	r7, [r5, #0]
 8005c88:	e7b1      	b.n	8005bee <__sflush_r+0x1a>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	e7ad      	b.n	8005bf0 <__sflush_r+0x1c>
 8005c94:	690f      	ldr	r7, [r1, #16]
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d0a9      	beq.n	8005bee <__sflush_r+0x1a>
 8005c9a:	0793      	lsls	r3, r2, #30
 8005c9c:	680e      	ldr	r6, [r1, #0]
 8005c9e:	bf08      	it	eq
 8005ca0:	694b      	ldreq	r3, [r1, #20]
 8005ca2:	600f      	str	r7, [r1, #0]
 8005ca4:	bf18      	it	ne
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	eba6 0807 	sub.w	r8, r6, r7
 8005cac:	608b      	str	r3, [r1, #8]
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	dd9c      	ble.n	8005bee <__sflush_r+0x1a>
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	463a      	mov	r2, r7
 8005cb8:	6a21      	ldr	r1, [r4, #32]
 8005cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b0      	blx	r6
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	dc06      	bgt.n	8005cd2 <__sflush_r+0xfe>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	e78e      	b.n	8005bf0 <__sflush_r+0x1c>
 8005cd2:	4407      	add	r7, r0
 8005cd4:	eba8 0800 	sub.w	r8, r8, r0
 8005cd8:	e7e9      	b.n	8005cae <__sflush_r+0xda>
 8005cda:	bf00      	nop
 8005cdc:	20400001 	.word	0x20400001

08005ce0 <_fflush_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	690b      	ldr	r3, [r1, #16]
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b1db      	cbz	r3, 8005d22 <_fflush_r+0x42>
 8005cea:	b118      	cbz	r0, 8005cf4 <_fflush_r+0x14>
 8005cec:	6983      	ldr	r3, [r0, #24]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <_fflush_r+0x14>
 8005cf0:	f7ff fa8e 	bl	8005210 <__sinit>
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <_fflush_r+0x48>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d109      	bne.n	8005d0e <_fflush_r+0x2e>
 8005cfa:	686c      	ldr	r4, [r5, #4]
 8005cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d00:	b17b      	cbz	r3, 8005d22 <_fflush_r+0x42>
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0a:	f7ff bf63 	b.w	8005bd4 <__sflush_r>
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <_fflush_r+0x4c>)
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d101      	bne.n	8005d18 <_fflush_r+0x38>
 8005d14:	68ac      	ldr	r4, [r5, #8]
 8005d16:	e7f1      	b.n	8005cfc <_fflush_r+0x1c>
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <_fflush_r+0x50>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	bf08      	it	eq
 8005d1e:	68ec      	ldreq	r4, [r5, #12]
 8005d20:	e7ec      	b.n	8005cfc <_fflush_r+0x1c>
 8005d22:	2000      	movs	r0, #0
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	0800612c 	.word	0x0800612c
 8005d2c:	0800614c 	.word	0x0800614c
 8005d30:	0800610c 	.word	0x0800610c

08005d34 <_lseek_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	4c07      	ldr	r4, [pc, #28]	; (8005d54 <_lseek_r+0x20>)
 8005d38:	4605      	mov	r5, r0
 8005d3a:	4608      	mov	r0, r1
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7fb fd12 	bl	800176c <_lseek>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_lseek_r+0x1e>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_lseek_r+0x1e>
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200041ec 	.word	0x200041ec

08005d58 <__swhatbuf_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	460e      	mov	r6, r1
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	b096      	sub	sp, #88	; 0x58
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	da07      	bge.n	8005d7a <__swhatbuf_r+0x22>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	89b3      	ldrh	r3, [r6, #12]
 8005d70:	061a      	lsls	r2, r3, #24
 8005d72:	d410      	bmi.n	8005d96 <__swhatbuf_r+0x3e>
 8005d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d78:	e00e      	b.n	8005d98 <__swhatbuf_r+0x40>
 8005d7a:	466a      	mov	r2, sp
 8005d7c:	f000 f8b2 	bl	8005ee4 <_fstat_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	dbf2      	blt.n	8005d6a <__swhatbuf_r+0x12>
 8005d84:	9a01      	ldr	r2, [sp, #4]
 8005d86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d8e:	425a      	negs	r2, r3
 8005d90:	415a      	adcs	r2, r3
 8005d92:	602a      	str	r2, [r5, #0]
 8005d94:	e7ee      	b.n	8005d74 <__swhatbuf_r+0x1c>
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	2000      	movs	r0, #0
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	b016      	add	sp, #88	; 0x58
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}

08005da0 <__smakebuf_r>:
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da4:	079d      	lsls	r5, r3, #30
 8005da6:	4606      	mov	r6, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	d507      	bpl.n	8005dbc <__smakebuf_r+0x1c>
 8005dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	2301      	movs	r3, #1
 8005db6:	6163      	str	r3, [r4, #20]
 8005db8:	b002      	add	sp, #8
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	ab01      	add	r3, sp, #4
 8005dbe:	466a      	mov	r2, sp
 8005dc0:	f7ff ffca 	bl	8005d58 <__swhatbuf_r>
 8005dc4:	9900      	ldr	r1, [sp, #0]
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff faab 	bl	8005324 <_malloc_r>
 8005dce:	b948      	cbnz	r0, 8005de4 <__smakebuf_r+0x44>
 8005dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd4:	059a      	lsls	r2, r3, #22
 8005dd6:	d4ef      	bmi.n	8005db8 <__smakebuf_r+0x18>
 8005dd8:	f023 0303 	bic.w	r3, r3, #3
 8005ddc:	f043 0302 	orr.w	r3, r3, #2
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	e7e3      	b.n	8005dac <__smakebuf_r+0xc>
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <__smakebuf_r+0x7c>)
 8005de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	6020      	str	r0, [r4, #0]
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	6163      	str	r3, [r4, #20]
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	6120      	str	r0, [r4, #16]
 8005dfa:	b15b      	cbz	r3, 8005e14 <__smakebuf_r+0x74>
 8005dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f881 	bl	8005f08 <_isatty_r>
 8005e06:	b128      	cbz	r0, 8005e14 <__smakebuf_r+0x74>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f023 0303 	bic.w	r3, r3, #3
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	431d      	orrs	r5, r3
 8005e18:	81a5      	strh	r5, [r4, #12]
 8005e1a:	e7cd      	b.n	8005db8 <__smakebuf_r+0x18>
 8005e1c:	080051d9 	.word	0x080051d9

08005e20 <__malloc_lock>:
 8005e20:	4770      	bx	lr

08005e22 <__malloc_unlock>:
 8005e22:	4770      	bx	lr

08005e24 <_free_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4605      	mov	r5, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d045      	beq.n	8005eb8 <_free_r+0x94>
 8005e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e30:	1f0c      	subs	r4, r1, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfb8      	it	lt
 8005e36:	18e4      	addlt	r4, r4, r3
 8005e38:	f7ff fff2 	bl	8005e20 <__malloc_lock>
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <_free_r+0x98>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	b933      	cbnz	r3, 8005e52 <_free_r+0x2e>
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	6014      	str	r4, [r2, #0]
 8005e48:	4628      	mov	r0, r5
 8005e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4e:	f7ff bfe8 	b.w	8005e22 <__malloc_unlock>
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	d90c      	bls.n	8005e70 <_free_r+0x4c>
 8005e56:	6821      	ldr	r1, [r4, #0]
 8005e58:	1862      	adds	r2, r4, r1
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bf04      	itt	eq
 8005e5e:	681a      	ldreq	r2, [r3, #0]
 8005e60:	685b      	ldreq	r3, [r3, #4]
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	bf04      	itt	eq
 8005e66:	1852      	addeq	r2, r2, r1
 8005e68:	6022      	streq	r2, [r4, #0]
 8005e6a:	6004      	str	r4, [r0, #0]
 8005e6c:	e7ec      	b.n	8005e48 <_free_r+0x24>
 8005e6e:	4613      	mov	r3, r2
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	b10a      	cbz	r2, 8005e78 <_free_r+0x54>
 8005e74:	42a2      	cmp	r2, r4
 8005e76:	d9fa      	bls.n	8005e6e <_free_r+0x4a>
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	1858      	adds	r0, r3, r1
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d10b      	bne.n	8005e98 <_free_r+0x74>
 8005e80:	6820      	ldr	r0, [r4, #0]
 8005e82:	4401      	add	r1, r0
 8005e84:	1858      	adds	r0, r3, r1
 8005e86:	4282      	cmp	r2, r0
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	d1dd      	bne.n	8005e48 <_free_r+0x24>
 8005e8c:	6810      	ldr	r0, [r2, #0]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	4401      	add	r1, r0
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	e7d7      	b.n	8005e48 <_free_r+0x24>
 8005e98:	d902      	bls.n	8005ea0 <_free_r+0x7c>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	e7d3      	b.n	8005e48 <_free_r+0x24>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	1821      	adds	r1, r4, r0
 8005ea4:	428a      	cmp	r2, r1
 8005ea6:	bf04      	itt	eq
 8005ea8:	6811      	ldreq	r1, [r2, #0]
 8005eaa:	6852      	ldreq	r2, [r2, #4]
 8005eac:	6062      	str	r2, [r4, #4]
 8005eae:	bf04      	itt	eq
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	605c      	str	r4, [r3, #4]
 8005eb6:	e7c7      	b.n	8005e48 <_free_r+0x24>
 8005eb8:	bd38      	pop	{r3, r4, r5, pc}
 8005eba:	bf00      	nop
 8005ebc:	20004048 	.word	0x20004048

08005ec0 <_read_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4c07      	ldr	r4, [pc, #28]	; (8005ee0 <_read_r+0x20>)
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	4608      	mov	r0, r1
 8005ec8:	4611      	mov	r1, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	6022      	str	r2, [r4, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f7fb fc08 	bl	80016e4 <_read>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_read_r+0x1e>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_read_r+0x1e>
 8005edc:	602b      	str	r3, [r5, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200041ec 	.word	0x200041ec

08005ee4 <_fstat_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4c07      	ldr	r4, [pc, #28]	; (8005f04 <_fstat_r+0x20>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4605      	mov	r5, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	f7fb fc20 	bl	8001736 <_fstat>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d102      	bne.n	8005f00 <_fstat_r+0x1c>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	b103      	cbz	r3, 8005f00 <_fstat_r+0x1c>
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	200041ec 	.word	0x200041ec

08005f08 <_isatty_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4c06      	ldr	r4, [pc, #24]	; (8005f24 <_isatty_r+0x1c>)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4605      	mov	r5, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	f7fb fc1f 	bl	8001756 <_isatty>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_isatty_r+0x1a>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_isatty_r+0x1a>
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	200041ec 	.word	0x200041ec

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
