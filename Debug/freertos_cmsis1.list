
freertos_cmsis1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006b3c  08006b3c  00007b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d24  08006d24  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d24  08006d24  00007d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d2c  08006d2c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006d34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00004280  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042ec  200042ec  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138df  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035c2  00000000  00000000  0001b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0001ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e47  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023921  00000000  00000000  00021027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015744  00000000  00000000  00044948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d63e8  00000000  00000000  0005a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130474  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005444  00000000  00000000  001304b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001358fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b24 	.word	0x08006b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006b24 	.word	0x08006b24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <__NVIC_GetPriorityGrouping+0x18>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	f003 0307 	and.w	r3, r3, #7
}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	db0b      	blt.n	80005a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 021f 	and.w	r2, r3, #31
 8000594:	4907      	ldr	r1, [pc, #28]	@ (80005b4 <__NVIC_EnableIRQ+0x38>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	095b      	lsrs	r3, r3, #5
 800059c:	2001      	movs	r0, #1
 800059e:	fa00 f202 	lsl.w	r2, r0, r2
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db0a      	blt.n	80005e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	490c      	ldr	r1, [pc, #48]	@ (8000604 <__NVIC_SetPriority+0x4c>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	0112      	lsls	r2, r2, #4
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	440b      	add	r3, r1
 80005dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e0:	e00a      	b.n	80005f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4908      	ldr	r1, [pc, #32]	@ (8000608 <__NVIC_SetPriority+0x50>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f003 030f 	and.w	r3, r3, #15
 80005ee:	3b04      	subs	r3, #4
 80005f0:	0112      	lsls	r2, r2, #4
 80005f2:	b2d2      	uxtb	r2, r2
 80005f4:	440b      	add	r3, r1
 80005f6:	761a      	strb	r2, [r3, #24]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	@ 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	f1c3 0307 	rsb	r3, r3, #7
 8000626:	2b04      	cmp	r3, #4
 8000628:	bf28      	it	cs
 800062a:	2304      	movcs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43da      	mvns	r2, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	f04f 31ff 	mov.w	r1, #4294967295
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43d9      	mvns	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
         );
}
 8000666:	4618      	mov	r0, r3
 8000668:	3724      	adds	r7, #36	@ 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <UART_Init>:
//Functions

//UART_Init() sets up the UART for a 8-bit data, No Parity, 1 Stop bit
//at 9600 baud with transmitter interrupts enabled
void UART_Init (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0

	// Enable USART3 clock
	__HAL_RCC_USART3_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b3f      	ldr	r3, [pc, #252]	@ (800077c <UART_Init+0x108>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000682:	4a3e      	ldr	r2, [pc, #248]	@ (800077c <UART_Init+0x108>)
 8000684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000688:	6413      	str	r3, [r2, #64]	@ 0x40
 800068a:	4b3c      	ldr	r3, [pc, #240]	@ (800077c <UART_Init+0x108>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]

	// Enable GPIOB clock
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b38      	ldr	r3, [pc, #224]	@ (800077c <UART_Init+0x108>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a37      	ldr	r2, [pc, #220]	@ (800077c <UART_Init+0x108>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b35      	ldr	r3, [pc, #212]	@ (800077c <UART_Init+0x108>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

	// Configure USART3 TX and RX pins
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80006c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006d4:	2307      	movs	r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4828      	ldr	r0, [pc, #160]	@ (8000780 <UART_Init+0x10c>)
 80006e0:	f001 f87a 	bl	80017d8 <HAL_GPIO_Init>

	// Configure USART3
	USART3->CR1 &= ~USART_CR1_UE; // Disable USART3
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <UART_Init+0x110>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a26      	ldr	r2, [pc, #152]	@ (8000784 <UART_Init+0x110>)
 80006ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80006ee:	60d3      	str	r3, [r2, #12]

	// Communication bidirectionnelle, 8 bits de donnée, 1 bit de stop, pas de parité
	USART3->CR1 &= ~USART_CR1_M; // 8 bits de donnée
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <UART_Init+0x110>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4a23      	ldr	r2, [pc, #140]	@ (8000784 <UART_Init+0x110>)
 80006f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006fa:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~USART_CR1_PCE; // Pas de parité
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <UART_Init+0x110>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a20      	ldr	r2, [pc, #128]	@ (8000784 <UART_Init+0x110>)
 8000702:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000706:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_STOP; // 1 bit de stop
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <UART_Init+0x110>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <UART_Init+0x110>)
 800070e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000712:	6113      	str	r3, [r2, #16]

	USART3->CR1 |= USART_CR1_RXNEIE; // Activate RXNIE for interruptions
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <UART_Init+0x110>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a1a      	ldr	r2, [pc, #104]	@ (8000784 <UART_Init+0x110>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	60d3      	str	r3, [r2, #12]
	USART3->CR2 &= ~USART_CR2_LBDL; // 10 bits for break
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <UART_Init+0x110>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <UART_Init+0x110>)
 8000726:	f023 0320 	bic.w	r3, r3, #32
 800072a:	6113      	str	r3, [r2, #16]
	// Vitesse de communication de 9600bauds et oversampling à 16
	// BRR = fclk / (16 * baudrate)
	// Ici, fclk = 84MHz, baudrate = 9600
	// BRR = 84MHz / (16 * 9600) = 546.875
	// Integer part = 546, Fractional part = 0.875 * 16 = 14
	USART3->BRR = 0x00001117; // 273d (546d = 0x222)
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <UART_Init+0x110>)
 800072e:	f241 1217 	movw	r2, #4375	@ 0x1117
 8000732:	609a      	str	r2, [r3, #8]
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE; // Enable Tx and Rx
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <UART_Init+0x110>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <UART_Init+0x110>)
 800073a:	f043 030c 	orr.w	r3, r3, #12
 800073e:	60d3      	str	r3, [r2, #12]

	USART3->CR1 |= USART_CR1_UE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <UART_Init+0x110>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <UART_Init+0x110>)
 8000746:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800074a:	60d3      	str	r3, [r2, #12]

	HAL_Delay(1); // Attente de 1ms
 800074c:	2001      	movs	r0, #1
 800074e:	f000 ff3d 	bl	80015cc <HAL_Delay>
	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000752:	f7ff ff05 	bl	8000560 <__NVIC_GetPriorityGrouping>
 8000756:	4603      	mov	r3, r0
 8000758:	2200      	movs	r2, #0
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff55 	bl	800060c <NVIC_EncodePriority>
 8000762:	4603      	mov	r3, r0
 8000764:	4619      	mov	r1, r3
 8000766:	2027      	movs	r0, #39	@ 0x27
 8000768:	f7ff ff26 	bl	80005b8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 800076c:	2027      	movs	r0, #39	@ 0x27
 800076e:	f7ff ff05 	bl	800057c <__NVIC_EnableIRQ>

	//
}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400
 8000784:	40004800 	.word	0x40004800

08000788 <sync_break>:
	USART3->CR1 |= USART_CR1_RXNEIE;
}

/*--- Transmit LIN Request ---*/
void sync_break(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	// Send break character
	USART3->CR1 |= USART_CR1_SBK; // Send break
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <sync_break+0x20>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <sync_break+0x20>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	60d3      	str	r3, [r2, #12]
	//while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete
//	serial_puts("SYNCH_BREAK: Sent break");
//	newLine();
    // Send Sync field (0x55)
    USART3->DR = 0x55;
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <sync_break+0x20>)
 800079a:	2255      	movs	r2, #85	@ 0x55
 800079c:	605a      	str	r2, [r3, #4]
//	serial_puts("SYNCH_BREAK: Sent synch");
//	newLine();
    //while (!(USART3->SR & USART_SR_TC)); // Wait for transmission complete

}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40004800 	.word	0x40004800

080007ac <SendHeader>:

void SendHeader(LINMSG *msg)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	sync_break(); // send break and synch
 80007b4:	f7ff ffe8 	bl	8000788 <sync_break>
	UART_PutChar(msg->ID); // send Id
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f819 	bl	80007f4 <UART_PutChar>
//	serial_puts("HEADER: Sent header");
//	newLine();
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <SendRequest>:

void SendRequest(LINMSG *msg)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	USART3->CR1 |= USART_CR1_RXNEIE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <SendRequest+0x24>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <SendRequest+0x24>)
 80007da:	f043 0320 	orr.w	r3, r3, #32
 80007de:	60d3      	str	r3, [r2, #12]
	SendHeader(msg);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ffe3 	bl	80007ac <SendHeader>
	// activate interrupt
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40004800 	.word	0x40004800

080007f4 <UART_PutChar>:


/*--- Transmit char ---*/
 
void UART_PutChar(uint8_t data)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	LINMSG msg;
	msg.ID = 0x67;
 80007fe:	2367      	movs	r3, #103	@ 0x67
 8000800:	733b      	strb	r3, [r7, #12]
	msg.data[0] = data;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	73bb      	strb	r3, [r7, #14]
	msg.length = 8;
 8000806:	2308      	movs	r3, #8
 8000808:	737b      	strb	r3, [r7, #13]

	//Load data to register
	USART3->DR = data;
 800080a:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <UART_PutChar+0x48>)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	6053      	str	r3, [r2, #4]
	while(!(USART3->SR & 0x00000080));
 8000810:	bf00      	nop
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <UART_PutChar+0x48>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f9      	beq.n	8000812 <UART_PutChar+0x1e>
	while(!(USART3->SR & 0x00000040));
 800081e:	bf00      	nop
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <UART_PutChar+0x48>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <UART_PutChar+0x2c>

}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40004800 	.word	0x40004800

08000840 <CAN_config_filter>:
//    CAN1->FMR &= 0x0;
//
//}
//
void CAN_config_filter(uint8_t IDE, uint32_t Filter_ID_high, uint32_t Filter_ID_low,
  uint32_t Filter_Mask_high, uint32_t Filter_Mask_low) {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4603      	mov	r3, r0
 800084e:	73fb      	strb	r3, [r7, #15]
  // We will use filter 0 for 0x100 to 0x10F (Mask mode)
  // Filter 1 for 0x200 and 0x205 (ID List mode)
  // ////////////////////////////////////////////////////////

  // Deactivate Filter 0 and 1
  CAN1 -> FA1R &= 0xFFFFFFFC;
 8000850:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <CAN_config_filter+0x100>)
 8000852:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000856:	4a3a      	ldr	r2, [pc, #232]	@ (8000940 <CAN_config_filter+0x100>)
 8000858:	f023 0303 	bic.w	r3, r3, #3
 800085c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // initialize mode for all filters
  CAN1 -> FMR |= 0x1;
 8000860:	4b37      	ldr	r3, [pc, #220]	@ (8000940 <CAN_config_filter+0x100>)
 8000862:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000866:	4a36      	ldr	r2, [pc, #216]	@ (8000940 <CAN_config_filter+0x100>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  if (IDE == 0) {
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d12c      	bne.n	80008d0 <CAN_config_filter+0x90>
    // ///////////////////////////
    // Filters with 32 bits mode//
    // ///////////////////////////

    CAN1 -> FS1R |= 0x00000003; // 32 bits filter for filter 0 ,1
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <CAN_config_filter+0x100>)
 8000878:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800087c:	4a30      	ldr	r2, [pc, #192]	@ (8000940 <CAN_config_filter+0x100>)
 800087e:	f043 0303 	orr.w	r3, r3, #3
 8000882:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 8000886:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <CAN_config_filter+0x100>)
 8000888:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800088c:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <CAN_config_filter+0x100>)
 800088e:	f023 0303 	bic.w	r3, r3, #3
 8000892:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 8000896:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <CAN_config_filter+0x100>)
 8000898:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800089c:	4a28      	ldr	r2, [pc, #160]	@ (8000940 <CAN_config_filter+0x100>)
 800089e:	f023 0303 	bic.w	r3, r3, #3
 80008a2:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    /*
     **/
    CAN1 -> sFilterRegister[0].FR1 = (Filter_ID_high << 21); //ID
 80008a6:	4a26      	ldr	r2, [pc, #152]	@ (8000940 <CAN_config_filter+0x100>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	055b      	lsls	r3, r3, #21
 80008ac:	f8c2 3240 	str.w	r3, [r2, #576]	@ 0x240
    CAN1 -> sFilterRegister[0].FR2 = (Filter_Mask_high << 21); // Mask
 80008b0:	4a23      	ldr	r2, [pc, #140]	@ (8000940 <CAN_config_filter+0x100>)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	055b      	lsls	r3, r3, #21
 80008b6:	f8c2 3244 	str.w	r3, [r2, #580]	@ 0x244

    CAN1 -> sFilterRegister[1].FR1 = (Filter_ID_low << 21); //ID
 80008ba:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <CAN_config_filter+0x100>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	055b      	lsls	r3, r3, #21
 80008c0:	f8c2 3248 	str.w	r3, [r2, #584]	@ 0x248
    CAN1 -> sFilterRegister[1].FR2 = (Filter_Mask_low << 21); // ID
 80008c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <CAN_config_filter+0x100>)
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	055b      	lsls	r3, r3, #21
 80008ca:	f8c2 324c 	str.w	r3, [r2, #588]	@ 0x24c
 80008ce:	e020      	b.n	8000912 <CAN_config_filter+0xd2>
    //CAN1->sFilterRegister[1].FR2 |= 0x2; //ID with RTR = 1

  } else {
    // Filters with dual 16 bits config
    CAN1 -> FS1R &= 0xFFFFFFC; // Dual 16 bits filter for filter 0 ,1
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <CAN_config_filter+0x100>)
 80008d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80008d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000940 <CAN_config_filter+0x100>)
 80008d8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80008dc:	f023 0303 	bic.w	r3, r3, #3
 80008e0:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    //CAN1->FM1R |= 0x00000002; // Filter 1 in List mode
    CAN1 -> FM1R &= 0xFFFFFFFC; // filter 1 and 0 in mask mode // Filter 0 in mask mode
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <CAN_config_filter+0x100>)
 80008e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <CAN_config_filter+0x100>)
 80008ec:	f023 0303 	bic.w	r3, r3, #3
 80008f0:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1 -> FFA1R &= 0xFFFFFFFC; // Assign filter 0,1 to FIFO0
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <CAN_config_filter+0x100>)
 80008f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80008fa:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <CAN_config_filter+0x100>)
 80008fc:	f023 0303 	bic.w	r3, r3, #3
 8000900:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Configure the filter bank
    //CAN1->sFilterRegister[0].FR1 =  (Filter_ID_low << 5) ; //((Filter_Mask_low <<5) <<16) || (Filter_ID_low << 5); //ID
    CAN1 -> sFilterRegister[0].FR1 = (Filter_Mask_low << 16) | (Filter_ID_low); //((Filter_Mask_low <<5) <<16); // Mask
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	041a      	lsls	r2, r3, #16
 8000908:	490d      	ldr	r1, [pc, #52]	@ (8000940 <CAN_config_filter+0x100>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4313      	orrs	r3, r2
 800090e:	f8c1 3240 	str.w	r3, [r1, #576]	@ 0x240

  }

  // Activate Filter 0 and 1
  CAN1 -> FA1R |= 0x00000003;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <CAN_config_filter+0x100>)
 8000914:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000918:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <CAN_config_filter+0x100>)
 800091a:	f043 0303 	orr.w	r3, r3, #3
 800091e:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
  // Leave Filter init
  CAN1 -> FMR &= 0xFFFFFFFE;
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <CAN_config_filter+0x100>)
 8000924:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000928:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <CAN_config_filter+0x100>)
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40006400 	.word	0x40006400

08000944 <CAN_config>:

void CAN_config(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
    0
  };

  //EnableCANCLock
  __HAL_RCC_CAN1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <CAN_config+0xf8>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a36      	ldr	r2, [pc, #216]	@ (8000a3c <CAN_config+0xf8>)
 8000964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <CAN_config+0xf8>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]

  //ConfigureGPIOs
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b30      	ldr	r3, [pc, #192]	@ (8000a3c <CAN_config+0xf8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <CAN_config+0xf8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <CAN_config+0xf8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  /*CAN1GPIOConfiguration
  PB8------>CAN1_RX
  PB9------>CAN1_TX*/

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000992:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009a4:	2309      	movs	r3, #9
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4824      	ldr	r0, [pc, #144]	@ (8000a40 <CAN_config+0xfc>)
 80009b0:	f000 ff12 	bl	80017d8 <HAL_GPIO_Init>

  //ClearSleepbittowakeup
  CAN1 -> MCR &= 0xFFFFFFFD;
 80009b4:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <CAN_config+0x100>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <CAN_config+0x100>)
 80009ba:	f023 0302 	bic.w	r3, r3, #2
 80009be:	6013      	str	r3, [r2, #0]
  //WaitforCANtowakeup
  while (CAN1 -> MSR & 0x00000002);
 80009c0:	bf00      	nop
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <CAN_config+0x100>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1f9      	bne.n	80009c2 <CAN_config+0x7e>
  //Switchtoconfigmode
  CAN1 -> MCR |= 0x00000001;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <CAN_config+0x100>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <CAN_config+0x100>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6013      	str	r3, [r2, #0]
  //Waitforconfigmod
  while (!(CAN1 -> MSR & 0x1));
 80009da:	bf00      	nop
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <CAN_config+0x100>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f9      	beq.n	80009dc <CAN_config+0x98>

  //Setconfig
  CAN1 -> MCR &= 0x00000001;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <CAN_config+0x100>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <CAN_config+0x100>)
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

  CAN1 -> BTR = 0x00250010; //Par ordre : loop back activé
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <CAN_config+0x100>)
 80009f6:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <CAN_config+0x104>)
 80009f8:	61da      	str	r2, [r3, #28]

  //INTERRUPTION//
  //Set Interrupt RXFIFO0 (FMPIE0) and TX box empty

  CAN1 -> IER |= 0x2;
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <CAN_config+0x100>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <CAN_config+0x100>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6153      	str	r3, [r2, #20]
  ///Activate Interrupton NVIC
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2106      	movs	r1, #6
 8000a0a:	2014      	movs	r0, #20
 8000a0c:	f000 feba 	bl	8001784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a10:	2014      	movs	r0, #20
 8000a12:	f000 fed3 	bl	80017bc <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_SetPriority(CAN1_TX_IRQn,0,2);
  //HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
  ////////////////
  // Go to normal mode
  CAN1 -> MCR &= 0xFFFFFFFE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <CAN_config+0x100>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <CAN_config+0x100>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6013      	str	r3, [r2, #0]
  //Wait f o r normal mod
  while (CAN1 -> MSR & 0x1);
 8000a22:	bf00      	nop
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <CAN_config+0x100>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f9      	bne.n	8000a24 <CAN_config+0xe0>

  //      initializeBuffer(&farriere_portA);
  //      initializeBuffer(&farriere_portB);
  //      initializeBuffer(&farriere_portC);
  //      initializeBuffer(&etat_commodo);
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40006400 	.word	0x40006400
 8000a48:	00250010 	.word	0x00250010

08000a4c <CAN_readFrame>:
    CAN1 -> sTxMailBox[0].TDHR = CAN_mess.data[7] << 24 | CAN_mess.data[6] << 16 | CAN_mess.data[5] << 8 | CAN_mess.data[4];
    CAN1 -> sTxMailBox[0].TIR |= 1; //Sendthemessage
  } else return (0);
}

uint8_t CAN_readFrame() {
 8000a4c:	b490      	push	{r4, r7}
 8000a4e:	af00      	add	r7, sp, #0
  CAN_RxMessage.STDID = CAN1 -> sFIFOMailBox[0].RIR >> 3;
 8000a50:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a52:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4a3e      	ldr	r2, [pc, #248]	@ (8000b54 <CAN_readFrame+0x108>)
 8000a5a:	6013      	str	r3, [r2, #0]
  CAN_RxMessage.RTR = (CAN1 -> sFIFOMailBox[0].RIR >> 1) & 0x1;
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a5e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <CAN_readFrame+0x108>)
 8000a6e:	711a      	strb	r2, [r3, #4]
  CAN_RxMessage.DLC = CAN1 -> sFIFOMailBox[0].RDTR & 0xF;
 8000a70:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a72:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <CAN_readFrame+0x108>)
 8000a80:	715a      	strb	r2, [r3, #5]
  CAN_RxMessage.data[0] = CAN1 -> sFIFOMailBox[0].RDLR & 0xFF;
 8000a82:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a84:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <CAN_readFrame+0x108>)
 8000a8c:	719a      	strb	r2, [r3, #6]
  CAN_RxMessage.data[1] = (CAN1 -> sFIFOMailBox[0].RDLR >> 8) & 0xFF;
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a90:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <CAN_readFrame+0x108>)
 8000a9a:	71da      	strb	r2, [r3, #7]
  CAN_RxMessage.data[2] = (CAN1 -> sFIFOMailBox[0].RDLR >> 16) & 0xFF;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <CAN_readFrame+0x104>)
 8000a9e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <CAN_readFrame+0x108>)
 8000aa8:	721a      	strb	r2, [r3, #8]
  CAN_RxMessage.data[3] = (CAN1 -> sFIFOMailBox[0].RDLR >> 24) & 0xFF;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <CAN_readFrame+0x104>)
 8000aac:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000ab0:	0e1b      	lsrs	r3, r3, #24
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <CAN_readFrame+0x108>)
 8000ab6:	725a      	strb	r2, [r3, #9]
  CAN_RxMessage.data[4] = CAN1 -> sFIFOMailBox[0].RDHR & 0xFF;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	@ (8000b50 <CAN_readFrame+0x104>)
 8000aba:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <CAN_readFrame+0x108>)
 8000ac2:	729a      	strb	r2, [r3, #10]
  CAN_RxMessage.data[5] = (CAN1 -> sFIFOMailBox[0].RDHR >> 8) & 0xFF;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <CAN_readFrame+0x104>)
 8000ac6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <CAN_readFrame+0x108>)
 8000ad0:	72da      	strb	r2, [r3, #11]
  CAN_RxMessage.data[6] = (CAN1 -> sFIFOMailBox[0].RDHR >> 16) & 0xFF;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <CAN_readFrame+0x104>)
 8000ad4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000ad8:	0c1b      	lsrs	r3, r3, #16
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <CAN_readFrame+0x108>)
 8000ade:	731a      	strb	r2, [r3, #12]
  CAN_RxMessage.data[7] = (CAN1 -> sFIFOMailBox[0].RDHR >> 24) & 0xFF;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <CAN_readFrame+0x104>)
 8000ae2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000ae6:	0e1b      	lsrs	r3, r3, #24
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <CAN_readFrame+0x108>)
 8000aec:	735a      	strb	r2, [r3, #13]

  CAN_RxMessages[total_received] = CAN_RxMessage;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <CAN_readFrame+0x10c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b5c <CAN_readFrame+0x110>)
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4413      	add	r3, r2
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <CAN_readFrame+0x108>)
 8000afa:	461c      	mov	r4, r3
 8000afc:	4613      	mov	r3, r2
 8000afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  total_received = (total_received + 1) % BUFFER_LIMIT;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <CAN_readFrame+0x10c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	1c59      	adds	r1, r3, #1
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <CAN_readFrame+0x114>)
 8000b0c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b10:	109a      	asrs	r2, r3, #2
 8000b12:	17cb      	asrs	r3, r1, #31
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1aca      	subs	r2, r1, r3
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <CAN_readFrame+0x10c>)
 8000b22:	601a      	str	r2, [r3, #0]
  can_read_data = 1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <CAN_readFrame+0x118>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
  if (total_received >= (BUFFER_LIMIT - 3)) { //== read_index
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <CAN_readFrame+0x10c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	dd02      	ble.n	8000b38 <CAN_readFrame+0xec>
    emergency_data_read = 1;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <CAN_readFrame+0x11c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }

  CAN1 -> RF0R |= 0x20;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <CAN_readFrame+0x104>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <CAN_readFrame+0x104>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	60d3      	str	r3, [r2, #12]

}
 8000b44:	bf00      	nop
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc90      	pop	{r4, r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40006400 	.word	0x40006400
 8000b54:	20000348 	.word	0x20000348
 8000b58:	20000088 	.word	0x20000088
 8000b5c:	20000358 	.word	0x20000358
 8000b60:	66666667 	.word	0x66666667
 8000b64:	200003f9 	.word	0x200003f9
 8000b68:	200003f8 	.word	0x200003f8

08000b6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <vApplicationGetIdleTaskMemory+0x30>)
 8000b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	200000e0 	.word	0x200000e0

08000ba0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	HAL_USART_Transmit(&husart2, (uint8_t *)ptr, len, 10);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <_write+0x24>)
 8000bb6:	f001 ff7c 	bl	8002ab2 <HAL_USART_Transmit>
	return len;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002e0 	.word	0x200002e0

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b0a4      	sub	sp, #144	@ 0x90
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fcbb 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f895 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f929 	bl	8000e2c <MX_GPIO_Init>
  MX_USART2_Init();
 8000bda:	f000 f8fb 	bl	8000dd4 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  UART_Init();
 8000bde:	f7ff fd49 	bl	8000674 <UART_Init>
  CAN_config();
 8000be2:	f7ff feaf 	bl	8000944 <CAN_config>
  CAN_config_filter(0, 0, 0x0, 0x10520312, 0x10035110);
 8000be6:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <main+0x104>)
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <main+0x108>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fe25 	bl	8000840 <CAN_config_filter>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000c02:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fbf0 	bl	80033ec <osMutexCreate>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <main+0x10c>)
 8000c10:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of linCanQueue */
  osMessageQDef(linCanQueue, 16, uint16_t);
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <main+0x110>)
 8000c14:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  linCanQueueHandle = osMessageCreate(osMessageQ(linCanQueue), NULL);
 8000c1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fbf9 	bl	800341c <osMessageCreate>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <main+0x114>)
 8000c2e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of linSenderTask */
  osThreadDef(linSenderTask, StartLinSenderTask, osPriorityHigh, 0, 128);
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <main+0x118>)
 8000c32:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000c36:	461d      	mov	r5, r3
 8000c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  linSenderTaskHandle = osThreadCreate(osThread(linSenderTask), NULL);
 8000c44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fae1 	bl	8003212 <osThreadCreate>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <main+0x11c>)
 8000c54:	6013      	str	r3, [r2, #0]

  /* definition and creation of canReceiverTask */
  osThreadDef(canReceiverTask, StartCanReceiverTask, osPriorityNormal, 0, 128);
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <main+0x120>)
 8000c58:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000c5c:	461d      	mov	r5, r3
 8000c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8000c6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 face 	bl	8003212 <osThreadCreate>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <main+0x124>)
 8000c7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <main+0x128>)
 8000c7e:	f107 041c 	add.w	r4, r7, #28
 8000c82:	461d      	mov	r5, r3
 8000c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fabb 	bl	8003212 <osThreadCreate>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a15      	ldr	r2, [pc, #84]	@ (8000cf4 <main+0x12c>)
 8000ca0:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTrackerTask */
  osThreadDef(canTrackerTask, StartCanTrackerTask, osPriorityIdle, 0, 128);
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <main+0x130>)
 8000ca4:	463c      	mov	r4, r7
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTrackerTaskHandle = osThreadCreate(osThread(canTrackerTask), NULL);
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 faaa 	bl	8003212 <osThreadCreate>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <main+0x134>)
 8000cc2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cc4:	f002 fa9e 	bl	8003204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <main+0x100>
 8000ccc:	10035110 	.word	0x10035110
 8000cd0:	10520312 	.word	0x10520312
 8000cd4:	20000338 	.word	0x20000338
 8000cd8:	08006b3c 	.word	0x08006b3c
 8000cdc:	20000334 	.word	0x20000334
 8000ce0:	08006b5c 	.word	0x08006b5c
 8000ce4:	20000324 	.word	0x20000324
 8000ce8:	08006b88 	.word	0x08006b88
 8000cec:	20000328 	.word	0x20000328
 8000cf0:	08006bb0 	.word	0x08006bb0
 8000cf4:	2000032c 	.word	0x2000032c
 8000cf8:	08006bdc 	.word	0x08006bdc
 8000cfc:	20000330 	.word	0x20000330

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	@ 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	@ 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f005 f8e1 	bl	8005ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <SystemClock_Config+0xcc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <SystemClock_Config+0xd0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <SystemClock_Config+0xd0>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <SystemClock_Config+0xd0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d60:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d70:	2308      	movs	r3, #8
 8000d72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d74:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fee6 	bl	8001b58 <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d92:	f000 f9d1 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2105      	movs	r1, #5
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 f947 	bl	8002048 <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc0:	f000 f9ba 	bl	8001138 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	@ 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <MX_USART2_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 19200;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000de0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000de4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <MX_USART2_Init+0x50>)
 8000e12:	f001 fe0d 	bl	8002a30 <HAL_USART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 f98c 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200002e0 	.word	0x200002e0
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a11      	ldr	r2, [pc, #68]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_GPIO_Init+0x80>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <MX_GPIO_Init+0x84>)
 8000e90:	f000 fca2 	bl	80017d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2006      	movs	r0, #6
 8000e9a:	f000 fc73 	bl	8001784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f000 fc8c 	bl	80017bc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <StartLinSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLinSenderTask */
void StartLinSenderTask(void const * argument)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
	int8_t lin_received_cnt = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
	uint8_t can_send_lin = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	77bb      	strb	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fa41 	bl	8003354 <osSignalWait>
	  lin_received_cnt++;
 8000ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	77fb      	strb	r3, [r7, #31]
	  can_send_lin = 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	77bb      	strb	r3, [r7, #30]
	  int data = (unsigned int) CAN_RxMessage.data[0];
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <StartLinSenderTask+0x110>)
 8000ee4:	799b      	ldrb	r3, [r3, #6]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	61bb      	str	r3, [r7, #24]

	  Tx_Msg.ID = LIN_SLAVE_WRITE_RTC_PID;
 8000eea:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000eec:	2245      	movs	r2, #69	@ 0x45
 8000eee:	701a      	strb	r2, [r3, #0]
	  Tx_Msg.length = LIN_SLAVE_WRITE_RTC_LENGTH;
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	705a      	strb	r2, [r3, #1]

	  switch (CAN_RxMessage.STDID) {
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <StartLinSenderTask+0x110>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a34      	ldr	r2, [pc, #208]	@ (8000fcc <StartLinSenderTask+0x118>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d027      	beq.n	8000f50 <StartLinSenderTask+0x9c>
 8000f00:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <StartLinSenderTask+0x11c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d149      	bne.n	8000f9a <StartLinSenderTask+0xe6>
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b38      	cmp	r3, #56	@ 0x38
 8000f0a:	d016      	beq.n	8000f3a <StartLinSenderTask+0x86>
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2b38      	cmp	r3, #56	@ 0x38
 8000f10:	dc1a      	bgt.n	8000f48 <StartLinSenderTask+0x94>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f16:	d009      	beq.n	8000f2c <StartLinSenderTask+0x78>
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b34      	cmp	r3, #52	@ 0x34
 8000f1c:	d114      	bne.n	8000f48 <StartLinSenderTask+0x94>

		case COMMODO_CLIGNOTANT_RETURN_BASE:
				switch (data) {
					case COMMODO_CLIGNOTANT_REPOS_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_STOP;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO STOP \n\r");
 8000f24:	482b      	ldr	r0, [pc, #172]	@ (8000fd4 <StartLinSenderTask+0x120>)
 8000f26:	f004 ff81 	bl	8005e2c <iprintf>
						break;
 8000f2a:	e010      	b.n	8000f4e <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_DROIT_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_DROIT;
 8000f2c:	4b26      	ldr	r3, [pc, #152]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO DROIT \n\r");
 8000f32:	4829      	ldr	r0, [pc, #164]	@ (8000fd8 <StartLinSenderTask+0x124>)
 8000f34:	f004 ff7a 	bl	8005e2c <iprintf>
						break;
 8000f38:	e009      	b.n	8000f4e <StartLinSenderTask+0x9a>

					case COMMODO_CLIGNOTANT_GAUCHE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_CLIGNO_GAUCHE;
 8000f3a:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
						printf("CLIGNO GAUCHE \n\r");
 8000f40:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <StartLinSenderTask+0x128>)
 8000f42:	f004 ff73 	bl	8005e2c <iprintf>
						break;
 8000f46:	e002      	b.n	8000f4e <StartLinSenderTask+0x9a>
					default:
						can_send_lin = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	77bb      	strb	r3, [r7, #30]
						break;
 8000f4c:	bf00      	nop
				}
			break;
 8000f4e:	e027      	b.n	8000fa0 <StartLinSenderTask+0xec>
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2bb3      	cmp	r3, #179	@ 0xb3
 8000f54:	d016      	beq.n	8000f84 <StartLinSenderTask+0xd0>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2bb3      	cmp	r3, #179	@ 0xb3
 8000f5a:	dc1a      	bgt.n	8000f92 <StartLinSenderTask+0xde>
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	d009      	beq.n	8000f76 <StartLinSenderTask+0xc2>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f66:	d114      	bne.n	8000f92 <StartLinSenderTask+0xde>

		case COMMODO_PHARE_RETURN_BASE:
				switch (data) {
					case COMMODO_PHARE_ALLUMER_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_AVANT;
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	701a      	strb	r2, [r3, #0]
						printf("PHARES AVANT \n\r");
 8000f6e:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <StartLinSenderTask+0x12c>)
 8000f70:	f004 ff5c 	bl	8005e2c <iprintf>
						break;
 8000f74:	e010      	b.n	8000f98 <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_VEILLEUSE_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_ARRIERE;
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f78:	2205      	movs	r2, #5
 8000f7a:	701a      	strb	r2, [r3, #0]
						printf("PHARES ARRIERES \n\r");
 8000f7c:	4819      	ldr	r0, [pc, #100]	@ (8000fe4 <StartLinSenderTask+0x130>)
 8000f7e:	f004 ff55 	bl	8005e2c <iprintf>
						break;
 8000f82:	e009      	b.n	8000f98 <StartLinSenderTask+0xe4>

					case COMMODO_PHARE_AUTO_RETOURN_VALUE:
						Tx_Msg.ID = LIN_PHARE_STOP;
 8000f84:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000f86:	2206      	movs	r2, #6
 8000f88:	701a      	strb	r2, [r3, #0]
						printf("PHARES STOP \n\r");
 8000f8a:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <StartLinSenderTask+0x134>)
 8000f8c:	f004 ff4e 	bl	8005e2c <iprintf>
						break;
 8000f90:	e002      	b.n	8000f98 <StartLinSenderTask+0xe4>
					default:
						can_send_lin = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	77bb      	strb	r3, [r7, #30]
						break;
 8000f96:	bf00      	nop
				}
			break;
 8000f98:	e002      	b.n	8000fa0 <StartLinSenderTask+0xec>
		default:
			can_send_lin = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	77bb      	strb	r3, [r7, #30]
			break;
 8000f9e:	bf00      	nop
	}

//	  Rx_Msg.ID = LIN_SLAVE_READ_RTC_PID;
//	  Rx_Msg.length = LIN_SLAVE_READ_RTC_LENGTH;
	  if(can_send_lin){
 8000fa0:	7fbb      	ldrb	r3, [r7, #30]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <StartLinSenderTask+0x100>

		  SendRequest(&Tx_Msg);
 8000fa6:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <StartLinSenderTask+0x114>)
 8000fa8:	f7ff fc10 	bl	80007cc <SendRequest>
		  HAL_Delay(500);
 8000fac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb0:	f000 fb0c 	bl	80015cc <HAL_Delay>
	  }

	  printf("\n\r=================================\n\r");
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <StartLinSenderTask+0x138>)
 8000fb6:	f004 ff39 	bl	8005e2c <iprintf>

	  osDelay(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fbe:	f002 f974 	bl	80032aa <osDelay>
  {
 8000fc2:	e77f      	b.n	8000ec4 <StartLinSenderTask+0x10>
 8000fc4:	20000348 	.word	0x20000348
 8000fc8:	2000033c 	.word	0x2000033c
 8000fcc:	10005101 	.word	0x10005101
 8000fd0:	10005110 	.word	0x10005110
 8000fd4:	08006bf8 	.word	0x08006bf8
 8000fd8:	08006c08 	.word	0x08006c08
 8000fdc:	08006c18 	.word	0x08006c18
 8000fe0:	08006c2c 	.word	0x08006c2c
 8000fe4:	08006c3c 	.word	0x08006c3c
 8000fe8:	08006c50 	.word	0x08006c50
 8000fec:	08006c60 	.word	0x08006c60

08000ff0 <StartCanReceiverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanReceiverTask */
void StartCanReceiverTask(void const * argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanReceiverTask */
	int8_t can_received_cnt = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	osEvent canReadedTracker;
	int8_t executed_once = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	CAN_frame auto_frame;
	  auto_frame.STDID = 0x10530310;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <StartCanReceiverTask+0x5c>)
 8001006:	60bb      	str	r3, [r7, #8]
	  auto_frame.DLC = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	737b      	strb	r3, [r7, #13]
	  auto_frame.RTR = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	733b      	strb	r3, [r7, #12]
//	  	  auto_frame.data[0] = (8 & ~(1));
//	  	  CAN_sendFrame(auto_frame);
//	  	  HAL_Delay(2000);

	  	  // REAL CODE
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <StartCanReceiverTask+0x60>)
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fa65 	bl	80034ec <osMessageGet>
	  if(canReadedTracker.value.v == 0x1){
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1f3      	bne.n	8001010 <StartCanReceiverTask+0x20>
//		  printf("Can Readed - Let's send LIN request \n \r");
		can_received_cnt++;
 8001028:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3301      	adds	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
//		printf("CAN Received n°%d :: (ID = %d, Value= %d) \n\r", can_received_cnt, CAN_RxMessage.STDID, CAN_RxMessage.data[0]);
		osSignalSet(linSenderTaskHandle, 1);
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <StartCanReceiverTask+0x64>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f949 	bl	80032d4 <osSignalSet>
		osDelay(1000);
 8001042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001046:	f002 f930 	bl	80032aa <osDelay>
	  canReadedTracker = osMessageGet(linCanQueueHandle, 1000);
 800104a:	e7e1      	b.n	8001010 <StartCanReceiverTask+0x20>
 800104c:	10530310 	.word	0x10530310
 8001050:	20000334 	.word	0x20000334
 8001054:	20000324 	.word	0x20000324

08001058 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask04 */
	int cnt = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    osSignalWait(1, osWaitForever);
 8001064:	463b      	mov	r3, r7
 8001066:	f04f 32ff 	mov.w	r2, #4294967295
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f002 f971 	bl	8003354 <osSignalWait>
    cnt++;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
    printf("Donnée Can recue %d \n \r", cnt);
 8001078:	69f9      	ldr	r1, [r7, #28]
 800107a:	4806      	ldr	r0, [pc, #24]	@ (8001094 <StartTask04+0x3c>)
 800107c:	f004 fed6 	bl	8005e2c <iprintf>
    HAL_Delay(500);
 8001080:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001084:	f000 faa2 	bl	80015cc <HAL_Delay>

	osDelay(1000);
 8001088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108c:	f002 f90d 	bl	80032aa <osDelay>
    osSignalWait(1, osWaitForever);
 8001090:	bf00      	nop
 8001092:	e7e7      	b.n	8001064 <StartTask04+0xc>
 8001094:	08006c88 	.word	0x08006c88

08001098 <StartCanTrackerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTrackerTask */
void StartCanTrackerTask(void const * argument)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartCanTrackerTask */
	  int8_t cnt = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	printf("Waiting for CAN \n \r");
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <StartCanTrackerTask+0x6c>)
 80010a6:	f004 fec1 	bl	8005e2c <iprintf>
	osSignalWait(1, osWaitForever);
 80010aa:	463b      	mov	r3, r7
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f94e 	bl	8003354 <osSignalWait>
	cnt++;
 80010b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3301      	adds	r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	77fb      	strb	r3, [r7, #31]
	CAN_readFrame();
 80010c4:	f7ff fcc2 	bl	8000a4c <CAN_readFrame>
	printf("Readed CAN n° %d \n \r", cnt);
 80010c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80010cc:	4619      	mov	r1, r3
 80010ce:	480e      	ldr	r0, [pc, #56]	@ (8001108 <StartCanTrackerTask+0x70>)
 80010d0:	f004 feac 	bl	8005e2c <iprintf>
	HAL_Delay(100);
 80010d4:	2064      	movs	r0, #100	@ 0x64
 80010d6:	f000 fa79 	bl	80015cc <HAL_Delay>
//	HAL_Delay(100);

//	printf("CAN Readed \n \r");
//	HAL_Delay(100);
	//	HAL_Delay(100);
	if(CAN_RxMessage.STDID == COMMODO_PHARE_RETURN_ID){
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <StartCanTrackerTask+0x74>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <StartCanTrackerTask+0x78>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d109      	bne.n	80010f8 <StartCanTrackerTask+0x60>
		if(CAN_RxMessage.data[0] == COMMODO_PHARE_RETURN_VALUE){
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <StartCanTrackerTask+0x74>)
 80010e6:	799b      	ldrb	r3, [r3, #6]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b34      	cmp	r3, #52	@ 0x34
 80010ec:	d102      	bne.n	80010f4 <StartCanTrackerTask+0x5c>
			uint8_t toto = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	777b      	strb	r3, [r7, #29]
 80010f2:	e001      	b.n	80010f8 <StartCanTrackerTask+0x60>
		}else{
			uint8_t toto = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	77bb      	strb	r3, [r7, #30]
		}
	}

	osDelay(1000);
 80010f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fc:	f002 f8d5 	bl	80032aa <osDelay>
	printf("Waiting for CAN \n \r");
 8001100:	e7d0      	b.n	80010a4 <StartCanTrackerTask+0xc>
 8001102:	bf00      	nop
 8001104:	08006ca4 	.word	0x08006ca4
 8001108:	08006cb8 	.word	0x08006cb8
 800110c:	20000348 	.word	0x20000348
 8001110:	801a8884 	.word	0x801a8884

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001126:	f000 fa31 	bl	800158c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40001000 	.word	0x40001000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_MspInit+0x54>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <HAL_MspInit+0x54>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_MspInit+0x54>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_MspInit+0x54>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_MspInit+0x54>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_MspInit+0x54>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	210f      	movs	r1, #15
 8001186:	f06f 0001 	mvn.w	r0, #1
 800118a:	f000 fafb 	bl	8001784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <HAL_USART_MspInit+0x84>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12b      	bne.n	8001216 <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_USART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80011f6:	231c      	movs	r3, #28
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_USART_MspInit+0x8c>)
 8001212:	f000 fae1 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <HAL_InitTick+0xe4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a32      	ldr	r2, [pc, #200]	@ (8001310 <HAL_InitTick+0xe4>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <HAL_InitTick+0xe4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001258:	f107 0210 	add.w	r2, r7, #16
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f910 	bl	8002488 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001272:	f001 f8e1 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8001276:	6378      	str	r0, [r7, #52]	@ 0x34
 8001278:	e004      	b.n	8001284 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800127a:	f001 f8dd 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 800127e:	4603      	mov	r3, r0
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_InitTick+0xe8>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9b      	lsrs	r3, r3, #18
 800128e:	3b01      	subs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_InitTick+0xec>)
 8001294:	4a21      	ldr	r2, [pc, #132]	@ (800131c <HAL_InitTick+0xf0>)
 8001296:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_InitTick+0xec>)
 800129a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <HAL_InitTick+0xec>)
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_InitTick+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_InitTick+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_InitTick+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012b8:	4817      	ldr	r0, [pc, #92]	@ (8001318 <HAL_InitTick+0xec>)
 80012ba:	f001 f917 	bl	80024ec <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11b      	bne.n	8001304 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012cc:	4812      	ldr	r0, [pc, #72]	@ (8001318 <HAL_InitTick+0xec>)
 80012ce:	f001 f967 	bl	80025a0 <HAL_TIM_Base_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d111      	bne.n	8001304 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012e0:	2036      	movs	r0, #54	@ 0x36
 80012e2:	f000 fa6b 	bl	80017bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d808      	bhi.n	80012fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2036      	movs	r0, #54	@ 0x36
 80012f2:	f000 fa47 	bl	8001784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_InitTick+0xf4>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e002      	b.n	8001304 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001308:	4618      	mov	r0, r3
 800130a:	3738      	adds	r7, #56	@ 0x38
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	431bde83 	.word	0x431bde83
 8001318:	200003fc 	.word	0x200003fc
 800131c:	40001000 	.word	0x40001000
 8001320:	20000004 	.word	0x20000004

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001360:	2001      	movs	r0, #1
 8001362:	f000 fbd5 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  osSignalSet(myTask04Handle, 1);
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <EXTI0_IRQHandler+0x28>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f001 ffb1 	bl	80032d4 <osSignalSet>
  osMessagePut(linCanQueueHandle, 1, 100);
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <EXTI0_IRQHandler+0x2c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2264      	movs	r2, #100	@ 0x64
 8001378:	2101      	movs	r1, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f876 	bl	800346c <osMessagePut>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000032c 	.word	0x2000032c
 8001388:	20000334 	.word	0x20000334

0800138c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <TIM6_DAC_IRQHandler+0x10>)
 8001392:	f001 f975 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200003fc 	.word	0x200003fc

080013a0 <CAN1_RX0_IRQHandler>:

/* USER CODE BEGIN 1 */
void CAN1_RX0_IRQHandler( void )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
//	osSignalSet(canTrackerTaskHandle, 1);

	CAN_readFrame();
 80013a4:	f7ff fb52 	bl	8000a4c <CAN_readFrame>
	osMessagePut(linCanQueueHandle, 1, 100);
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <CAN1_RX0_IRQHandler+0x1c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2264      	movs	r2, #100	@ 0x64
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 f85b 	bl	800346c <osMessagePut>
//	serial_puts("Teacher::  received CAN | Added To Queue \n \r");
//  osSignalSet(myTask04Handle, 1);

//	osSignalSet(canReceiverTaskHandle, 1); // phare_state
//	printf("Released CanReceiver \n\r\r");
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000334 	.word	0x20000334

080013c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
  }

  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001422:	605a      	str	r2, [r3, #4]
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f004 fd6e 	bl	8005f74 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20020000 	.word	0x20020000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	20000444 	.word	0x20000444
 80014cc:	200042f0 	.word	0x200042f0

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800152c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f8:	f7ff ffea 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	@ (8001534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	@ (8001540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f004 fd2d 	bl	8005f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fb4f 	bl	8000bc8 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001538:	08006d34 	.word	0x08006d34
  ldr r2, =_sbss
 800153c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001540:	200042ec 	.word	0x200042ec

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f8fc 	bl	800176e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f7ff fe58 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fde2 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000448 	.word	0x20000448

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000448 	.word	0x20000448

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008

08001614 <__NVIC_SetPriorityGrouping>:
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff4c 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001796:	f7ff ff61 	bl	800165c <__NVIC_GetPriorityGrouping>
 800179a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	6978      	ldr	r0, [r7, #20]
 80017a2:	f7ff ffb1 	bl	8001708 <NVIC_EncodePriority>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff80 	bl	80016b4 <__NVIC_SetPriority>
}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff54 	bl	8001678 <__NVIC_EnableIRQ>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e16b      	b.n	8001acc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 815a 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b4 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_GPIO_Init+0x314>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a51      	ldr	r2, [pc, #324]	@ (8001af0 <HAL_GPIO_Init+0x318>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <HAL_GPIO_Init+0x31c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <HAL_GPIO_Init+0x320>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <HAL_GPIO_Init+0x324>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b00 <HAL_GPIO_Init+0x328>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b04 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b08 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00e      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e2:	2308      	movs	r3, #8
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e6:	2306      	movs	r3, #6
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae90 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40021c00 	.word	0x40021c00
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f806 	bl	8001b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e267      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d075      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x108>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e242      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x74>
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bf0:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a68      	ldr	r2, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcd0 	bl	80015b4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fccc 	bl	80015b4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e207      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fcbc 	bl	80015b4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fcb8 	bl	80015b4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1f3      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe8>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c7      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4937      	ldr	r1, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc71 	bl	80015b4 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fc6d 	bl	80015b4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a8      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4925      	ldr	r1, [pc, #148]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc50 	bl	80015b4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc4c 	bl	80015b4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e187      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d036      	beq.n	8001db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc30 	bl	80015b4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc2c 	bl	80015b4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e167      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x200>
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fc19 	bl	80015b4 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	e00e      	b.n	8001da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d86:	f7ff fc15 	bl	80015b4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d907      	bls.n	8001da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e150      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b88      	ldr	r3, [pc, #544]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8097 	beq.w	8001eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b81      	ldr	r3, [pc, #516]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b77      	ldr	r3, [pc, #476]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b74      	ldr	r3, [pc, #464]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a73      	ldr	r2, [pc, #460]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fbd5 	bl	80015b4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff fbd1 	bl	80015b4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e10c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2ea>
 8001e34:	4b64      	ldr	r3, [pc, #400]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e38:	4a63      	ldr	r2, [pc, #396]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x30c>
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e56:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e64:	4b58      	ldr	r3, [pc, #352]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	4a57      	ldr	r2, [pc, #348]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e70:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fb96 	bl	80015b4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fb92 	bl	80015b4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cb      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b49      	ldr	r3, [pc, #292]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fb80 	bl	80015b4 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fb7c 	bl	80015b4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0b5      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a1 	beq.w	8002038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef6:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d05c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d141      	bne.n	8001f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb50 	bl	80015b4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fb4c 	bl	80015b4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	491b      	ldr	r1, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fb25 	bl	80015b4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fb21 	bl	80015b4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e05c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x416>
 8001f8c:	e054      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb0e 	bl	80015b4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fb0a 	bl	80015b4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e045      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e038      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fa3c 	bl	80015b4 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff fa38 	bl	80015b4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f81c 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08006cd8 	.word	0x08006cd8
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b094      	sub	sp, #80	@ 0x50
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	2300      	movs	r3, #0
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222c:	4b79      	ldr	r3, [pc, #484]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d00d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 8002238:	2b08      	cmp	r3, #8
 800223a:	f200 80e1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002246:	e0db      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800224c:	e0db      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_GetSysClockFreq+0x208>)
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002252:	e0d8      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
 8002282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4621      	mov	r1, r4
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	6139      	str	r1, [r7, #16]
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ebb2 0801 	subs.w	r8, r2, r1
 80022cc:	4659      	mov	r1, fp
 80022ce:	eb63 0901 	sbc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	462b      	mov	r3, r5
 80022f4:	eb49 0303 	adc.w	r3, r9, r3
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	4629      	mov	r1, r5
 8002308:	024b      	lsls	r3, r1, #9
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002310:	4621      	mov	r1, r4
 8002312:	024a      	lsls	r2, r1, #9
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002324:	f7fd ffa4 	bl	8000270 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002330:	e058      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	4618      	mov	r0, r3
 800233c:	4611      	mov	r1, r2
 800233e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4641      	mov	r1, r8
 8002366:	ebb2 0a01 	subs.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002384:	ebb2 040a 	subs.w	r4, r2, sl
 8002388:	eb63 050b 	sbc.w	r5, r3, fp
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ce:	2200      	movs	r2, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	f7fd ff4a 	bl	8000270 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80023f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002408:	4618      	mov	r0, r3
 800240a:	3750      	adds	r7, #80	@ 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08006ce8 	.word	0x08006ce8

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002464:	f7ff ffdc 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0b5b      	lsrs	r3, r3, #13
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08006ce8 	.word	0x08006ce8

08002488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	220f      	movs	r2, #15
 8002496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_RCC_GetClockConfig+0x5c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_RCC_GetClockConfig+0x5c>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <HAL_RCC_GetClockConfig+0x60>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0207 	and.w	r2, r3, #7
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40023c00 	.word	0x40023c00

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f839 	bl	800258a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 f9c0 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e04e      	b.n	8002656 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <HAL_TIM_Base_Start_IT+0xc4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d022      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e2:	d01d      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002668 <HAL_TIM_Base_Start_IT+0xc8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d018      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1e      	ldr	r2, [pc, #120]	@ (800266c <HAL_TIM_Base_Start_IT+0xcc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002670 <HAL_TIM_Base_Start_IT+0xd0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1b      	ldr	r2, [pc, #108]	@ (8002674 <HAL_TIM_Base_Start_IT+0xd4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_TIM_Base_Start_IT+0xd8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0x80>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a18      	ldr	r2, [pc, #96]	@ (800267c <HAL_TIM_Base_Start_IT+0xdc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b06      	cmp	r3, #6
 8002630:	d010      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	e007      	b.n	8002654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00
 8002674:	40010400 	.word	0x40010400
 8002678:	40014000 	.word	0x40014000
 800267c:	40001800 	.word	0x40001800

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0202 	mvn.w	r2, #2
 80026b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8d2 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8c4 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8d5 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8ac 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f89e 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8af 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d020      	beq.n	800277c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0208 	mvn.w	r2, #8
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2204      	movs	r2, #4
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f886 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f878 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f889 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0210 	mvn.w	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2208      	movs	r2, #8
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f860 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f852 	bl	8002860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f863 	bl	8002888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0201 	mvn.w	r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fc94 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00c      	beq.n	8002810 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f906 	bl	8002a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00c      	beq.n	8002834 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f834 	bl	800289c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0220 	mvn.w	r2, #32
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8d8 	bl	8002a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a46      	ldr	r2, [pc, #280]	@ (80029dc <TIM_Base_SetConfig+0x12c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ce:	d00f      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a43      	ldr	r2, [pc, #268]	@ (80029e0 <TIM_Base_SetConfig+0x130>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a42      	ldr	r2, [pc, #264]	@ (80029e4 <TIM_Base_SetConfig+0x134>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a41      	ldr	r2, [pc, #260]	@ (80029e8 <TIM_Base_SetConfig+0x138>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a40      	ldr	r2, [pc, #256]	@ (80029ec <TIM_Base_SetConfig+0x13c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <TIM_Base_SetConfig+0x12c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002910:	d027      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <TIM_Base_SetConfig+0x130>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d023      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a31      	ldr	r2, [pc, #196]	@ (80029e4 <TIM_Base_SetConfig+0x134>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a30      	ldr	r2, [pc, #192]	@ (80029e8 <TIM_Base_SetConfig+0x138>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a2f      	ldr	r2, [pc, #188]	@ (80029ec <TIM_Base_SetConfig+0x13c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d017      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <TIM_Base_SetConfig+0x140>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <TIM_Base_SetConfig+0x144>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00f      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <TIM_Base_SetConfig+0x148>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00b      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <TIM_Base_SetConfig+0x14c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <TIM_Base_SetConfig+0x150>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a29      	ldr	r2, [pc, #164]	@ (8002a04 <TIM_Base_SetConfig+0x154>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <TIM_Base_SetConfig+0x12c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_Base_SetConfig+0xf8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <TIM_Base_SetConfig+0x13c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d103      	bne.n	80029b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d105      	bne.n	80029ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]
  }
}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40014400 	.word	0x40014400
 80029f8:	40014800 	.word	0x40014800
 80029fc:	40001800 	.word	0x40001800
 8002a00:	40001c00 	.word	0x40001c00
 8002a04:	40002000 	.word	0x40002000

08002a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e033      	b.n	8002aaa <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fba0 	bl	800119c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f90b 	bl	8002c80 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a88:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a98:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08a      	sub	sp, #40	@ 0x28
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d17c      	bne.n	8002bc8 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_USART_Transmit+0x28>
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e075      	b.n	8002bca <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_USART_Transmit+0x3a>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e06e      	b.n	8002bca <HAL_USART_Transmit+0x118>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2212      	movs	r2, #18
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b02:	f7fe fd57 	bl	80015b4 <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1c:	d108      	bne.n	8002b30 <HAL_USART_Transmit+0x7e>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	e003      	b.n	8002b38 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002b38:	e02a      	b.n	8002b90 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f844 	bl	8002bd2 <USART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e03a      	b.n	8002bca <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b68:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e007      	b.n	8002b82 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1cf      	bne.n	8002b3a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	@ 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f814 	bl	8002bd2 <USART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e00a      	b.n	8002bca <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002be2:	e038      	b.n	8002c56 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d034      	beq.n	8002c56 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <USART_WaitOnFlagUntilTimeout+0x30>
 8002bf2:	f7fe fcdf 	bl	80015b4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d229      	bcs.n	8002c56 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c10:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0220 	bic.w	r2, r2, #32
 8002c20:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c30:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e00f      	b.n	8002c76 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d0b7      	beq.n	8002be4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b0c6      	sub	sp, #280	@ 0x118
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f021 030c 	bic.w	r3, r1, #12
 8002ca4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cc2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cc8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002cca:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ce6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf4:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002d0a:	f023 030c 	bic.w	r3, r3, #12
 8002d0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d40:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6959      	ldr	r1, [r3, #20]
 8002d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8002d54:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f8c <USART_SetConfig+0x30c>)
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d006      	beq.n	8002d70 <USART_SetConfig+0xf0>
 8002d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b89      	ldr	r3, [pc, #548]	@ (8002f90 <USART_SetConfig+0x310>)
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	f040 8114 	bne.w	8002f98 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fb76 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8002d74:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002d78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d82:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002d86:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	1891      	adds	r1, r2, r2
 8002d90:	6739      	str	r1, [r7, #112]	@ 0x70
 8002d92:	415b      	adcs	r3, r3
 8002d94:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	eb12 0801 	adds.w	r8, r2, r1
 8002da0:	4629      	mov	r1, r5
 8002da2:	eb43 0901 	adc.w	r9, r3, r1
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	eb18 0303 	adds.w	r3, r8, r3
 8002dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dc8:	462b      	mov	r3, r5
 8002dca:	eb49 0303 	adc.w	r3, r9, r3
 8002dce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002dde:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002de2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002de6:	460b      	mov	r3, r1
 8002de8:	18db      	adds	r3, r3, r3
 8002dea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dec:	4613      	mov	r3, r2
 8002dee:	eb42 0303 	adc.w	r3, r2, r3
 8002df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002df8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002dfc:	f7fd fa38 	bl	8000270 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <USART_SetConfig+0x314>)
 8002e06:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	011c      	lsls	r4, r3, #4
 8002e0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e18:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e1c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	6639      	str	r1, [r7, #96]	@ 0x60
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e2c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e7c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e9a:	f7fd f9e9 	bl	8000270 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <USART_SetConfig+0x314>)
 8002ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2264      	movs	r2, #100	@ 0x64
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	1acb      	subs	r3, r1, r3
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002eba:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <USART_SetConfig+0x314>)
 8002ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ec8:	441c      	add	r4, r3
 8002eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ed4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ed8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f40:	460b      	mov	r3, r1
 8002f42:	18db      	adds	r3, r3, r3
 8002f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f46:	4613      	mov	r3, r2
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f56:	f7fd f98b 	bl	8000270 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <USART_SetConfig+0x314>)
 8002f60:	fba3 1302 	umull	r1, r3, r3, r2
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	2164      	movs	r1, #100	@ 0x64
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	3332      	adds	r3, #50	@ 0x32
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <USART_SetConfig+0x314>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	f003 0207 	and.w	r2, r3, #7
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4422      	add	r2, r4
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e109      	b.n	800319e <USART_SetConfig+0x51e>
 8002f8a:	bf00      	nop
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40011400 	.word	0x40011400
 8002f94:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f98:	f7ff fa4e 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002fa0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002faa:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fae:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fb2:	4642      	mov	r2, r8
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	1891      	adds	r1, r2, r2
 8002fb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002fba:	415b      	adcs	r3, r3
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	1854      	adds	r4, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb43 0501 	adc.w	r5, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	00eb      	lsls	r3, r5, #3
 8002fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fda:	00e2      	lsls	r2, r4, #3
 8002fdc:	4614      	mov	r4, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	4643      	mov	r3, r8
 8002fe2:	18e3      	adds	r3, r4, r3
 8002fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fe8:	464b      	mov	r3, r9
 8002fea:	eb45 0303 	adc.w	r3, r5, r3
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ffe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003002:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003006:	460b      	mov	r3, r1
 8003008:	18db      	adds	r3, r3, r3
 800300a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800300c:	4613      	mov	r3, r2
 800300e:	eb42 0303 	adc.w	r3, r2, r3
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003018:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800301c:	f7fd f928 	bl	8000270 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4b61      	ldr	r3, [pc, #388]	@ (80031ac <USART_SetConfig+0x52c>)
 8003026:	fba3 2302 	umull	r2, r3, r3, r2
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	011c      	lsls	r4, r3, #4
 800302e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003038:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800303c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003040:	4642      	mov	r2, r8
 8003042:	464b      	mov	r3, r9
 8003044:	1891      	adds	r1, r2, r2
 8003046:	6239      	str	r1, [r7, #32]
 8003048:	415b      	adcs	r3, r3
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003050:	4641      	mov	r1, r8
 8003052:	eb12 0a01 	adds.w	sl, r2, r1
 8003056:	4649      	mov	r1, r9
 8003058:	eb43 0b01 	adc.w	fp, r3, r1
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800306c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003070:	4692      	mov	sl, r2
 8003072:	469b      	mov	fp, r3
 8003074:	4643      	mov	r3, r8
 8003076:	eb1a 0303 	adds.w	r3, sl, r3
 800307a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800307e:	464b      	mov	r3, r9
 8003080:	eb4b 0303 	adc.w	r3, fp, r3
 8003084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003094:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003098:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800309c:	460b      	mov	r3, r1
 800309e:	18db      	adds	r3, r3, r3
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4613      	mov	r3, r2
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030b2:	f7fd f8dd 	bl	8000270 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	4b3b      	ldr	r3, [pc, #236]	@ (80031ac <USART_SetConfig+0x52c>)
 80030be:	fba3 2301 	umull	r2, r3, r3, r1
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	2264      	movs	r2, #100	@ 0x64
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	1acb      	subs	r3, r1, r3
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030d2:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <USART_SetConfig+0x52c>)
 80030d4:	fba3 2302 	umull	r2, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030e0:	441c      	add	r4, r3
 80030e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	1891      	adds	r1, r2, r2
 80030fa:	6139      	str	r1, [r7, #16]
 80030fc:	415b      	adcs	r3, r3
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003104:	4641      	mov	r1, r8
 8003106:	1851      	adds	r1, r2, r1
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4649      	mov	r1, r9
 800310c:	414b      	adcs	r3, r1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800311c:	4659      	mov	r1, fp
 800311e:	00cb      	lsls	r3, r1, #3
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003126:	4651      	mov	r1, sl
 8003128:	00ca      	lsls	r2, r1, #3
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	4603      	mov	r3, r0
 8003130:	4642      	mov	r2, r8
 8003132:	189b      	adds	r3, r3, r2
 8003134:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003138:	464b      	mov	r3, r9
 800313a:	460a      	mov	r2, r1
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800314e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003150:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003154:	460b      	mov	r3, r1
 8003156:	18db      	adds	r3, r3, r3
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	eb42 0303 	adc.w	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003166:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800316a:	f7fd f881 	bl	8000270 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <USART_SetConfig+0x52c>)
 8003174:	fba3 1302 	umull	r1, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	2164      	movs	r1, #100	@ 0x64
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	3332      	adds	r3, #50	@ 0x32
 8003186:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <USART_SetConfig+0x52c>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4422      	add	r2, r4
 800319a:	609a      	str	r2, [r3, #8]
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	51eb851f 	.word	0x51eb851f

080031b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c2:	2b84      	cmp	r3, #132	@ 0x84
 80031c4:	d005      	beq.n	80031d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	3303      	adds	r3, #3
 80031d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e6:	f3ef 8305 	mrs	r3, IPSR
 80031ea:	607b      	str	r3, [r7, #4]
  return(result);
 80031ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003208:	f001 fa08 	bl	800461c <vTaskStartScheduler>
  
  return osOK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	bd80      	pop	{r7, pc}

08003212 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003214:	b089      	sub	sp, #36	@ 0x24
 8003216:	af04      	add	r7, sp, #16
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <osThreadCreate+0x54>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01c      	beq.n	8003266 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685c      	ldr	r4, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691e      	ldr	r6, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ffb6 	bl	80031b0 <makeFreeRtosPriority>
 8003244:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800324e:	9202      	str	r2, [sp, #8]
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	9100      	str	r1, [sp, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4632      	mov	r2, r6
 8003258:	4629      	mov	r1, r5
 800325a:	4620      	mov	r0, r4
 800325c:	f001 f810 	bl	8004280 <xTaskCreateStatic>
 8003260:	4603      	mov	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e01c      	b.n	80032a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685c      	ldr	r4, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003272:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff98 	bl	80031b0 <makeFreeRtosPriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	9200      	str	r2, [sp, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	4632      	mov	r2, r6
 800328e:	4629      	mov	r1, r5
 8003290:	4620      	mov	r0, r4
 8003292:	f001 f855 	bl	8004340 <xTaskCreate>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032a0:	68fb      	ldr	r3, [r7, #12]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <osDelay+0x16>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	e000      	b.n	80032c2 <osDelay+0x18>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f974 	bl	80045b0 <vTaskDelay>
  
  return osOK;
 80032c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80032e6:	f7ff ff7b 	bl	80031e0 <inHandlerMode>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01c      	beq.n	800332a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	f107 0208 	add.w	r2, r7, #8
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	2201      	movs	r2, #1
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 ff4d 	bl	80051a0 <xTaskGenericNotifyFromISR>
 8003306:	4603      	mov	r3, r0
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <osSignalSet+0x3e>
      return 0x80000000;
 800330c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003310:	e019      	b.n	8003346 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <osSignalSet+0x70>
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <osSignalSet+0x7c>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	e00c      	b.n	8003344 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	2201      	movs	r2, #1
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f001 fe7c 	bl	8005030 <xTaskGenericNotify>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d002      	beq.n	8003344 <osSignalSet+0x70>
    return 0x80000000;
 800333e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003342:	e000      	b.n	8003346 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003344:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b089      	sub	sp, #36	@ 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d103      	bne.n	8003378 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e009      	b.n	800338c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <osSignalWait+0x38>
      ticks = 1;
 8003388:	2301      	movs	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800338c:	f7ff ff28 	bl	80031e0 <inHandlerMode>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003396:	2382      	movs	r3, #130	@ 0x82
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e01b      	b.n	80033d4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	2000      	movs	r0, #0
 80033a8:	f001 fde8 	bl	8004f7c <xTaskNotifyWait>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d008      	beq.n	80033c4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <osSignalWait+0x6a>
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e00a      	b.n	80033d4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80033be:	2340      	movs	r3, #64	@ 0x40
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	e007      	b.n	80033d4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da02      	bge.n	80033d0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80033ca:	2386      	movs	r3, #134	@ 0x86
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e001      	b.n	80033d4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80033d0:	2308      	movs	r3, #8
 80033d2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	461c      	mov	r4, r3
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	3724      	adds	r7, #36	@ 0x24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}

080033ec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4619      	mov	r1, r3
 8003402:	2001      	movs	r0, #1
 8003404:	f000 fb0d 	bl	8003a22 <xQueueCreateMutexStatic>
 8003408:	4603      	mov	r3, r0
 800340a:	e003      	b.n	8003414 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800340c:	2001      	movs	r0, #1
 800340e:	f000 faf0 	bl	80039f2 <xQueueCreateMutex>
 8003412:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d011      	beq.n	8003452 <osMessageCreate+0x36>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2400      	movs	r4, #0
 8003448:	9400      	str	r4, [sp, #0]
 800344a:	f000 f9e1 	bl	8003810 <xQueueGenericCreateStatic>
 800344e:	4603      	mov	r3, r0
 8003450:	e008      	b.n	8003464 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	f000 fa54 	bl	800390a <xQueueGenericCreate>
 8003462:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <osMessagePut+0x1e>
    ticks = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800348a:	f7ff fea9 	bl	80031e0 <inHandlerMode>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003494:	f107 0210 	add.w	r2, r7, #16
 8003498:	f107 0108 	add.w	r1, r7, #8
 800349c:	2300      	movs	r3, #0
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fbdc 	bl	8003c5c <xQueueGenericSendFromISR>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <osMessagePut+0x42>
      return osErrorOS;
 80034aa:	23ff      	movs	r3, #255	@ 0xff
 80034ac:	e018      	b.n	80034e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d014      	beq.n	80034de <osMessagePut+0x72>
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <osMessagePut+0x7c>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	e00b      	b.n	80034de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80034c6:	f107 0108 	add.w	r1, r7, #8
 80034ca:	2300      	movs	r3, #0
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fac2 	bl	8003a58 <xQueueGenericSend>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <osMessagePut+0x72>
      return osErrorOS;
 80034da:	23ff      	movs	r3, #255	@ 0xff
 80034dc:	e000      	b.n	80034e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b08b      	sub	sp, #44	@ 0x2c
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	617b      	str	r3, [r7, #20]
    return event;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	461c      	mov	r4, r3
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800351a:	e054      	b.n	80035c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800351c:	2300      	movs	r3, #0
 800351e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d103      	bne.n	8003534 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
 8003532:	e009      	b.n	8003548 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <osMessageGet+0x5c>
      ticks = 1;
 8003544:	2301      	movs	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003548:	f7ff fe4a 	bl	80031e0 <inHandlerMode>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01c      	beq.n	800358c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003552:	f107 0220 	add.w	r2, r7, #32
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	68b8      	ldr	r0, [r7, #8]
 8003560:	f000 fcfc 	bl	8003f5c <xQueueReceiveFromISR>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800356a:	2310      	movs	r3, #16
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e001      	b.n	8003574 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01d      	beq.n	80035b6 <osMessageGet+0xca>
 800357a:	4b15      	ldr	r3, [pc, #84]	@ (80035d0 <osMessageGet+0xe4>)
 800357c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	e014      	b.n	80035b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	3304      	adds	r3, #4
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	4619      	mov	r1, r3
 8003596:	68b8      	ldr	r0, [r7, #8]
 8003598:	f000 fbfe 	bl	8003d98 <xQueueReceive>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80035a2:	2310      	movs	r3, #16
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e006      	b.n	80035b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <osMessageGet+0xc6>
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <osMessageGet+0xc8>
 80035b2:	2340      	movs	r3, #64	@ 0x40
 80035b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	461c      	mov	r4, r3
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	372c      	adds	r7, #44	@ 0x2c
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 0208 	add.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f103 0208 	add.w	r2, r3, #8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 0208 	add.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d103      	bne.n	8003696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e00c      	b.n	80036b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3308      	adds	r3, #8
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e002      	b.n	80036a4 <vListInsert+0x2e>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d2f6      	bcs.n	800369e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6852      	ldr	r2, [r2, #4]
 8003708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d103      	bne.n	800371c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1e5a      	subs	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10b      	bne.n	8003768 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003768:	f001 ff8e 	bl	8005688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	68f9      	ldr	r1, [r7, #12]
 8003776:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	441a      	add	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	3b01      	subs	r3, #1
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	441a      	add	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	22ff      	movs	r2, #255	@ 0xff
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	22ff      	movs	r2, #255	@ 0xff
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d114      	bne.n	80037e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01a      	beq.n	80037fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3310      	adds	r3, #16
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f970 	bl	8004ab0 <xTaskRemoveFromEventList>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <xQueueGenericReset+0xd0>)
 80037d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	e009      	b.n	80037fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3310      	adds	r3, #16
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fef1 	bl	80035d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3324      	adds	r3, #36	@ 0x24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff feec 	bl	80035d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037fc:	f001 ff76 	bl	80056ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003800:	2301      	movs	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	@ 0x38
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10b      	bne.n	800383c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	e7fd      	b.n	8003838 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	e7fd      	b.n	8003856 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <xQueueGenericCreateStatic+0x56>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <xQueueGenericCreateStatic+0x5a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xQueueGenericCreateStatic+0x5c>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	623b      	str	r3, [r7, #32]
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <xQueueGenericCreateStatic+0x84>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <xQueueGenericCreateStatic+0x88>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <xQueueGenericCreateStatic+0x8a>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	61fb      	str	r3, [r7, #28]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038b6:	2348      	movs	r3, #72	@ 0x48
 80038b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b48      	cmp	r3, #72	@ 0x48
 80038be:	d00b      	beq.n	80038d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	61bb      	str	r3, [r7, #24]
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80038de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f840 	bl	8003980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003902:	4618      	mov	r0, r3
 8003904:	3730      	adds	r7, #48	@ 0x30
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	@ 0x28
 800390e:	af02      	add	r7, sp, #8
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	4613      	mov	r3, r2
 8003916:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xQueueGenericCreate+0x2c>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	613b      	str	r3, [r7, #16]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	3348      	adds	r3, #72	@ 0x48
 8003944:	4618      	mov	r0, r3
 8003946:	f001 ffc1 	bl	80058cc <pvPortMalloc>
 800394a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3348      	adds	r3, #72	@ 0x48
 800395a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f805 	bl	8003980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003976:	69bb      	ldr	r3, [r7, #24]
	}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e002      	b.n	80039a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039ae:	2101      	movs	r1, #1
 80039b0:	69b8      	ldr	r0, [r7, #24]
 80039b2:	f7ff fec3 	bl	800373c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80039de:	2300      	movs	r3, #0
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f837 	bl	8003a58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80039fc:	2301      	movs	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6939      	ldr	r1, [r7, #16]
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f7ff ff7d 	bl	800390a <xQueueGenericCreate>
 8003a10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff ffd3 	bl	80039be <prvInitialiseMutex>

		return xNewQueue;
 8003a18:	68fb      	ldr	r3, [r7, #12]
	}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af02      	add	r7, sp, #8
 8003a28:	4603      	mov	r3, r0
 8003a2a:	6039      	str	r1, [r7, #0]
 8003a2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	6978      	ldr	r0, [r7, #20]
 8003a42:	f7ff fee5 	bl	8003810 <xQueueGenericCreateStatic>
 8003a46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff ffb8 	bl	80039be <prvInitialiseMutex>

		return xNewQueue;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
	}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08e      	sub	sp, #56	@ 0x38
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a66:	2300      	movs	r3, #0
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <xQueueGenericSend+0x34>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSend+0x42>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSend+0x46>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSend+0x48>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <xQueueGenericSend+0x64>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d103      	bne.n	8003aca <xQueueGenericSend+0x72>
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <xQueueGenericSend+0x76>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <xQueueGenericSend+0x78>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <xQueueGenericSend+0x94>
	__asm volatile
 8003ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	623b      	str	r3, [r7, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	e7fd      	b.n	8003ae8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aec:	f001 f9a0 	bl	8004e30 <xTaskGetSchedulerState>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <xQueueGenericSend+0xa4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <xQueueGenericSend+0xa8>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <xQueueGenericSend+0xaa>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <xQueueGenericSend+0xc6>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	61fb      	str	r3, [r7, #28]
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	e7fd      	b.n	8003b1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b1e:	f001 fdb3 	bl	8005688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <xQueueGenericSend+0xdc>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d129      	bne.n	8003b88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b3a:	f000 fa91 	bl	8004060 <prvCopyDataToQueue>
 8003b3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	3324      	adds	r3, #36	@ 0x24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 ffaf 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b58:	4b3f      	ldr	r3, [pc, #252]	@ (8003c58 <xQueueGenericSend+0x200>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	e00a      	b.n	8003b80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b70:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <xQueueGenericSend+0x200>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b80:	f001 fdb4 	bl	80056ec <vPortExitCritical>
				return pdPASS;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e063      	b.n	8003c50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b8e:	f001 fdad 	bl	80056ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e05c      	b.n	8003c50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ffe9 	bl	8004b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003baa:	f001 fd9f 	bl	80056ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bae:	f000 fd97 	bl	80046e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bb2:	f001 fd69 	bl	8005688 <vPortEnterCritical>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d103      	bne.n	8003bcc <xQueueGenericSend+0x174>
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSend+0x18a>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be2:	f001 fd83 	bl	80056ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003be6:	1d3a      	adds	r2, r7, #4
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ffd8 	bl	8004ba4 <xTaskCheckForTimeOut>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d124      	bne.n	8003c44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bfc:	f000 fb28 	bl	8004250 <prvIsQueueFull>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	3310      	adds	r3, #16
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ff28 	bl	8004a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c16:	f000 fab3 	bl	8004180 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c1a:	f000 fd6f 	bl	80046fc <xTaskResumeAll>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af7c 	bne.w	8003b1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <xQueueGenericSend+0x200>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	e772      	b.n	8003b1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c3a:	f000 faa1 	bl	8004180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c3e:	f000 fd5d 	bl	80046fc <xTaskResumeAll>
 8003c42:	e76c      	b.n	8003b1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c46:	f000 fa9b 	bl	8004180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c4a:	f000 fd57 	bl	80046fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3738      	adds	r7, #56	@ 0x38
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b090      	sub	sp, #64	@ 0x40
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <xQueueGenericSendFromISR+0x3e>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <xQueueGenericSendFromISR+0x42>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueGenericSendFromISR+0x44>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSendFromISR+0x6e>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <xQueueGenericSendFromISR+0x72>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <xQueueGenericSendFromISR+0x74>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	623b      	str	r3, [r7, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cec:	f001 fdac 	bl	8005848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cf0:	f3ef 8211 	mrs	r2, BASEPRI
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d08:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <xQueueGenericSendFromISR+0xc2>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d12f      	bne.n	8003d7e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d34:	f000 f994 	bl	8004060 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d112      	bne.n	8003d68 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	3324      	adds	r3, #36	@ 0x24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 feae 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00e      	beq.n	8003d78 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e007      	b.n	8003d78 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	b25a      	sxtb	r2, r3
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d7c:	e001      	b.n	8003d82 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3740      	adds	r7, #64	@ 0x40
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	@ 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xQueueReceive+0x32>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	623b      	str	r3, [r7, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueReceive+0x40>
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xQueueReceive+0x44>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueReceive+0x46>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <xQueueReceive+0x62>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	61fb      	str	r3, [r7, #28]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfa:	f001 f819 	bl	8004e30 <xTaskGetSchedulerState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <xQueueReceive+0x72>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueReceive+0x76>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueReceive+0x78>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xQueueReceive+0x94>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e2c:	f001 fc2c 	bl	8005688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01f      	beq.n	8003e7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e40:	f000 f978 	bl	8004134 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00f      	beq.n	8003e74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	3310      	adds	r3, #16
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fe29 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e64:	4b3c      	ldr	r3, [pc, #240]	@ (8003f58 <xQueueReceive+0x1c0>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e74:	f001 fc3a 	bl	80056ec <vPortExitCritical>
				return pdPASS;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e069      	b.n	8003f50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e82:	f001 fc33 	bl	80056ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e062      	b.n	8003f50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e90:	f107 0310 	add.w	r3, r7, #16
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe6f 	bl	8004b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9e:	f001 fc25 	bl	80056ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea2:	f000 fc1d 	bl	80046e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea6:	f001 fbef 	bl	8005688 <vPortEnterCritical>
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d103      	bne.n	8003ec0 <xQueueReceive+0x128>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ec6:	b25b      	sxtb	r3, r3
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d103      	bne.n	8003ed6 <xQueueReceive+0x13e>
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ed6:	f001 fc09 	bl	80056ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eda:	1d3a      	adds	r2, r7, #4
 8003edc:	f107 0310 	add.w	r3, r7, #16
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fe5e 	bl	8004ba4 <xTaskCheckForTimeOut>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d123      	bne.n	8003f36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef0:	f000 f998 	bl	8004224 <prvIsQueueEmpty>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d017      	beq.n	8003f2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	3324      	adds	r3, #36	@ 0x24
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fdae 	bl	8004a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f0a:	f000 f939 	bl	8004180 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f0e:	f000 fbf5 	bl	80046fc <xTaskResumeAll>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d189      	bne.n	8003e2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f18:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <xQueueReceive+0x1c0>)
 8003f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	e780      	b.n	8003e2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f2c:	f000 f928 	bl	8004180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f30:	f000 fbe4 	bl	80046fc <xTaskResumeAll>
 8003f34:	e77a      	b.n	8003e2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f38:	f000 f922 	bl	8004180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3c:	f000 fbde 	bl	80046fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f42:	f000 f96f 	bl	8004224 <prvIsQueueEmpty>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f43f af6f 	beq.w	8003e2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3730      	adds	r7, #48	@ 0x30
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	@ 0x38
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	623b      	str	r3, [r7, #32]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d103      	bne.n	8003f98 <xQueueReceiveFromISR+0x3c>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <xQueueReceiveFromISR+0x40>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <xQueueReceiveFromISR+0x42>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	61fb      	str	r3, [r7, #28]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fba:	f001 fc45 	bl	8005848 <vPortValidateInterruptPriority>
	__asm volatile
 8003fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	61ba      	str	r2, [r7, #24]
 8003fd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02f      	beq.n	8004046 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ff4:	f000 f89e 	bl	8004134 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffa:	1e5a      	subs	r2, r3, #1
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004000:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d112      	bne.n	8004030 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fd4a 	bl	8004ab0 <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e007      	b.n	8004040 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004034:	3301      	adds	r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	b25a      	sxtb	r2, r3
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004040:	2301      	movs	r3, #1
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
 8004044:	e001      	b.n	800404a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004046:	2300      	movs	r3, #0
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f383 8811 	msr	BASEPRI, r3
}
 8004054:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004058:	4618      	mov	r0, r3
 800405a:	3738      	adds	r7, #56	@ 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d14d      	bne.n	8004122 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 feee 	bl	8004e6c <xTaskPriorityDisinherit>
 8004090:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e043      	b.n	8004122 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d119      	bne.n	80040d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6858      	ldr	r0, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	461a      	mov	r2, r3
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	f001 ff8f 	bl	8005fce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d32b      	bcc.n	8004122 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	e026      	b.n	8004122 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68d8      	ldr	r0, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	461a      	mov	r2, r3
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	f001 ff75 	bl	8005fce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	425b      	negs	r3, r3
 80040ee:	441a      	add	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d207      	bcs.n	8004110 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	425b      	negs	r3, r3
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d105      	bne.n	8004122 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3b01      	subs	r3, #1
 8004120:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800412a:	697b      	ldr	r3, [r7, #20]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	441a      	add	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	d303      	bcc.n	8004168 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68d9      	ldr	r1, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	461a      	mov	r2, r3
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f001 ff2b 	bl	8005fce <memcpy>
	}
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004188:	f001 fa7e 	bl	8005688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004192:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004194:	e011      	b.n	80041ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d012      	beq.n	80041c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	@ 0x24
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fc84 	bl	8004ab0 <xTaskRemoveFromEventList>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ae:	f000 fd5d 	bl	8004c6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	dce9      	bgt.n	8004196 <prvUnlockQueue+0x16>
 80041c2:	e000      	b.n	80041c6 <prvUnlockQueue+0x46>
					break;
 80041c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	22ff      	movs	r2, #255	@ 0xff
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041ce:	f001 fa8d 	bl	80056ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041d2:	f001 fa59 	bl	8005688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041de:	e011      	b.n	8004204 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3310      	adds	r3, #16
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fc5f 	bl	8004ab0 <xTaskRemoveFromEventList>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041f8:	f000 fd38 	bl	8004c6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	3b01      	subs	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004208:	2b00      	cmp	r3, #0
 800420a:	dce9      	bgt.n	80041e0 <prvUnlockQueue+0x60>
 800420c:	e000      	b.n	8004210 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800420e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	22ff      	movs	r2, #255	@ 0xff
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004218:	f001 fa68 	bl	80056ec <vPortExitCritical>
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800422c:	f001 fa2c 	bl	8005688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e001      	b.n	8004242 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004242:	f001 fa53 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004258:	f001 fa16 	bl	8005688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	429a      	cmp	r2, r3
 8004266:	d102      	bne.n	800426e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004268:	2301      	movs	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e001      	b.n	8004272 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004272:	f001 fa3b 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	@ 0x38
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800428e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	623b      	str	r3, [r7, #32]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	61fb      	str	r3, [r7, #28]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042ca:	2354      	movs	r3, #84	@ 0x54
 80042cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b54      	cmp	r3, #84	@ 0x54
 80042d2:	d00b      	beq.n	80042ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61bb      	str	r3, [r7, #24]
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01e      	beq.n	8004332 <xTaskCreateStatic+0xb2>
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01b      	beq.n	8004332 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800430c:	2300      	movs	r3, #0
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f850 	bl	80043ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800432a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800432c:	f000 f8d6 	bl	80044dc <prvAddNewTaskToReadyList>
 8004330:	e001      	b.n	8004336 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004336:	697b      	ldr	r3, [r7, #20]
	}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	@ 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	@ 0x30
 8004344:	af04      	add	r7, sp, #16
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4618      	mov	r0, r3
 8004356:	f001 fab9 	bl	80058cc <pvPortMalloc>
 800435a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00e      	beq.n	8004380 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004362:	2054      	movs	r0, #84	@ 0x54
 8004364:	f001 fab2 	bl	80058cc <pvPortMalloc>
 8004368:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
 8004376:	e005      	b.n	8004384 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004378:	6978      	ldr	r0, [r7, #20]
 800437a:	f001 fb75 	bl	8005a68 <vPortFree>
 800437e:	e001      	b.n	8004384 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	2300      	movs	r3, #0
 8004396:	9303      	str	r3, [sp, #12]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	9302      	str	r3, [sp, #8]
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f80e 	bl	80043ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ae:	69f8      	ldr	r0, [r7, #28]
 80043b0:	f000 f894 	bl	80044dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	e002      	b.n	80043c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043c0:	69bb      	ldr	r3, [r7, #24]
	}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043e2:	3b01      	subs	r3, #1
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	617b      	str	r3, [r7, #20]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01f      	beq.n	800445a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e012      	b.n	8004446 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	7819      	ldrb	r1, [r3, #0]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	3334      	adds	r3, #52	@ 0x34
 8004430:	460a      	mov	r2, r1
 8004432:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3301      	adds	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d9e9      	bls.n	8004420 <prvInitialiseNewTask+0x56>
 800444c:	e000      	b.n	8004450 <prvInitialiseNewTask+0x86>
			{
				break;
 800444e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004458:	e003      	b.n	8004462 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	2b06      	cmp	r3, #6
 8004466:	d901      	bls.n	800446c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004468:	2306      	movs	r3, #6
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004470:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004476:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	2200      	movs	r2, #0
 800447c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f8c6 	bl	8003614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	3318      	adds	r3, #24
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff f8c1 	bl	8003614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449a:	f1c3 0207 	rsb	r2, r3, #7
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	2200      	movs	r2, #0
 80044ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	69b8      	ldr	r0, [r7, #24]
 80044bc:	f000 ffb4 	bl	8005428 <pxPortInitialiseStack>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044d2:	bf00      	nop
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044e4:	f001 f8d0 	bl	8005688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004594 <prvAddNewTaskToReadyList+0xb8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <prvAddNewTaskToReadyList+0xb8>)
 80044f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044f2:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <prvAddNewTaskToReadyList+0xbc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044fa:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <prvAddNewTaskToReadyList+0xbc>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004500:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <prvAddNewTaskToReadyList+0xb8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d110      	bne.n	800452a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004508:	f000 fbd4 	bl	8004cb4 <prvInitialiseTaskLists>
 800450c:	e00d      	b.n	800452a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800450e:	4b23      	ldr	r3, [pc, #140]	@ (800459c <prvAddNewTaskToReadyList+0xc0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <prvAddNewTaskToReadyList+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d802      	bhi.n	800452a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004524:	4a1c      	ldr	r2, [pc, #112]	@ (8004598 <prvAddNewTaskToReadyList+0xbc>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800452a:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <prvAddNewTaskToReadyList+0xc4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <prvAddNewTaskToReadyList+0xc4>)
 8004532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	409a      	lsls	r2, r3
 800453c:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <prvAddNewTaskToReadyList+0xc8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4313      	orrs	r3, r2
 8004542:	4a18      	ldr	r2, [pc, #96]	@ (80045a4 <prvAddNewTaskToReadyList+0xc8>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a15      	ldr	r2, [pc, #84]	@ (80045a8 <prvAddNewTaskToReadyList+0xcc>)
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7ff f866 	bl	800362e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004562:	f001 f8c3 	bl	80056ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <prvAddNewTaskToReadyList+0xc0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800456e:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <prvAddNewTaskToReadyList+0xbc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	429a      	cmp	r2, r3
 800457a:	d207      	bcs.n	800458c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <prvAddNewTaskToReadyList+0xd0>)
 800457e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2000054c 	.word	0x2000054c
 8004598:	2000044c 	.word	0x2000044c
 800459c:	20000558 	.word	0x20000558
 80045a0:	20000568 	.word	0x20000568
 80045a4:	20000554 	.word	0x20000554
 80045a8:	20000450 	.word	0x20000450
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <vTaskDelay+0x64>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <vTaskDelay+0x32>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60bb      	str	r3, [r7, #8]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045e2:	f000 f87d 	bl	80046e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045e6:	2100      	movs	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 feb7 	bl	800535c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045ee:	f000 f885 	bl	80046fc <xTaskResumeAll>
 80045f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d107      	bne.n	800460a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045fa:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <vTaskDelay+0x68>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000574 	.word	0x20000574
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800462a:	463a      	mov	r2, r7
 800462c:	1d39      	adds	r1, r7, #4
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fa9a 	bl	8000b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	9202      	str	r2, [sp, #8]
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	2300      	movs	r3, #0
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	460a      	mov	r2, r1
 800464a:	491f      	ldr	r1, [pc, #124]	@ (80046c8 <vTaskStartScheduler+0xac>)
 800464c:	481f      	ldr	r0, [pc, #124]	@ (80046cc <vTaskStartScheduler+0xb0>)
 800464e:	f7ff fe17 	bl	8004280 <xTaskCreateStatic>
 8004652:	4603      	mov	r3, r0
 8004654:	4a1e      	ldr	r2, [pc, #120]	@ (80046d0 <vTaskStartScheduler+0xb4>)
 8004656:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004658:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <vTaskStartScheduler+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e001      	b.n	800466a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d116      	bne.n	800469e <vTaskStartScheduler+0x82>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <vTaskStartScheduler+0xb8>)
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <vTaskStartScheduler+0xbc>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004692:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <vTaskStartScheduler+0xc0>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004698:	f000 ff52 	bl	8005540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800469c:	e00f      	b.n	80046be <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d10b      	bne.n	80046be <vTaskStartScheduler+0xa2>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <vTaskStartScheduler+0x9e>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	08006cd0 	.word	0x08006cd0
 80046cc:	08004c85 	.word	0x08004c85
 80046d0:	20000570 	.word	0x20000570
 80046d4:	2000056c 	.word	0x2000056c
 80046d8:	20000558 	.word	0x20000558
 80046dc:	20000550 	.word	0x20000550

080046e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046e4:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <vTaskSuspendAll+0x18>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a03      	ldr	r2, [pc, #12]	@ (80046f8 <vTaskSuspendAll+0x18>)
 80046ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20000574 	.word	0x20000574

080046fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800470a:	4b42      	ldr	r3, [pc, #264]	@ (8004814 <xTaskResumeAll+0x118>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <xTaskResumeAll+0x2e>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	603b      	str	r3, [r7, #0]
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	e7fd      	b.n	8004726 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800472a:	f000 ffad 	bl	8005688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800472e:	4b39      	ldr	r3, [pc, #228]	@ (8004814 <xTaskResumeAll+0x118>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a37      	ldr	r2, [pc, #220]	@ (8004814 <xTaskResumeAll+0x118>)
 8004736:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004738:	4b36      	ldr	r3, [pc, #216]	@ (8004814 <xTaskResumeAll+0x118>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d161      	bne.n	8004804 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004740:	4b35      	ldr	r3, [pc, #212]	@ (8004818 <xTaskResumeAll+0x11c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d05d      	beq.n	8004804 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004748:	e02e      	b.n	80047a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800474a:	4b34      	ldr	r3, [pc, #208]	@ (800481c <xTaskResumeAll+0x120>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3318      	adds	r3, #24
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe ffc6 	bl	80036e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe ffc1 	bl	80036e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	2201      	movs	r2, #1
 800476c:	409a      	lsls	r2, r3
 800476e:	4b2c      	ldr	r3, [pc, #176]	@ (8004820 <xTaskResumeAll+0x124>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	4a2a      	ldr	r2, [pc, #168]	@ (8004820 <xTaskResumeAll+0x124>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <xTaskResumeAll+0x128>)
 8004786:	441a      	add	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe ff4d 	bl	800362e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004798:	4b23      	ldr	r3, [pc, #140]	@ (8004828 <xTaskResumeAll+0x12c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047a2:	4b22      	ldr	r3, [pc, #136]	@ (800482c <xTaskResumeAll+0x130>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a8:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <xTaskResumeAll+0x120>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1cc      	bne.n	800474a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b6:	f000 fb1b 	bl	8004df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <xTaskResumeAll+0x134>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c6:	f000 f837 	bl	8004838 <xTaskIncrementTick>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <xTaskResumeAll+0x130>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3b01      	subs	r3, #1
 80047da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f1      	bne.n	80047c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047e2:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <xTaskResumeAll+0x134>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047e8:	4b10      	ldr	r3, [pc, #64]	@ (800482c <xTaskResumeAll+0x130>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <xTaskResumeAll+0x138>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004804:	f000 ff72 	bl	80056ec <vPortExitCritical>

	return xAlreadyYielded;
 8004808:	68bb      	ldr	r3, [r7, #8]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000574 	.word	0x20000574
 8004818:	2000054c 	.word	0x2000054c
 800481c:	2000050c 	.word	0x2000050c
 8004820:	20000554 	.word	0x20000554
 8004824:	20000450 	.word	0x20000450
 8004828:	2000044c 	.word	0x2000044c
 800482c:	20000560 	.word	0x20000560
 8004830:	2000055c 	.word	0x2000055c
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004842:	4b4f      	ldr	r3, [pc, #316]	@ (8004980 <xTaskIncrementTick+0x148>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 808f 	bne.w	800496a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800484c:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <xTaskIncrementTick+0x14c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004854:	4a4b      	ldr	r2, [pc, #300]	@ (8004984 <xTaskIncrementTick+0x14c>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d121      	bne.n	80048a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004860:	4b49      	ldr	r3, [pc, #292]	@ (8004988 <xTaskIncrementTick+0x150>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <xTaskIncrementTick+0x4a>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	603b      	str	r3, [r7, #0]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xTaskIncrementTick+0x46>
 8004882:	4b41      	ldr	r3, [pc, #260]	@ (8004988 <xTaskIncrementTick+0x150>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	4b40      	ldr	r3, [pc, #256]	@ (800498c <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3e      	ldr	r2, [pc, #248]	@ (8004988 <xTaskIncrementTick+0x150>)
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4a3e      	ldr	r2, [pc, #248]	@ (800498c <xTaskIncrementTick+0x154>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b3e      	ldr	r3, [pc, #248]	@ (8004990 <xTaskIncrementTick+0x158>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a3c      	ldr	r2, [pc, #240]	@ (8004990 <xTaskIncrementTick+0x158>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f000 faa6 	bl	8004df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d348      	bcc.n	8004940 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ae:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <xTaskIncrementTick+0x150>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	601a      	str	r2, [r3, #0]
					break;
 80048c0:	e03e      	b.n	8004940 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <xTaskIncrementTick+0x150>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d203      	bcs.n	80048e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048da:	4a2e      	ldr	r2, [pc, #184]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048e0:	e02e      	b.n	8004940 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fefe 	bl	80036e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fef5 	bl	80036e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <xTaskIncrementTick+0x160>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <xTaskIncrementTick+0x160>)
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <xTaskIncrementTick+0x164>)
 800491e:	441a      	add	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fe fe81 	bl	800362e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <xTaskIncrementTick+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	429a      	cmp	r2, r3
 8004938:	d3b9      	bcc.n	80048ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800493a:	2301      	movs	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800493e:	e7b6      	b.n	80048ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004940:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <xTaskIncrementTick+0x168>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	4915      	ldr	r1, [pc, #84]	@ (800499c <xTaskIncrementTick+0x164>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d901      	bls.n	800495c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800495c:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <xTaskIncrementTick+0x16c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e004      	b.n	8004974 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800496a:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <xTaskIncrementTick+0x170>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <xTaskIncrementTick+0x170>)
 8004972:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004974:	697b      	ldr	r3, [r7, #20]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000574 	.word	0x20000574
 8004984:	20000550 	.word	0x20000550
 8004988:	20000504 	.word	0x20000504
 800498c:	20000508 	.word	0x20000508
 8004990:	20000564 	.word	0x20000564
 8004994:	2000056c 	.word	0x2000056c
 8004998:	20000554 	.word	0x20000554
 800499c:	20000450 	.word	0x20000450
 80049a0:	2000044c 	.word	0x2000044c
 80049a4:	20000560 	.word	0x20000560
 80049a8:	2000055c 	.word	0x2000055c

080049ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049b2:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <vTaskSwitchContext+0xa4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <vTaskSwitchContext+0xa8>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c0:	e040      	b.n	8004a44 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80049c2:	4b24      	ldr	r3, [pc, #144]	@ (8004a54 <vTaskSwitchContext+0xa8>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b23      	ldr	r3, [pc, #140]	@ (8004a58 <vTaskSwitchContext+0xac>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	f1c3 031f 	rsb	r3, r3, #31
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	491f      	ldr	r1, [pc, #124]	@ (8004a5c <vTaskSwitchContext+0xb0>)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <vTaskSwitchContext+0x5e>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	607b      	str	r3, [r7, #4]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <vTaskSwitchContext+0x5a>
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a11      	ldr	r2, [pc, #68]	@ (8004a5c <vTaskSwitchContext+0xb0>)
 8004a16:	4413      	add	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d104      	bne.n	8004a3a <vTaskSwitchContext+0x8e>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a07      	ldr	r2, [pc, #28]	@ (8004a60 <vTaskSwitchContext+0xb4>)
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	20000574 	.word	0x20000574
 8004a54:	20000560 	.word	0x20000560
 8004a58:	20000554 	.word	0x20000554
 8004a5c:	20000450 	.word	0x20000450
 8004a60:	2000044c 	.word	0x2000044c

08004a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a8c:	4b07      	ldr	r3, [pc, #28]	@ (8004aac <vTaskPlaceOnEventList+0x48>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3318      	adds	r3, #24
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fe fdee 	bl	8003676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6838      	ldr	r0, [r7, #0]
 8004a9e:	f000 fc5d 	bl	800535c <prvAddCurrentTaskToDelayedList>
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000044c 	.word	0x2000044c

08004ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60fb      	str	r3, [r7, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3318      	adds	r3, #24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fe00 	bl	80036e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b60 <xTaskRemoveFromEventList+0xb0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11c      	bne.n	8004b2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe fdf7 	bl	80036e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	2201      	movs	r2, #1
 8004b00:	409a      	lsls	r2, r3
 8004b02:	4b18      	ldr	r3, [pc, #96]	@ (8004b64 <xTaskRemoveFromEventList+0xb4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <xTaskRemoveFromEventList+0xb4>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4a13      	ldr	r2, [pc, #76]	@ (8004b68 <xTaskRemoveFromEventList+0xb8>)
 8004b1a:	441a      	add	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fd83 	bl	800362e <vListInsertEnd>
 8004b28:	e005      	b.n	8004b36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	4619      	mov	r1, r3
 8004b30:	480e      	ldr	r0, [pc, #56]	@ (8004b6c <xTaskRemoveFromEventList+0xbc>)
 8004b32:	f7fe fd7c 	bl	800362e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b70 <xTaskRemoveFromEventList+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d905      	bls.n	8004b50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <xTaskRemoveFromEventList+0xc4>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e001      	b.n	8004b54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b54:	697b      	ldr	r3, [r7, #20]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000574 	.word	0x20000574
 8004b64:	20000554 	.word	0x20000554
 8004b68:	20000450 	.word	0x20000450
 8004b6c:	2000050c 	.word	0x2000050c
 8004b70:	2000044c 	.word	0x2000044c
 8004b74:	20000560 	.word	0x20000560

08004b78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <vTaskInternalSetTimeOutState+0x24>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <vTaskInternalSetTimeOutState+0x28>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	605a      	str	r2, [r3, #4]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000564 	.word	0x20000564
 8004ba0:	20000550 	.word	0x20000550

08004ba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	613b      	str	r3, [r7, #16]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10b      	bne.n	8004bea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004bea:	f000 fd4d 	bl	8005688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bee:	4b1d      	ldr	r3, [pc, #116]	@ (8004c64 <xTaskCheckForTimeOut+0xc0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d102      	bne.n	8004c0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e023      	b.n	8004c56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <xTaskCheckForTimeOut+0xc4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d007      	beq.n	8004c2a <xTaskCheckForTimeOut+0x86>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d302      	bcc.n	8004c2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e015      	b.n	8004c56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d20b      	bcs.n	8004c4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff99 	bl	8004b78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e004      	b.n	8004c56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c56:	f000 fd49 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000550 	.word	0x20000550
 8004c68:	20000564 	.word	0x20000564

08004c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c70:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <vTaskMissedYield+0x14>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000560 	.word	0x20000560

08004c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c8c:	f000 f852 	bl	8004d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c90:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <prvIdleTask+0x28>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d9f9      	bls.n	8004c8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <prvIdleTask+0x2c>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ca8:	e7f0      	b.n	8004c8c <prvIdleTask+0x8>
 8004caa:	bf00      	nop
 8004cac:	20000450 	.word	0x20000450
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	e00c      	b.n	8004cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a12      	ldr	r2, [pc, #72]	@ (8004d14 <prvInitialiseTaskLists+0x60>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fc80 	bl	80035d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d9ef      	bls.n	8004cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce0:	480d      	ldr	r0, [pc, #52]	@ (8004d18 <prvInitialiseTaskLists+0x64>)
 8004ce2:	f7fe fc77 	bl	80035d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ce6:	480d      	ldr	r0, [pc, #52]	@ (8004d1c <prvInitialiseTaskLists+0x68>)
 8004ce8:	f7fe fc74 	bl	80035d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cec:	480c      	ldr	r0, [pc, #48]	@ (8004d20 <prvInitialiseTaskLists+0x6c>)
 8004cee:	f7fe fc71 	bl	80035d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cf2:	480c      	ldr	r0, [pc, #48]	@ (8004d24 <prvInitialiseTaskLists+0x70>)
 8004cf4:	f7fe fc6e 	bl	80035d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cf8:	480b      	ldr	r0, [pc, #44]	@ (8004d28 <prvInitialiseTaskLists+0x74>)
 8004cfa:	f7fe fc6b 	bl	80035d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004d2c <prvInitialiseTaskLists+0x78>)
 8004d00:	4a05      	ldr	r2, [pc, #20]	@ (8004d18 <prvInitialiseTaskLists+0x64>)
 8004d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <prvInitialiseTaskLists+0x7c>)
 8004d06:	4a05      	ldr	r2, [pc, #20]	@ (8004d1c <prvInitialiseTaskLists+0x68>)
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000450 	.word	0x20000450
 8004d18:	200004dc 	.word	0x200004dc
 8004d1c:	200004f0 	.word	0x200004f0
 8004d20:	2000050c 	.word	0x2000050c
 8004d24:	20000520 	.word	0x20000520
 8004d28:	20000538 	.word	0x20000538
 8004d2c:	20000504 	.word	0x20000504
 8004d30:	20000508 	.word	0x20000508

08004d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d3a:	e019      	b.n	8004d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d3c:	f000 fca4 	bl	8005688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d40:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <prvCheckTasksWaitingTermination+0x50>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fccb 	bl	80036e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <prvCheckTasksWaitingTermination+0x54>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	4a0b      	ldr	r2, [pc, #44]	@ (8004d88 <prvCheckTasksWaitingTermination+0x54>)
 8004d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <prvCheckTasksWaitingTermination+0x58>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <prvCheckTasksWaitingTermination+0x58>)
 8004d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d66:	f000 fcc1 	bl	80056ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f810 	bl	8004d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <prvCheckTasksWaitingTermination+0x58>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e1      	bne.n	8004d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000520 	.word	0x20000520
 8004d88:	2000054c 	.word	0x2000054c
 8004d8c:	20000534 	.word	0x20000534

08004d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fe5e 	bl	8005a68 <vPortFree>
				vPortFree( pxTCB );
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fe5b 	bl	8005a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db2:	e019      	b.n	8004de8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d103      	bne.n	8004dc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fe52 	bl	8005a68 <vPortFree>
	}
 8004dc4:	e010      	b.n	8004de8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d00b      	beq.n	8004de8 <prvDeleteTCB+0x58>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <prvDeleteTCB+0x54>
	}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e00:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e08:	e008      	b.n	8004e1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0a:	4b07      	ldr	r3, [pc, #28]	@ (8004e28 <prvResetNextTaskUnblockTime+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a04      	ldr	r2, [pc, #16]	@ (8004e2c <prvResetNextTaskUnblockTime+0x3c>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	20000504 	.word	0x20000504
 8004e2c:	2000056c 	.word	0x2000056c

08004e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e36:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <xTaskGetSchedulerState+0x34>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e008      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e44:	4b08      	ldr	r3, [pc, #32]	@ (8004e68 <xTaskGetSchedulerState+0x38>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	e001      	b.n	8004e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e56:	687b      	ldr	r3, [r7, #4]
	}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000558 	.word	0x20000558
 8004e68:	20000574 	.word	0x20000574

08004e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d070      	beq.n	8004f64 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e82:	4b3b      	ldr	r3, [pc, #236]	@ (8004f70 <xTaskPriorityDisinherit+0x104>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d00b      	beq.n	8004ea4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60bb      	str	r3, [r7, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d044      	beq.n	8004f64 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d140      	bne.n	8004f64 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fbfe 	bl	80036e8 <uxListRemove>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d115      	bne.n	8004f1e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	491f      	ldr	r1, [pc, #124]	@ (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xTaskPriorityDisinherit+0xb2>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43da      	mvns	r2, r3
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <xTaskPriorityDisinherit+0x10c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <xTaskPriorityDisinherit+0x10c>)
 8004f1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	f1c3 0207 	rsb	r2, r3, #7
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	2201      	movs	r2, #1
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <xTaskPriorityDisinherit+0x10c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	4a0d      	ldr	r2, [pc, #52]	@ (8004f78 <xTaskPriorityDisinherit+0x10c>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <xTaskPriorityDisinherit+0x108>)
 8004f52:	441a      	add	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fb67 	bl	800362e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f64:	697b      	ldr	r3, [r7, #20]
	}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	2000044c 	.word	0x2000044c
 8004f74:	20000450 	.word	0x20000450
 8004f78:	20000554 	.word	0x20000554

08004f7c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004f8a:	f000 fb7d 	bl	8005688 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <xTaskNotifyWait+0xac>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d01a      	beq.n	8004fd2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004f9c:	4b22      	ldr	r3, [pc, #136]	@ (8005028 <xTaskNotifyWait+0xac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	43d2      	mvns	r2, r2
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004faa:	4b1f      	ldr	r3, [pc, #124]	@ (8005028 <xTaskNotifyWait+0xac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fba:	2101      	movs	r1, #1
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f000 f9cd 	bl	800535c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <xTaskNotifyWait+0xb0>)
 8004fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004fd2:	f000 fb8b 	bl	80056ec <vPortExitCritical>

		taskENTER_CRITICAL();
 8004fd6:	f000 fb57 	bl	8005688 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004fe0:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <xTaskNotifyWait+0xac>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004fea:	4b0f      	ldr	r3, [pc, #60]	@ (8005028 <xTaskNotifyWait+0xac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d002      	beq.n	8004ffe <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e008      	b.n	8005010 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8005028 <xTaskNotifyWait+0xac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	43d2      	mvns	r2, r2
 8005008:	400a      	ands	r2, r1
 800500a:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <xTaskNotifyWait+0xac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800501a:	f000 fb67 	bl	80056ec <vPortExitCritical>

		return xReturn;
 800501e:	697b      	ldr	r3, [r7, #20]
	}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	2000044c 	.word	0x2000044c
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	@ 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005040:	2301      	movs	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <xTaskGenericNotify+0x32>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	61bb      	str	r3, [r7, #24]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005066:	f000 fb0f 	bl	8005688 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800507e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d827      	bhi.n	80050de <xTaskGenericNotify+0xae>
 800508e:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <xTaskGenericNotify+0x64>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	08005101 	.word	0x08005101
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050b7 	.word	0x080050b7
 80050a0:	080050c3 	.word	0x080050c3
 80050a4:	080050cb 	.word	0x080050cb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80050b4:	e027      	b.n	8005106 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80050c0:	e021      	b.n	8005106 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80050c8:	e01d      	b.n	8005106 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d003      	beq.n	80050d8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80050d6:	e016      	b.n	8005106 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80050dc:	e013      	b.n	8005106 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d00d      	beq.n	8005104 <xTaskGenericNotify+0xd4>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	617b      	str	r3, [r7, #20]
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <xTaskGenericNotify+0xcc>
					break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <xTaskGenericNotify+0xd6>

					break;
 8005104:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d13a      	bne.n	8005182 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fae9 	bl	80036e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	4b1c      	ldr	r3, [pc, #112]	@ (8005190 <xTaskGenericNotify+0x160>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	4a1a      	ldr	r2, [pc, #104]	@ (8005190 <xTaskGenericNotify+0x160>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <xTaskGenericNotify+0x164>)
 8005136:	441a      	add	r2, r3
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fa75 	bl	800362e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <xTaskGenericNotify+0x134>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	613b      	str	r3, [r7, #16]
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	e7fd      	b.n	8005160 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <xTaskGenericNotify+0x168>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	429a      	cmp	r2, r3
 8005170:	d907      	bls.n	8005182 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <xTaskGenericNotify+0x16c>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005182:	f000 fab3 	bl	80056ec <vPortExitCritical>

		return xReturn;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005188:	4618      	mov	r0, r3
 800518a:	3728      	adds	r7, #40	@ 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000554 	.word	0x20000554
 8005194:	20000450 	.word	0x20000450
 8005198:	2000044c 	.word	0x2000044c
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08e      	sub	sp, #56	@ 0x38
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80051b0:	2301      	movs	r3, #1
 80051b2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051d2:	f000 fb39 	bl	8005848 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80051da:	f3ef 8211 	mrs	r2, BASEPRI
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	623a      	str	r2, [r7, #32]
 80051f0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80051f2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2202      	movs	r2, #2
 8005212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d829      	bhi.n	8005270 <xTaskGenericNotifyFromISR+0xd0>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <xTaskGenericNotifyFromISR+0x84>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005293 	.word	0x08005293
 8005228:	08005239 	.word	0x08005239
 800522c:	08005247 	.word	0x08005247
 8005230:	08005253 	.word	0x08005253
 8005234:	0800525b 	.word	0x0800525b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	431a      	orrs	r2, r3
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005244:	e028      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005250:	e022      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005258:	e01e      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800525a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800525e:	2b02      	cmp	r3, #2
 8005260:	d003      	beq.n	800526a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005268:	e016      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800526a:	2300      	movs	r3, #0
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800526e:	e013      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d00d      	beq.n	8005296 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	61bb      	str	r3, [r7, #24]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xTaskGenericNotifyFromISR+0xee>
					break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8005296:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005298:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800529c:	2b01      	cmp	r3, #1
 800529e:	d146      	bne.n	800532e <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	617b      	str	r3, [r7, #20]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052c0:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <xTaskGenericNotifyFromISR+0x1a4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11c      	bne.n	8005302 <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	3304      	adds	r3, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe fa0b 	bl	80036e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <xTaskGenericNotifyFromISR+0x1a8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <xTaskGenericNotifyFromISR+0x1a8>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a16      	ldr	r2, [pc, #88]	@ (800534c <xTaskGenericNotifyFromISR+0x1ac>)
 80052f2:	441a      	add	r2, r3
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe f997 	bl	800362e <vListInsertEnd>
 8005300:	e005      	b.n	800530e <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	3318      	adds	r3, #24
 8005306:	4619      	mov	r1, r3
 8005308:	4811      	ldr	r0, [pc, #68]	@ (8005350 <xTaskGenericNotifyFromISR+0x1b0>)
 800530a:	f7fe f990 	bl	800362e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <xTaskGenericNotifyFromISR+0x1b4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	429a      	cmp	r2, r3
 800531a:	d908      	bls.n	800532e <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800531c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <xTaskGenericNotifyFromISR+0x1b8>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005330:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f383 8811 	msr	BASEPRI, r3
}
 8005338:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800533c:	4618      	mov	r0, r3
 800533e:	3738      	adds	r7, #56	@ 0x38
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000574 	.word	0x20000574
 8005348:	20000554 	.word	0x20000554
 800534c:	20000450 	.word	0x20000450
 8005350:	2000050c 	.word	0x2000050c
 8005354:	2000044c 	.word	0x2000044c
 8005358:	20000560 	.word	0x20000560

0800535c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005366:	4b29      	ldr	r3, [pc, #164]	@ (800540c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536c:	4b28      	ldr	r3, [pc, #160]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe f9b8 	bl	80036e8 <uxListRemove>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800537e:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	2201      	movs	r2, #1
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	4b21      	ldr	r3, [pc, #132]	@ (8005414 <prvAddCurrentTaskToDelayedList+0xb8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	4a20      	ldr	r2, [pc, #128]	@ (8005414 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005394:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d10a      	bne.n	80053b4 <prvAddCurrentTaskToDelayedList+0x58>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	481a      	ldr	r0, [pc, #104]	@ (8005418 <prvAddCurrentTaskToDelayedList+0xbc>)
 80053ae:	f7fe f93e 	bl	800362e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053b2:	e026      	b.n	8005402 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053bc:	4b14      	ldr	r3, [pc, #80]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d209      	bcs.n	80053e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <prvAddCurrentTaskToDelayedList+0xc0>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe f94c 	bl	8003676 <vListInsert>
}
 80053de:	e010      	b.n	8005402 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005420 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe f942 	bl	8003676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d202      	bcs.n	8005402 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053fc:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6013      	str	r3, [r2, #0]
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000550 	.word	0x20000550
 8005410:	2000044c 	.word	0x2000044c
 8005414:	20000554 	.word	0x20000554
 8005418:	20000538 	.word	0x20000538
 800541c:	20000508 	.word	0x20000508
 8005420:	20000504 	.word	0x20000504
 8005424:	2000056c 	.word	0x2000056c

08005428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3b04      	subs	r3, #4
 8005438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b04      	subs	r3, #4
 8005446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b04      	subs	r3, #4
 8005456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005458:	4a0c      	ldr	r2, [pc, #48]	@ (800548c <pxPortInitialiseStack+0x64>)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3b14      	subs	r3, #20
 8005462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3b04      	subs	r3, #4
 800546e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f06f 0202 	mvn.w	r2, #2
 8005476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3b20      	subs	r3, #32
 800547c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800547e:	68fb      	ldr	r3, [r7, #12]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	08005491 	.word	0x08005491

08005490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <prvTaskExitError+0x58>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d00b      	beq.n	80054bc <prvTaskExitError+0x2c>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <prvTaskExitError+0x28>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60bb      	str	r3, [r7, #8]
}
 80054ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054d0:	bf00      	nop
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0fc      	beq.n	80054d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c
 80054ec:	00000000 	.word	0x00000000

080054f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <pxCurrentTCBConst2>)
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	6808      	ldr	r0, [r1, #0]
 80054f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fa:	f380 8809 	msr	PSP, r0
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f380 8811 	msr	BASEPRI, r0
 800550a:	4770      	bx	lr
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst2>:
 8005510:	2000044c 	.word	0x2000044c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005518:	4808      	ldr	r0, [pc, #32]	@ (800553c <prvPortStartFirstTask+0x24>)
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	f380 8808 	msr	MSP, r0
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8814 	msr	CONTROL, r0
 800552a:	b662      	cpsie	i
 800552c:	b661      	cpsie	f
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	df00      	svc	0
 8005538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800553a:	bf00      	nop
 800553c:	e000ed08 	.word	0xe000ed08

08005540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005546:	4b47      	ldr	r3, [pc, #284]	@ (8005664 <xPortStartScheduler+0x124>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a47      	ldr	r2, [pc, #284]	@ (8005668 <xPortStartScheduler+0x128>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10b      	bne.n	8005568 <xPortStartScheduler+0x28>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005568:	4b3e      	ldr	r3, [pc, #248]	@ (8005664 <xPortStartScheduler+0x124>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3f      	ldr	r2, [pc, #252]	@ (800566c <xPortStartScheduler+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d10b      	bne.n	800558a <xPortStartScheduler+0x4a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <xPortStartScheduler+0x130>)
 800558c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	22ff      	movs	r2, #255	@ 0xff
 800559a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <xPortStartScheduler+0x134>)
 80055b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055b2:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <xPortStartScheduler+0x138>)
 80055b4:	2207      	movs	r2, #7
 80055b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055b8:	e009      	b.n	80055ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80055ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <xPortStartScheduler+0x138>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3b01      	subs	r3, #1
 80055c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <xPortStartScheduler+0x138>)
 80055c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b80      	cmp	r3, #128	@ 0x80
 80055d8:	d0ef      	beq.n	80055ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <xPortStartScheduler+0x138>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f1c3 0307 	rsb	r3, r3, #7
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d00b      	beq.n	80055fe <xPortStartScheduler+0xbe>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <xPortStartScheduler+0x138>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <xPortStartScheduler+0x138>)
 8005606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005608:	4b1b      	ldr	r3, [pc, #108]	@ (8005678 <xPortStartScheduler+0x138>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <xPortStartScheduler+0x138>)
 8005612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800561c:	4b17      	ldr	r3, [pc, #92]	@ (800567c <xPortStartScheduler+0x13c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a16      	ldr	r2, [pc, #88]	@ (800567c <xPortStartScheduler+0x13c>)
 8005622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005628:	4b14      	ldr	r3, [pc, #80]	@ (800567c <xPortStartScheduler+0x13c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a13      	ldr	r2, [pc, #76]	@ (800567c <xPortStartScheduler+0x13c>)
 800562e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005634:	f000 f8da 	bl	80057ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005638:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <xPortStartScheduler+0x140>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800563e:	f000 f8f9 	bl	8005834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005642:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <xPortStartScheduler+0x144>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a0f      	ldr	r2, [pc, #60]	@ (8005684 <xPortStartScheduler+0x144>)
 8005648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800564c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800564e:	f7ff ff63 	bl	8005518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005652:	f7ff f9ab 	bl	80049ac <vTaskSwitchContext>
	prvTaskExitError();
 8005656:	f7ff ff1b 	bl	8005490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed00 	.word	0xe000ed00
 8005668:	410fc271 	.word	0x410fc271
 800566c:	410fc270 	.word	0x410fc270
 8005670:	e000e400 	.word	0xe000e400
 8005674:	20000578 	.word	0x20000578
 8005678:	2000057c 	.word	0x2000057c
 800567c:	e000ed20 	.word	0xe000ed20
 8005680:	2000000c 	.word	0x2000000c
 8005684:	e000ef34 	.word	0xe000ef34

08005688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <vPortEnterCritical+0x5c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <vPortEnterCritical+0x5c>)
 80056aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056ac:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <vPortEnterCritical+0x5c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d110      	bne.n	80056d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <vPortEnterCritical+0x60>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	603b      	str	r3, [r7, #0]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <vPortEnterCritical+0x4a>
	}
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056f2:	4b12      	ldr	r3, [pc, #72]	@ (800573c <vPortExitCritical+0x50>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <vPortExitCritical+0x26>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <vPortExitCritical+0x50>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3b01      	subs	r3, #1
 8005718:	4a08      	ldr	r2, [pc, #32]	@ (800573c <vPortExitCritical+0x50>)
 800571a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800571c:	4b07      	ldr	r3, [pc, #28]	@ (800573c <vPortExitCritical+0x50>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <vPortExitCritical+0x44>
 8005724:	2300      	movs	r3, #0
 8005726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f383 8811 	msr	BASEPRI, r3
}
 800572e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	2000000c 	.word	0x2000000c

08005740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005740:	f3ef 8009 	mrs	r0, PSP
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <pxCurrentTCBConst>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	f01e 0f10 	tst.w	lr, #16
 8005750:	bf08      	it	eq
 8005752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	6010      	str	r0, [r2, #0]
 800575c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005764:	f380 8811 	msr	BASEPRI, r0
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f7ff f91c 	bl	80049ac <vTaskSwitchContext>
 8005774:	f04f 0000 	mov.w	r0, #0
 8005778:	f380 8811 	msr	BASEPRI, r0
 800577c:	bc09      	pop	{r0, r3}
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	6808      	ldr	r0, [r1, #0]
 8005782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005786:	f01e 0f10 	tst.w	lr, #16
 800578a:	bf08      	it	eq
 800578c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005790:	f380 8809 	msr	PSP, r0
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w

080057a0 <pxCurrentTCBConst>:
 80057a0:	2000044c 	.word	0x2000044c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop

080057a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	607b      	str	r3, [r7, #4]
}
 80057c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057c2:	f7ff f839 	bl	8004838 <xTaskIncrementTick>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057cc:	4b06      	ldr	r3, [pc, #24]	@ (80057e8 <SysTick_Handler+0x40>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	2300      	movs	r3, #0
 80057d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f383 8811 	msr	BASEPRI, r3
}
 80057de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <vPortSetupTimerInterrupt+0x34>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <vPortSetupTimerInterrupt+0x38>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <vPortSetupTimerInterrupt+0x3c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <vPortSetupTimerInterrupt+0x40>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	099b      	lsrs	r3, r3, #6
 8005808:	4a09      	ldr	r2, [pc, #36]	@ (8005830 <vPortSetupTimerInterrupt+0x44>)
 800580a:	3b01      	subs	r3, #1
 800580c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800580e:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <vPortSetupTimerInterrupt+0x34>)
 8005810:	2207      	movs	r2, #7
 8005812:	601a      	str	r2, [r3, #0]
}
 8005814:	bf00      	nop
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	e000e010 	.word	0xe000e010
 8005824:	e000e018 	.word	0xe000e018
 8005828:	20000000 	.word	0x20000000
 800582c:	10624dd3 	.word	0x10624dd3
 8005830:	e000e014 	.word	0xe000e014

08005834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005844 <vPortEnableVFP+0x10>
 8005838:	6801      	ldr	r1, [r0, #0]
 800583a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800583e:	6001      	str	r1, [r0, #0]
 8005840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005842:	bf00      	nop
 8005844:	e000ed88 	.word	0xe000ed88

08005848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800584e:	f3ef 8305 	mrs	r3, IPSR
 8005852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d915      	bls.n	8005886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800585a:	4a18      	ldr	r2, [pc, #96]	@ (80058bc <vPortValidateInterruptPriority+0x74>)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005864:	4b16      	ldr	r3, [pc, #88]	@ (80058c0 <vPortValidateInterruptPriority+0x78>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	7afa      	ldrb	r2, [r7, #11]
 800586a:	429a      	cmp	r2, r3
 800586c:	d20b      	bcs.n	8005886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005886:	4b0f      	ldr	r3, [pc, #60]	@ (80058c4 <vPortValidateInterruptPriority+0x7c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800588e:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <vPortValidateInterruptPriority+0x80>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d90b      	bls.n	80058ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	603b      	str	r3, [r7, #0]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <vPortValidateInterruptPriority+0x62>
	}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	e000e3f0 	.word	0xe000e3f0
 80058c0:	20000578 	.word	0x20000578
 80058c4:	e000ed0c 	.word	0xe000ed0c
 80058c8:	2000057c 	.word	0x2000057c

080058cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	@ 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058d8:	f7fe ff02 	bl	80046e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005a50 <pvPortMalloc+0x184>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058e4:	f000 f924 	bl	8005b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a54 <pvPortMalloc+0x188>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 8095 	bne.w	8005a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80058fc:	2208      	movs	r2, #8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b00      	cmp	r3, #0
 800590c:	d015      	beq.n	800593a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	3308      	adds	r3, #8
 8005916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <pvPortMalloc+0x6e>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	617b      	str	r3, [r7, #20]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d06f      	beq.n	8005a20 <pvPortMalloc+0x154>
 8005940:	4b45      	ldr	r3, [pc, #276]	@ (8005a58 <pvPortMalloc+0x18c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d86a      	bhi.n	8005a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800594a:	4b44      	ldr	r3, [pc, #272]	@ (8005a5c <pvPortMalloc+0x190>)
 800594c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800594e:	4b43      	ldr	r3, [pc, #268]	@ (8005a5c <pvPortMalloc+0x190>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005954:	e004      	b.n	8005960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d903      	bls.n	8005972 <pvPortMalloc+0xa6>
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f1      	bne.n	8005956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005972:	4b37      	ldr	r3, [pc, #220]	@ (8005a50 <pvPortMalloc+0x184>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	429a      	cmp	r2, r3
 800597a:	d051      	beq.n	8005a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2208      	movs	r2, #8
 8005982:	4413      	add	r3, r2
 8005984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	2308      	movs	r3, #8
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	429a      	cmp	r2, r3
 800599c:	d920      	bls.n	80059e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800599e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <pvPortMalloc+0xfc>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	613b      	str	r3, [r7, #16]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059da:	69b8      	ldr	r0, [r7, #24]
 80059dc:	f000 f90a 	bl	8005bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <pvPortMalloc+0x18c>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <pvPortMalloc+0x18c>)
 80059ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <pvPortMalloc+0x18c>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a60 <pvPortMalloc+0x194>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d203      	bcs.n	8005a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059fa:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <pvPortMalloc+0x18c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <pvPortMalloc+0x194>)
 8005a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	4b13      	ldr	r3, [pc, #76]	@ (8005a54 <pvPortMalloc+0x188>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a16:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <pvPortMalloc+0x198>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a11      	ldr	r2, [pc, #68]	@ (8005a64 <pvPortMalloc+0x198>)
 8005a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a20:	f7fe fe6c 	bl	80046fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <pvPortMalloc+0x17a>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60fb      	str	r3, [r7, #12]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <pvPortMalloc+0x176>
	return pvReturn;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3728      	adds	r7, #40	@ 0x28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20004188 	.word	0x20004188
 8005a54:	2000419c 	.word	0x2000419c
 8005a58:	2000418c 	.word	0x2000418c
 8005a5c:	20004180 	.word	0x20004180
 8005a60:	20004190 	.word	0x20004190
 8005a64:	20004194 	.word	0x20004194

08005a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04f      	beq.n	8005b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	4b25      	ldr	r3, [pc, #148]	@ (8005b24 <vPortFree+0xbc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <vPortFree+0x46>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60fb      	str	r3, [r7, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	e7fd      	b.n	8005aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <vPortFree+0x66>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	4b14      	ldr	r3, [pc, #80]	@ (8005b24 <vPortFree+0xbc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01e      	beq.n	8005b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11a      	bne.n	8005b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <vPortFree+0xbc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005af4:	f7fe fdf4 	bl	80046e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <vPortFree+0xc0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	4a09      	ldr	r2, [pc, #36]	@ (8005b28 <vPortFree+0xc0>)
 8005b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f000 f874 	bl	8005bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <vPortFree+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a06      	ldr	r2, [pc, #24]	@ (8005b2c <vPortFree+0xc4>)
 8005b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b16:	f7fe fdf1 	bl	80046fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2000419c 	.word	0x2000419c
 8005b28:	2000418c 	.word	0x2000418c
 8005b2c:	20004198 	.word	0x20004198

08005b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b3c:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <prvHeapInit+0xac>)
 8005b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0307 	bic.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bdc <prvHeapInit+0xac>)
 8005b60:	4413      	add	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <prvHeapInit+0xb0>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <prvHeapInit+0xb0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <prvHeapInit+0xb4>)
 8005b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b92:	4b14      	ldr	r3, [pc, #80]	@ (8005be4 <prvHeapInit+0xb4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b9a:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <prvHeapInit+0xb4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <prvHeapInit+0xb4>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005be8 <prvHeapInit+0xb8>)
 8005bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a09      	ldr	r2, [pc, #36]	@ (8005bec <prvHeapInit+0xbc>)
 8005bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bc8:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <prvHeapInit+0xc0>)
 8005bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005bce:	601a      	str	r2, [r3, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	20000580 	.word	0x20000580
 8005be0:	20004180 	.word	0x20004180
 8005be4:	20004188 	.word	0x20004188
 8005be8:	20004190 	.word	0x20004190
 8005bec:	2000418c 	.word	0x2000418c
 8005bf0:	2000419c 	.word	0x2000419c

08005bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bfc:	4b28      	ldr	r3, [pc, #160]	@ (8005ca0 <prvInsertBlockIntoFreeList+0xac>)
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e002      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x14>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d8f7      	bhi.n	8005c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d108      	bne.n	8005c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d118      	bne.n	8005c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d00d      	beq.n	8005c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e008      	b.n	8005c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e003      	b.n	8005c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d002      	beq.n	8005c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20004180 	.word	0x20004180
 8005ca4:	20004188 	.word	0x20004188

08005ca8 <std>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb6:	6083      	str	r3, [r0, #8]
 8005cb8:	8181      	strh	r1, [r0, #12]
 8005cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cbc:	81c2      	strh	r2, [r0, #14]
 8005cbe:	6183      	str	r3, [r0, #24]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	305c      	adds	r0, #92	@ 0x5c
 8005cc6:	f000 f906 	bl	8005ed6 <memset>
 8005cca:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <std+0x58>)
 8005ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <std+0x5c>)
 8005cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <std+0x60>)
 8005cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <std+0x64>)
 8005cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <std+0x68>)
 8005cdc:	6224      	str	r4, [r4, #32]
 8005cde:	429c      	cmp	r4, r3
 8005ce0:	d006      	beq.n	8005cf0 <std+0x48>
 8005ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ce6:	4294      	cmp	r4, r2
 8005ce8:	d002      	beq.n	8005cf0 <std+0x48>
 8005cea:	33d0      	adds	r3, #208	@ 0xd0
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d105      	bne.n	8005cfc <std+0x54>
 8005cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f000 b966 	b.w	8005fc8 <__retarget_lock_init_recursive>
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	bf00      	nop
 8005d00:	08005e51 	.word	0x08005e51
 8005d04:	08005e73 	.word	0x08005e73
 8005d08:	08005eab 	.word	0x08005eab
 8005d0c:	08005ecf 	.word	0x08005ecf
 8005d10:	200041a0 	.word	0x200041a0

08005d14 <stdio_exit_handler>:
 8005d14:	4a02      	ldr	r2, [pc, #8]	@ (8005d20 <stdio_exit_handler+0xc>)
 8005d16:	4903      	ldr	r1, [pc, #12]	@ (8005d24 <stdio_exit_handler+0x10>)
 8005d18:	4803      	ldr	r0, [pc, #12]	@ (8005d28 <stdio_exit_handler+0x14>)
 8005d1a:	f000 b869 	b.w	8005df0 <_fwalk_sglue>
 8005d1e:	bf00      	nop
 8005d20:	20000010 	.word	0x20000010
 8005d24:	08006885 	.word	0x08006885
 8005d28:	20000020 	.word	0x20000020

08005d2c <cleanup_stdio>:
 8005d2c:	6841      	ldr	r1, [r0, #4]
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <cleanup_stdio+0x34>)
 8005d30:	4299      	cmp	r1, r3
 8005d32:	b510      	push	{r4, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	d001      	beq.n	8005d3c <cleanup_stdio+0x10>
 8005d38:	f000 fda4 	bl	8006884 <_fflush_r>
 8005d3c:	68a1      	ldr	r1, [r4, #8]
 8005d3e:	4b09      	ldr	r3, [pc, #36]	@ (8005d64 <cleanup_stdio+0x38>)
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d002      	beq.n	8005d4a <cleanup_stdio+0x1e>
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fd9d 	bl	8006884 <_fflush_r>
 8005d4a:	68e1      	ldr	r1, [r4, #12]
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <cleanup_stdio+0x3c>)
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	d004      	beq.n	8005d5c <cleanup_stdio+0x30>
 8005d52:	4620      	mov	r0, r4
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	f000 bd94 	b.w	8006884 <_fflush_r>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	bf00      	nop
 8005d60:	200041a0 	.word	0x200041a0
 8005d64:	20004208 	.word	0x20004208
 8005d68:	20004270 	.word	0x20004270

08005d6c <global_stdio_init.part.0>:
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d9c <global_stdio_init.part.0+0x30>)
 8005d70:	4c0b      	ldr	r4, [pc, #44]	@ (8005da0 <global_stdio_init.part.0+0x34>)
 8005d72:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <global_stdio_init.part.0+0x38>)
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	4620      	mov	r0, r4
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2104      	movs	r1, #4
 8005d7c:	f7ff ff94 	bl	8005ca8 <std>
 8005d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d84:	2201      	movs	r2, #1
 8005d86:	2109      	movs	r1, #9
 8005d88:	f7ff ff8e 	bl	8005ca8 <std>
 8005d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d90:	2202      	movs	r2, #2
 8005d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d96:	2112      	movs	r1, #18
 8005d98:	f7ff bf86 	b.w	8005ca8 <std>
 8005d9c:	200042d8 	.word	0x200042d8
 8005da0:	200041a0 	.word	0x200041a0
 8005da4:	08005d15 	.word	0x08005d15

08005da8 <__sfp_lock_acquire>:
 8005da8:	4801      	ldr	r0, [pc, #4]	@ (8005db0 <__sfp_lock_acquire+0x8>)
 8005daa:	f000 b90e 	b.w	8005fca <__retarget_lock_acquire_recursive>
 8005dae:	bf00      	nop
 8005db0:	200042e1 	.word	0x200042e1

08005db4 <__sfp_lock_release>:
 8005db4:	4801      	ldr	r0, [pc, #4]	@ (8005dbc <__sfp_lock_release+0x8>)
 8005db6:	f000 b909 	b.w	8005fcc <__retarget_lock_release_recursive>
 8005dba:	bf00      	nop
 8005dbc:	200042e1 	.word	0x200042e1

08005dc0 <__sinit>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f7ff fff0 	bl	8005da8 <__sfp_lock_acquire>
 8005dc8:	6a23      	ldr	r3, [r4, #32]
 8005dca:	b11b      	cbz	r3, 8005dd4 <__sinit+0x14>
 8005dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd0:	f7ff bff0 	b.w	8005db4 <__sfp_lock_release>
 8005dd4:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <__sinit+0x28>)
 8005dd6:	6223      	str	r3, [r4, #32]
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <__sinit+0x2c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f5      	bne.n	8005dcc <__sinit+0xc>
 8005de0:	f7ff ffc4 	bl	8005d6c <global_stdio_init.part.0>
 8005de4:	e7f2      	b.n	8005dcc <__sinit+0xc>
 8005de6:	bf00      	nop
 8005de8:	08005d2d 	.word	0x08005d2d
 8005dec:	200042d8 	.word	0x200042d8

08005df0 <_fwalk_sglue>:
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4607      	mov	r7, r0
 8005df6:	4688      	mov	r8, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e00:	f1b9 0901 	subs.w	r9, r9, #1
 8005e04:	d505      	bpl.n	8005e12 <_fwalk_sglue+0x22>
 8005e06:	6824      	ldr	r4, [r4, #0]
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d1f7      	bne.n	8005dfc <_fwalk_sglue+0xc>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d907      	bls.n	8005e28 <_fwalk_sglue+0x38>
 8005e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	d003      	beq.n	8005e28 <_fwalk_sglue+0x38>
 8005e20:	4629      	mov	r1, r5
 8005e22:	4638      	mov	r0, r7
 8005e24:	47c0      	blx	r8
 8005e26:	4306      	orrs	r6, r0
 8005e28:	3568      	adds	r5, #104	@ 0x68
 8005e2a:	e7e9      	b.n	8005e00 <_fwalk_sglue+0x10>

08005e2c <iprintf>:
 8005e2c:	b40f      	push	{r0, r1, r2, r3}
 8005e2e:	b507      	push	{r0, r1, r2, lr}
 8005e30:	4906      	ldr	r1, [pc, #24]	@ (8005e4c <iprintf+0x20>)
 8005e32:	ab04      	add	r3, sp, #16
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3a:	6881      	ldr	r1, [r0, #8]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	f000 f9f7 	bl	8006230 <_vfiprintf_r>
 8005e42:	b003      	add	sp, #12
 8005e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e48:	b004      	add	sp, #16
 8005e4a:	4770      	bx	lr
 8005e4c:	2000001c 	.word	0x2000001c

08005e50 <__sread>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	460c      	mov	r4, r1
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	f000 f868 	bl	8005f2c <_read_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	bfab      	itete	ge
 8005e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e62:	89a3      	ldrhlt	r3, [r4, #12]
 8005e64:	181b      	addge	r3, r3, r0
 8005e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e6a:	bfac      	ite	ge
 8005e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e6e:	81a3      	strhlt	r3, [r4, #12]
 8005e70:	bd10      	pop	{r4, pc}

08005e72 <__swrite>:
 8005e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e76:	461f      	mov	r7, r3
 8005e78:	898b      	ldrh	r3, [r1, #12]
 8005e7a:	05db      	lsls	r3, r3, #23
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	4616      	mov	r6, r2
 8005e82:	d505      	bpl.n	8005e90 <__swrite+0x1e>
 8005e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e88:	2302      	movs	r3, #2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f000 f83c 	bl	8005f08 <_lseek_r>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	f000 b853 	b.w	8005f50 <_write_r>

08005eaa <__sseek>:
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	460c      	mov	r4, r1
 8005eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb2:	f000 f829 	bl	8005f08 <_lseek_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	bf15      	itete	ne
 8005ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ec6:	81a3      	strheq	r3, [r4, #12]
 8005ec8:	bf18      	it	ne
 8005eca:	81a3      	strhne	r3, [r4, #12]
 8005ecc:	bd10      	pop	{r4, pc}

08005ece <__sclose>:
 8005ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed2:	f000 b809 	b.w	8005ee8 <_close_r>

08005ed6 <memset>:
 8005ed6:	4402      	add	r2, r0
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d100      	bne.n	8005ee0 <memset+0xa>
 8005ede:	4770      	bx	lr
 8005ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee4:	e7f9      	b.n	8005eda <memset+0x4>
	...

08005ee8 <_close_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d06      	ldr	r5, [pc, #24]	@ (8005f04 <_close_r+0x1c>)
 8005eec:	2300      	movs	r3, #0
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	f7fb fa81 	bl	80013fa <_close>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_close_r+0x1a>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_close_r+0x1a>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	200042dc 	.word	0x200042dc

08005f08 <_lseek_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d07      	ldr	r5, [pc, #28]	@ (8005f28 <_lseek_r+0x20>)
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4608      	mov	r0, r1
 8005f10:	4611      	mov	r1, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	602a      	str	r2, [r5, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f7fb fa96 	bl	8001448 <_lseek>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_lseek_r+0x1e>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_lseek_r+0x1e>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	200042dc 	.word	0x200042dc

08005f2c <_read_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d07      	ldr	r5, [pc, #28]	@ (8005f4c <_read_r+0x20>)
 8005f30:	4604      	mov	r4, r0
 8005f32:	4608      	mov	r0, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fb fa40 	bl	80013c0 <_read>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_read_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_read_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	200042dc 	.word	0x200042dc

08005f50 <_write_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	@ (8005f70 <_write_r+0x20>)
 8005f54:	4604      	mov	r4, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fa fe1e 	bl	8000ba0 <_write>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_write_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_write_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200042dc 	.word	0x200042dc

08005f74 <__errno>:
 8005f74:	4b01      	ldr	r3, [pc, #4]	@ (8005f7c <__errno+0x8>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	2000001c 	.word	0x2000001c

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4d0d      	ldr	r5, [pc, #52]	@ (8005fb8 <__libc_init_array+0x38>)
 8005f84:	4c0d      	ldr	r4, [pc, #52]	@ (8005fbc <__libc_init_array+0x3c>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	4d0b      	ldr	r5, [pc, #44]	@ (8005fc0 <__libc_init_array+0x40>)
 8005f92:	4c0c      	ldr	r4, [pc, #48]	@ (8005fc4 <__libc_init_array+0x44>)
 8005f94:	f000 fdc6 	bl	8006b24 <_init>
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	08006d2c 	.word	0x08006d2c
 8005fbc:	08006d2c 	.word	0x08006d2c
 8005fc0:	08006d2c 	.word	0x08006d2c
 8005fc4:	08006d30 	.word	0x08006d30

08005fc8 <__retarget_lock_init_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_acquire_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <__retarget_lock_release_recursive>:
 8005fcc:	4770      	bx	lr

08005fce <memcpy>:
 8005fce:	440a      	add	r2, r1
 8005fd0:	4291      	cmp	r1, r2
 8005fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd6:	d100      	bne.n	8005fda <memcpy+0xc>
 8005fd8:	4770      	bx	lr
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe4:	4291      	cmp	r1, r2
 8005fe6:	d1f9      	bne.n	8005fdc <memcpy+0xe>
 8005fe8:	bd10      	pop	{r4, pc}
	...

08005fec <_free_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4605      	mov	r5, r0
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d041      	beq.n	8006078 <_free_r+0x8c>
 8005ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff8:	1f0c      	subs	r4, r1, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfb8      	it	lt
 8005ffe:	18e4      	addlt	r4, r4, r3
 8006000:	f000 f8e0 	bl	80061c4 <__malloc_lock>
 8006004:	4a1d      	ldr	r2, [pc, #116]	@ (800607c <_free_r+0x90>)
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	b933      	cbnz	r3, 8006018 <_free_r+0x2c>
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	6014      	str	r4, [r2, #0]
 800600e:	4628      	mov	r0, r5
 8006010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006014:	f000 b8dc 	b.w	80061d0 <__malloc_unlock>
 8006018:	42a3      	cmp	r3, r4
 800601a:	d908      	bls.n	800602e <_free_r+0x42>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	1821      	adds	r1, r4, r0
 8006020:	428b      	cmp	r3, r1
 8006022:	bf01      	itttt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	1809      	addeq	r1, r1, r0
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	e7ed      	b.n	800600a <_free_r+0x1e>
 800602e:	461a      	mov	r2, r3
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b10b      	cbz	r3, 8006038 <_free_r+0x4c>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d9fa      	bls.n	800602e <_free_r+0x42>
 8006038:	6811      	ldr	r1, [r2, #0]
 800603a:	1850      	adds	r0, r2, r1
 800603c:	42a0      	cmp	r0, r4
 800603e:	d10b      	bne.n	8006058 <_free_r+0x6c>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	4401      	add	r1, r0
 8006044:	1850      	adds	r0, r2, r1
 8006046:	4283      	cmp	r3, r0
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	d1e0      	bne.n	800600e <_free_r+0x22>
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	6053      	str	r3, [r2, #4]
 8006052:	4408      	add	r0, r1
 8006054:	6010      	str	r0, [r2, #0]
 8006056:	e7da      	b.n	800600e <_free_r+0x22>
 8006058:	d902      	bls.n	8006060 <_free_r+0x74>
 800605a:	230c      	movs	r3, #12
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	e7d6      	b.n	800600e <_free_r+0x22>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	1821      	adds	r1, r4, r0
 8006064:	428b      	cmp	r3, r1
 8006066:	bf04      	itt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	bf04      	itt	eq
 8006070:	1809      	addeq	r1, r1, r0
 8006072:	6021      	streq	r1, [r4, #0]
 8006074:	6054      	str	r4, [r2, #4]
 8006076:	e7ca      	b.n	800600e <_free_r+0x22>
 8006078:	bd38      	pop	{r3, r4, r5, pc}
 800607a:	bf00      	nop
 800607c:	200042e8 	.word	0x200042e8

08006080 <sbrk_aligned>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4e0f      	ldr	r6, [pc, #60]	@ (80060c0 <sbrk_aligned+0x40>)
 8006084:	460c      	mov	r4, r1
 8006086:	6831      	ldr	r1, [r6, #0]
 8006088:	4605      	mov	r5, r0
 800608a:	b911      	cbnz	r1, 8006092 <sbrk_aligned+0x12>
 800608c:	f000 fcb6 	bl	80069fc <_sbrk_r>
 8006090:	6030      	str	r0, [r6, #0]
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f000 fcb1 	bl	80069fc <_sbrk_r>
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	d103      	bne.n	80060a6 <sbrk_aligned+0x26>
 800609e:	f04f 34ff 	mov.w	r4, #4294967295
 80060a2:	4620      	mov	r0, r4
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	1cc4      	adds	r4, r0, #3
 80060a8:	f024 0403 	bic.w	r4, r4, #3
 80060ac:	42a0      	cmp	r0, r4
 80060ae:	d0f8      	beq.n	80060a2 <sbrk_aligned+0x22>
 80060b0:	1a21      	subs	r1, r4, r0
 80060b2:	4628      	mov	r0, r5
 80060b4:	f000 fca2 	bl	80069fc <_sbrk_r>
 80060b8:	3001      	adds	r0, #1
 80060ba:	d1f2      	bne.n	80060a2 <sbrk_aligned+0x22>
 80060bc:	e7ef      	b.n	800609e <sbrk_aligned+0x1e>
 80060be:	bf00      	nop
 80060c0:	200042e4 	.word	0x200042e4

080060c4 <_malloc_r>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	1ccd      	adds	r5, r1, #3
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	4606      	mov	r6, r0
 80060da:	db01      	blt.n	80060e0 <_malloc_r+0x1c>
 80060dc:	42a9      	cmp	r1, r5
 80060de:	d904      	bls.n	80060ea <_malloc_r+0x26>
 80060e0:	230c      	movs	r3, #12
 80060e2:	6033      	str	r3, [r6, #0]
 80060e4:	2000      	movs	r0, #0
 80060e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061c0 <_malloc_r+0xfc>
 80060ee:	f000 f869 	bl	80061c4 <__malloc_lock>
 80060f2:	f8d8 3000 	ldr.w	r3, [r8]
 80060f6:	461c      	mov	r4, r3
 80060f8:	bb44      	cbnz	r4, 800614c <_malloc_r+0x88>
 80060fa:	4629      	mov	r1, r5
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff ffbf 	bl	8006080 <sbrk_aligned>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	4604      	mov	r4, r0
 8006106:	d158      	bne.n	80061ba <_malloc_r+0xf6>
 8006108:	f8d8 4000 	ldr.w	r4, [r8]
 800610c:	4627      	mov	r7, r4
 800610e:	2f00      	cmp	r7, #0
 8006110:	d143      	bne.n	800619a <_malloc_r+0xd6>
 8006112:	2c00      	cmp	r4, #0
 8006114:	d04b      	beq.n	80061ae <_malloc_r+0xea>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	4639      	mov	r1, r7
 800611a:	4630      	mov	r0, r6
 800611c:	eb04 0903 	add.w	r9, r4, r3
 8006120:	f000 fc6c 	bl	80069fc <_sbrk_r>
 8006124:	4581      	cmp	r9, r0
 8006126:	d142      	bne.n	80061ae <_malloc_r+0xea>
 8006128:	6821      	ldr	r1, [r4, #0]
 800612a:	1a6d      	subs	r5, r5, r1
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ffa6 	bl	8006080 <sbrk_aligned>
 8006134:	3001      	adds	r0, #1
 8006136:	d03a      	beq.n	80061ae <_malloc_r+0xea>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	442b      	add	r3, r5
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	f8d8 3000 	ldr.w	r3, [r8]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	bb62      	cbnz	r2, 80061a0 <_malloc_r+0xdc>
 8006146:	f8c8 7000 	str.w	r7, [r8]
 800614a:	e00f      	b.n	800616c <_malloc_r+0xa8>
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	1b52      	subs	r2, r2, r5
 8006150:	d420      	bmi.n	8006194 <_malloc_r+0xd0>
 8006152:	2a0b      	cmp	r2, #11
 8006154:	d917      	bls.n	8006186 <_malloc_r+0xc2>
 8006156:	1961      	adds	r1, r4, r5
 8006158:	42a3      	cmp	r3, r4
 800615a:	6025      	str	r5, [r4, #0]
 800615c:	bf18      	it	ne
 800615e:	6059      	strne	r1, [r3, #4]
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	bf08      	it	eq
 8006164:	f8c8 1000 	streq.w	r1, [r8]
 8006168:	5162      	str	r2, [r4, r5]
 800616a:	604b      	str	r3, [r1, #4]
 800616c:	4630      	mov	r0, r6
 800616e:	f000 f82f 	bl	80061d0 <__malloc_unlock>
 8006172:	f104 000b 	add.w	r0, r4, #11
 8006176:	1d23      	adds	r3, r4, #4
 8006178:	f020 0007 	bic.w	r0, r0, #7
 800617c:	1ac2      	subs	r2, r0, r3
 800617e:	bf1c      	itt	ne
 8006180:	1a1b      	subne	r3, r3, r0
 8006182:	50a3      	strne	r3, [r4, r2]
 8006184:	e7af      	b.n	80060e6 <_malloc_r+0x22>
 8006186:	6862      	ldr	r2, [r4, #4]
 8006188:	42a3      	cmp	r3, r4
 800618a:	bf0c      	ite	eq
 800618c:	f8c8 2000 	streq.w	r2, [r8]
 8006190:	605a      	strne	r2, [r3, #4]
 8006192:	e7eb      	b.n	800616c <_malloc_r+0xa8>
 8006194:	4623      	mov	r3, r4
 8006196:	6864      	ldr	r4, [r4, #4]
 8006198:	e7ae      	b.n	80060f8 <_malloc_r+0x34>
 800619a:	463c      	mov	r4, r7
 800619c:	687f      	ldr	r7, [r7, #4]
 800619e:	e7b6      	b.n	800610e <_malloc_r+0x4a>
 80061a0:	461a      	mov	r2, r3
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d1fb      	bne.n	80061a0 <_malloc_r+0xdc>
 80061a8:	2300      	movs	r3, #0
 80061aa:	6053      	str	r3, [r2, #4]
 80061ac:	e7de      	b.n	800616c <_malloc_r+0xa8>
 80061ae:	230c      	movs	r3, #12
 80061b0:	6033      	str	r3, [r6, #0]
 80061b2:	4630      	mov	r0, r6
 80061b4:	f000 f80c 	bl	80061d0 <__malloc_unlock>
 80061b8:	e794      	b.n	80060e4 <_malloc_r+0x20>
 80061ba:	6005      	str	r5, [r0, #0]
 80061bc:	e7d6      	b.n	800616c <_malloc_r+0xa8>
 80061be:	bf00      	nop
 80061c0:	200042e8 	.word	0x200042e8

080061c4 <__malloc_lock>:
 80061c4:	4801      	ldr	r0, [pc, #4]	@ (80061cc <__malloc_lock+0x8>)
 80061c6:	f7ff bf00 	b.w	8005fca <__retarget_lock_acquire_recursive>
 80061ca:	bf00      	nop
 80061cc:	200042e0 	.word	0x200042e0

080061d0 <__malloc_unlock>:
 80061d0:	4801      	ldr	r0, [pc, #4]	@ (80061d8 <__malloc_unlock+0x8>)
 80061d2:	f7ff befb 	b.w	8005fcc <__retarget_lock_release_recursive>
 80061d6:	bf00      	nop
 80061d8:	200042e0 	.word	0x200042e0

080061dc <__sfputc_r>:
 80061dc:	6893      	ldr	r3, [r2, #8]
 80061de:	3b01      	subs	r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	b410      	push	{r4}
 80061e4:	6093      	str	r3, [r2, #8]
 80061e6:	da08      	bge.n	80061fa <__sfputc_r+0x1e>
 80061e8:	6994      	ldr	r4, [r2, #24]
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	db01      	blt.n	80061f2 <__sfputc_r+0x16>
 80061ee:	290a      	cmp	r1, #10
 80061f0:	d103      	bne.n	80061fa <__sfputc_r+0x1e>
 80061f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f6:	f000 bb6d 	b.w	80068d4 <__swbuf_r>
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	1c58      	adds	r0, r3, #1
 80061fe:	6010      	str	r0, [r2, #0]
 8006200:	7019      	strb	r1, [r3, #0]
 8006202:	4608      	mov	r0, r1
 8006204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006208:	4770      	bx	lr

0800620a <__sfputs_r>:
 800620a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	4614      	mov	r4, r2
 8006212:	18d5      	adds	r5, r2, r3
 8006214:	42ac      	cmp	r4, r5
 8006216:	d101      	bne.n	800621c <__sfputs_r+0x12>
 8006218:	2000      	movs	r0, #0
 800621a:	e007      	b.n	800622c <__sfputs_r+0x22>
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	463a      	mov	r2, r7
 8006222:	4630      	mov	r0, r6
 8006224:	f7ff ffda 	bl	80061dc <__sfputc_r>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d1f3      	bne.n	8006214 <__sfputs_r+0xa>
 800622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006230 <_vfiprintf_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	460d      	mov	r5, r1
 8006236:	b09d      	sub	sp, #116	@ 0x74
 8006238:	4614      	mov	r4, r2
 800623a:	4698      	mov	r8, r3
 800623c:	4606      	mov	r6, r0
 800623e:	b118      	cbz	r0, 8006248 <_vfiprintf_r+0x18>
 8006240:	6a03      	ldr	r3, [r0, #32]
 8006242:	b90b      	cbnz	r3, 8006248 <_vfiprintf_r+0x18>
 8006244:	f7ff fdbc 	bl	8005dc0 <__sinit>
 8006248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624a:	07d9      	lsls	r1, r3, #31
 800624c:	d405      	bmi.n	800625a <_vfiprintf_r+0x2a>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	059a      	lsls	r2, r3, #22
 8006252:	d402      	bmi.n	800625a <_vfiprintf_r+0x2a>
 8006254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006256:	f7ff feb8 	bl	8005fca <__retarget_lock_acquire_recursive>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	071b      	lsls	r3, r3, #28
 800625e:	d501      	bpl.n	8006264 <_vfiprintf_r+0x34>
 8006260:	692b      	ldr	r3, [r5, #16]
 8006262:	b99b      	cbnz	r3, 800628c <_vfiprintf_r+0x5c>
 8006264:	4629      	mov	r1, r5
 8006266:	4630      	mov	r0, r6
 8006268:	f000 fb72 	bl	8006950 <__swsetup_r>
 800626c:	b170      	cbz	r0, 800628c <_vfiprintf_r+0x5c>
 800626e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006270:	07dc      	lsls	r4, r3, #31
 8006272:	d504      	bpl.n	800627e <_vfiprintf_r+0x4e>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	b01d      	add	sp, #116	@ 0x74
 800627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	0598      	lsls	r0, r3, #22
 8006282:	d4f7      	bmi.n	8006274 <_vfiprintf_r+0x44>
 8006284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006286:	f7ff fea1 	bl	8005fcc <__retarget_lock_release_recursive>
 800628a:	e7f3      	b.n	8006274 <_vfiprintf_r+0x44>
 800628c:	2300      	movs	r3, #0
 800628e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006290:	2320      	movs	r3, #32
 8006292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006296:	f8cd 800c 	str.w	r8, [sp, #12]
 800629a:	2330      	movs	r3, #48	@ 0x30
 800629c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800644c <_vfiprintf_r+0x21c>
 80062a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062a4:	f04f 0901 	mov.w	r9, #1
 80062a8:	4623      	mov	r3, r4
 80062aa:	469a      	mov	sl, r3
 80062ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b0:	b10a      	cbz	r2, 80062b6 <_vfiprintf_r+0x86>
 80062b2:	2a25      	cmp	r2, #37	@ 0x25
 80062b4:	d1f9      	bne.n	80062aa <_vfiprintf_r+0x7a>
 80062b6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ba:	d00b      	beq.n	80062d4 <_vfiprintf_r+0xa4>
 80062bc:	465b      	mov	r3, fp
 80062be:	4622      	mov	r2, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff ffa1 	bl	800620a <__sfputs_r>
 80062c8:	3001      	adds	r0, #1
 80062ca:	f000 80a7 	beq.w	800641c <_vfiprintf_r+0x1ec>
 80062ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062d0:	445a      	add	r2, fp
 80062d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062d4:	f89a 3000 	ldrb.w	r3, [sl]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 809f 	beq.w	800641c <_vfiprintf_r+0x1ec>
 80062de:	2300      	movs	r3, #0
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e8:	f10a 0a01 	add.w	sl, sl, #1
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	9307      	str	r3, [sp, #28]
 80062f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80062f6:	4654      	mov	r4, sl
 80062f8:	2205      	movs	r2, #5
 80062fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fe:	4853      	ldr	r0, [pc, #332]	@ (800644c <_vfiprintf_r+0x21c>)
 8006300:	f7f9 ff66 	bl	80001d0 <memchr>
 8006304:	9a04      	ldr	r2, [sp, #16]
 8006306:	b9d8      	cbnz	r0, 8006340 <_vfiprintf_r+0x110>
 8006308:	06d1      	lsls	r1, r2, #27
 800630a:	bf44      	itt	mi
 800630c:	2320      	movmi	r3, #32
 800630e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006312:	0713      	lsls	r3, r2, #28
 8006314:	bf44      	itt	mi
 8006316:	232b      	movmi	r3, #43	@ 0x2b
 8006318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800631c:	f89a 3000 	ldrb.w	r3, [sl]
 8006320:	2b2a      	cmp	r3, #42	@ 0x2a
 8006322:	d015      	beq.n	8006350 <_vfiprintf_r+0x120>
 8006324:	9a07      	ldr	r2, [sp, #28]
 8006326:	4654      	mov	r4, sl
 8006328:	2000      	movs	r0, #0
 800632a:	f04f 0c0a 	mov.w	ip, #10
 800632e:	4621      	mov	r1, r4
 8006330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006334:	3b30      	subs	r3, #48	@ 0x30
 8006336:	2b09      	cmp	r3, #9
 8006338:	d94b      	bls.n	80063d2 <_vfiprintf_r+0x1a2>
 800633a:	b1b0      	cbz	r0, 800636a <_vfiprintf_r+0x13a>
 800633c:	9207      	str	r2, [sp, #28]
 800633e:	e014      	b.n	800636a <_vfiprintf_r+0x13a>
 8006340:	eba0 0308 	sub.w	r3, r0, r8
 8006344:	fa09 f303 	lsl.w	r3, r9, r3
 8006348:	4313      	orrs	r3, r2
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	46a2      	mov	sl, r4
 800634e:	e7d2      	b.n	80062f6 <_vfiprintf_r+0xc6>
 8006350:	9b03      	ldr	r3, [sp, #12]
 8006352:	1d19      	adds	r1, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	9103      	str	r1, [sp, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	bfbb      	ittet	lt
 800635c:	425b      	neglt	r3, r3
 800635e:	f042 0202 	orrlt.w	r2, r2, #2
 8006362:	9307      	strge	r3, [sp, #28]
 8006364:	9307      	strlt	r3, [sp, #28]
 8006366:	bfb8      	it	lt
 8006368:	9204      	strlt	r2, [sp, #16]
 800636a:	7823      	ldrb	r3, [r4, #0]
 800636c:	2b2e      	cmp	r3, #46	@ 0x2e
 800636e:	d10a      	bne.n	8006386 <_vfiprintf_r+0x156>
 8006370:	7863      	ldrb	r3, [r4, #1]
 8006372:	2b2a      	cmp	r3, #42	@ 0x2a
 8006374:	d132      	bne.n	80063dc <_vfiprintf_r+0x1ac>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d1a      	adds	r2, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9203      	str	r2, [sp, #12]
 800637e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006382:	3402      	adds	r4, #2
 8006384:	9305      	str	r3, [sp, #20]
 8006386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800645c <_vfiprintf_r+0x22c>
 800638a:	7821      	ldrb	r1, [r4, #0]
 800638c:	2203      	movs	r2, #3
 800638e:	4650      	mov	r0, sl
 8006390:	f7f9 ff1e 	bl	80001d0 <memchr>
 8006394:	b138      	cbz	r0, 80063a6 <_vfiprintf_r+0x176>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	eba0 000a 	sub.w	r0, r0, sl
 800639c:	2240      	movs	r2, #64	@ 0x40
 800639e:	4082      	lsls	r2, r0
 80063a0:	4313      	orrs	r3, r2
 80063a2:	3401      	adds	r4, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4829      	ldr	r0, [pc, #164]	@ (8006450 <_vfiprintf_r+0x220>)
 80063ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063b0:	2206      	movs	r2, #6
 80063b2:	f7f9 ff0d 	bl	80001d0 <memchr>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d03f      	beq.n	800643a <_vfiprintf_r+0x20a>
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <_vfiprintf_r+0x224>)
 80063bc:	bb1b      	cbnz	r3, 8006406 <_vfiprintf_r+0x1d6>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	3307      	adds	r3, #7
 80063c2:	f023 0307 	bic.w	r3, r3, #7
 80063c6:	3308      	adds	r3, #8
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	443b      	add	r3, r7
 80063ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d0:	e76a      	b.n	80062a8 <_vfiprintf_r+0x78>
 80063d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d6:	460c      	mov	r4, r1
 80063d8:	2001      	movs	r0, #1
 80063da:	e7a8      	b.n	800632e <_vfiprintf_r+0xfe>
 80063dc:	2300      	movs	r3, #0
 80063de:	3401      	adds	r4, #1
 80063e0:	9305      	str	r3, [sp, #20]
 80063e2:	4619      	mov	r1, r3
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	4620      	mov	r0, r4
 80063ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ee:	3a30      	subs	r2, #48	@ 0x30
 80063f0:	2a09      	cmp	r2, #9
 80063f2:	d903      	bls.n	80063fc <_vfiprintf_r+0x1cc>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0c6      	beq.n	8006386 <_vfiprintf_r+0x156>
 80063f8:	9105      	str	r1, [sp, #20]
 80063fa:	e7c4      	b.n	8006386 <_vfiprintf_r+0x156>
 80063fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006400:	4604      	mov	r4, r0
 8006402:	2301      	movs	r3, #1
 8006404:	e7f0      	b.n	80063e8 <_vfiprintf_r+0x1b8>
 8006406:	ab03      	add	r3, sp, #12
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	462a      	mov	r2, r5
 800640c:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <_vfiprintf_r+0x228>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	4630      	mov	r0, r6
 8006412:	f3af 8000 	nop.w
 8006416:	4607      	mov	r7, r0
 8006418:	1c78      	adds	r0, r7, #1
 800641a:	d1d6      	bne.n	80063ca <_vfiprintf_r+0x19a>
 800641c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800641e:	07d9      	lsls	r1, r3, #31
 8006420:	d405      	bmi.n	800642e <_vfiprintf_r+0x1fe>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	059a      	lsls	r2, r3, #22
 8006426:	d402      	bmi.n	800642e <_vfiprintf_r+0x1fe>
 8006428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642a:	f7ff fdcf 	bl	8005fcc <__retarget_lock_release_recursive>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	065b      	lsls	r3, r3, #25
 8006432:	f53f af1f 	bmi.w	8006274 <_vfiprintf_r+0x44>
 8006436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006438:	e71e      	b.n	8006278 <_vfiprintf_r+0x48>
 800643a:	ab03      	add	r3, sp, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	462a      	mov	r2, r5
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <_vfiprintf_r+0x228>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f879 	bl	800653c <_printf_i>
 800644a:	e7e4      	b.n	8006416 <_vfiprintf_r+0x1e6>
 800644c:	08006cf0 	.word	0x08006cf0
 8006450:	08006cfa 	.word	0x08006cfa
 8006454:	00000000 	.word	0x00000000
 8006458:	0800620b 	.word	0x0800620b
 800645c:	08006cf6 	.word	0x08006cf6

08006460 <_printf_common>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	4616      	mov	r6, r2
 8006466:	4698      	mov	r8, r3
 8006468:	688a      	ldr	r2, [r1, #8]
 800646a:	690b      	ldr	r3, [r1, #16]
 800646c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006470:	4293      	cmp	r3, r2
 8006472:	bfb8      	it	lt
 8006474:	4613      	movlt	r3, r2
 8006476:	6033      	str	r3, [r6, #0]
 8006478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800647c:	4607      	mov	r7, r0
 800647e:	460c      	mov	r4, r1
 8006480:	b10a      	cbz	r2, 8006486 <_printf_common+0x26>
 8006482:	3301      	adds	r3, #1
 8006484:	6033      	str	r3, [r6, #0]
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	0699      	lsls	r1, r3, #26
 800648a:	bf42      	ittt	mi
 800648c:	6833      	ldrmi	r3, [r6, #0]
 800648e:	3302      	addmi	r3, #2
 8006490:	6033      	strmi	r3, [r6, #0]
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	f015 0506 	ands.w	r5, r5, #6
 8006498:	d106      	bne.n	80064a8 <_printf_common+0x48>
 800649a:	f104 0a19 	add.w	sl, r4, #25
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	6832      	ldr	r2, [r6, #0]
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	42ab      	cmp	r3, r5
 80064a6:	dc26      	bgt.n	80064f6 <_printf_common+0x96>
 80064a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	3b00      	subs	r3, #0
 80064b0:	bf18      	it	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	0692      	lsls	r2, r2, #26
 80064b6:	d42b      	bmi.n	8006510 <_printf_common+0xb0>
 80064b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064bc:	4641      	mov	r1, r8
 80064be:	4638      	mov	r0, r7
 80064c0:	47c8      	blx	r9
 80064c2:	3001      	adds	r0, #1
 80064c4:	d01e      	beq.n	8006504 <_printf_common+0xa4>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	6922      	ldr	r2, [r4, #16]
 80064ca:	f003 0306 	and.w	r3, r3, #6
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	bf02      	ittt	eq
 80064d2:	68e5      	ldreq	r5, [r4, #12]
 80064d4:	6833      	ldreq	r3, [r6, #0]
 80064d6:	1aed      	subeq	r5, r5, r3
 80064d8:	68a3      	ldr	r3, [r4, #8]
 80064da:	bf0c      	ite	eq
 80064dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e0:	2500      	movne	r5, #0
 80064e2:	4293      	cmp	r3, r2
 80064e4:	bfc4      	itt	gt
 80064e6:	1a9b      	subgt	r3, r3, r2
 80064e8:	18ed      	addgt	r5, r5, r3
 80064ea:	2600      	movs	r6, #0
 80064ec:	341a      	adds	r4, #26
 80064ee:	42b5      	cmp	r5, r6
 80064f0:	d11a      	bne.n	8006528 <_printf_common+0xc8>
 80064f2:	2000      	movs	r0, #0
 80064f4:	e008      	b.n	8006508 <_printf_common+0xa8>
 80064f6:	2301      	movs	r3, #1
 80064f8:	4652      	mov	r2, sl
 80064fa:	4641      	mov	r1, r8
 80064fc:	4638      	mov	r0, r7
 80064fe:	47c8      	blx	r9
 8006500:	3001      	adds	r0, #1
 8006502:	d103      	bne.n	800650c <_printf_common+0xac>
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	3501      	adds	r5, #1
 800650e:	e7c6      	b.n	800649e <_printf_common+0x3e>
 8006510:	18e1      	adds	r1, r4, r3
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	2030      	movs	r0, #48	@ 0x30
 8006516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800651a:	4422      	add	r2, r4
 800651c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006524:	3302      	adds	r3, #2
 8006526:	e7c7      	b.n	80064b8 <_printf_common+0x58>
 8006528:	2301      	movs	r3, #1
 800652a:	4622      	mov	r2, r4
 800652c:	4641      	mov	r1, r8
 800652e:	4638      	mov	r0, r7
 8006530:	47c8      	blx	r9
 8006532:	3001      	adds	r0, #1
 8006534:	d0e6      	beq.n	8006504 <_printf_common+0xa4>
 8006536:	3601      	adds	r6, #1
 8006538:	e7d9      	b.n	80064ee <_printf_common+0x8e>
	...

0800653c <_printf_i>:
 800653c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	7e0f      	ldrb	r7, [r1, #24]
 8006542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006544:	2f78      	cmp	r7, #120	@ 0x78
 8006546:	4691      	mov	r9, r2
 8006548:	4680      	mov	r8, r0
 800654a:	460c      	mov	r4, r1
 800654c:	469a      	mov	sl, r3
 800654e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006552:	d807      	bhi.n	8006564 <_printf_i+0x28>
 8006554:	2f62      	cmp	r7, #98	@ 0x62
 8006556:	d80a      	bhi.n	800656e <_printf_i+0x32>
 8006558:	2f00      	cmp	r7, #0
 800655a:	f000 80d2 	beq.w	8006702 <_printf_i+0x1c6>
 800655e:	2f58      	cmp	r7, #88	@ 0x58
 8006560:	f000 80b9 	beq.w	80066d6 <_printf_i+0x19a>
 8006564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800656c:	e03a      	b.n	80065e4 <_printf_i+0xa8>
 800656e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006572:	2b15      	cmp	r3, #21
 8006574:	d8f6      	bhi.n	8006564 <_printf_i+0x28>
 8006576:	a101      	add	r1, pc, #4	@ (adr r1, 800657c <_printf_i+0x40>)
 8006578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800657c:	080065d5 	.word	0x080065d5
 8006580:	080065e9 	.word	0x080065e9
 8006584:	08006565 	.word	0x08006565
 8006588:	08006565 	.word	0x08006565
 800658c:	08006565 	.word	0x08006565
 8006590:	08006565 	.word	0x08006565
 8006594:	080065e9 	.word	0x080065e9
 8006598:	08006565 	.word	0x08006565
 800659c:	08006565 	.word	0x08006565
 80065a0:	08006565 	.word	0x08006565
 80065a4:	08006565 	.word	0x08006565
 80065a8:	080066e9 	.word	0x080066e9
 80065ac:	08006613 	.word	0x08006613
 80065b0:	080066a3 	.word	0x080066a3
 80065b4:	08006565 	.word	0x08006565
 80065b8:	08006565 	.word	0x08006565
 80065bc:	0800670b 	.word	0x0800670b
 80065c0:	08006565 	.word	0x08006565
 80065c4:	08006613 	.word	0x08006613
 80065c8:	08006565 	.word	0x08006565
 80065cc:	08006565 	.word	0x08006565
 80065d0:	080066ab 	.word	0x080066ab
 80065d4:	6833      	ldr	r3, [r6, #0]
 80065d6:	1d1a      	adds	r2, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6032      	str	r2, [r6, #0]
 80065dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065e4:	2301      	movs	r3, #1
 80065e6:	e09d      	b.n	8006724 <_printf_i+0x1e8>
 80065e8:	6833      	ldr	r3, [r6, #0]
 80065ea:	6820      	ldr	r0, [r4, #0]
 80065ec:	1d19      	adds	r1, r3, #4
 80065ee:	6031      	str	r1, [r6, #0]
 80065f0:	0606      	lsls	r6, r0, #24
 80065f2:	d501      	bpl.n	80065f8 <_printf_i+0xbc>
 80065f4:	681d      	ldr	r5, [r3, #0]
 80065f6:	e003      	b.n	8006600 <_printf_i+0xc4>
 80065f8:	0645      	lsls	r5, r0, #25
 80065fa:	d5fb      	bpl.n	80065f4 <_printf_i+0xb8>
 80065fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006600:	2d00      	cmp	r5, #0
 8006602:	da03      	bge.n	800660c <_printf_i+0xd0>
 8006604:	232d      	movs	r3, #45	@ 0x2d
 8006606:	426d      	negs	r5, r5
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660c:	4859      	ldr	r0, [pc, #356]	@ (8006774 <_printf_i+0x238>)
 800660e:	230a      	movs	r3, #10
 8006610:	e011      	b.n	8006636 <_printf_i+0xfa>
 8006612:	6821      	ldr	r1, [r4, #0]
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	0608      	lsls	r0, r1, #24
 8006618:	f853 5b04 	ldr.w	r5, [r3], #4
 800661c:	d402      	bmi.n	8006624 <_printf_i+0xe8>
 800661e:	0649      	lsls	r1, r1, #25
 8006620:	bf48      	it	mi
 8006622:	b2ad      	uxthmi	r5, r5
 8006624:	2f6f      	cmp	r7, #111	@ 0x6f
 8006626:	4853      	ldr	r0, [pc, #332]	@ (8006774 <_printf_i+0x238>)
 8006628:	6033      	str	r3, [r6, #0]
 800662a:	bf14      	ite	ne
 800662c:	230a      	movne	r3, #10
 800662e:	2308      	moveq	r3, #8
 8006630:	2100      	movs	r1, #0
 8006632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006636:	6866      	ldr	r6, [r4, #4]
 8006638:	60a6      	str	r6, [r4, #8]
 800663a:	2e00      	cmp	r6, #0
 800663c:	bfa2      	ittt	ge
 800663e:	6821      	ldrge	r1, [r4, #0]
 8006640:	f021 0104 	bicge.w	r1, r1, #4
 8006644:	6021      	strge	r1, [r4, #0]
 8006646:	b90d      	cbnz	r5, 800664c <_printf_i+0x110>
 8006648:	2e00      	cmp	r6, #0
 800664a:	d04b      	beq.n	80066e4 <_printf_i+0x1a8>
 800664c:	4616      	mov	r6, r2
 800664e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006652:	fb03 5711 	mls	r7, r3, r1, r5
 8006656:	5dc7      	ldrb	r7, [r0, r7]
 8006658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800665c:	462f      	mov	r7, r5
 800665e:	42bb      	cmp	r3, r7
 8006660:	460d      	mov	r5, r1
 8006662:	d9f4      	bls.n	800664e <_printf_i+0x112>
 8006664:	2b08      	cmp	r3, #8
 8006666:	d10b      	bne.n	8006680 <_printf_i+0x144>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	07df      	lsls	r7, r3, #31
 800666c:	d508      	bpl.n	8006680 <_printf_i+0x144>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	6861      	ldr	r1, [r4, #4]
 8006672:	4299      	cmp	r1, r3
 8006674:	bfde      	ittt	le
 8006676:	2330      	movle	r3, #48	@ 0x30
 8006678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800667c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006680:	1b92      	subs	r2, r2, r6
 8006682:	6122      	str	r2, [r4, #16]
 8006684:	f8cd a000 	str.w	sl, [sp]
 8006688:	464b      	mov	r3, r9
 800668a:	aa03      	add	r2, sp, #12
 800668c:	4621      	mov	r1, r4
 800668e:	4640      	mov	r0, r8
 8006690:	f7ff fee6 	bl	8006460 <_printf_common>
 8006694:	3001      	adds	r0, #1
 8006696:	d14a      	bne.n	800672e <_printf_i+0x1f2>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295
 800669c:	b004      	add	sp, #16
 800669e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	f043 0320 	orr.w	r3, r3, #32
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	4833      	ldr	r0, [pc, #204]	@ (8006778 <_printf_i+0x23c>)
 80066ac:	2778      	movs	r7, #120	@ 0x78
 80066ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	6831      	ldr	r1, [r6, #0]
 80066b6:	061f      	lsls	r7, r3, #24
 80066b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066bc:	d402      	bmi.n	80066c4 <_printf_i+0x188>
 80066be:	065f      	lsls	r7, r3, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2ad      	uxthmi	r5, r5
 80066c4:	6031      	str	r1, [r6, #0]
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	bf44      	itt	mi
 80066ca:	f043 0320 	orrmi.w	r3, r3, #32
 80066ce:	6023      	strmi	r3, [r4, #0]
 80066d0:	b11d      	cbz	r5, 80066da <_printf_i+0x19e>
 80066d2:	2310      	movs	r3, #16
 80066d4:	e7ac      	b.n	8006630 <_printf_i+0xf4>
 80066d6:	4827      	ldr	r0, [pc, #156]	@ (8006774 <_printf_i+0x238>)
 80066d8:	e7e9      	b.n	80066ae <_printf_i+0x172>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	f023 0320 	bic.w	r3, r3, #32
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	e7f6      	b.n	80066d2 <_printf_i+0x196>
 80066e4:	4616      	mov	r6, r2
 80066e6:	e7bd      	b.n	8006664 <_printf_i+0x128>
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	6961      	ldr	r1, [r4, #20]
 80066ee:	1d18      	adds	r0, r3, #4
 80066f0:	6030      	str	r0, [r6, #0]
 80066f2:	062e      	lsls	r6, r5, #24
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0x1c0>
 80066f8:	6019      	str	r1, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0x1c6>
 80066fc:	0668      	lsls	r0, r5, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0x1bc>
 8006700:	8019      	strh	r1, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	4616      	mov	r6, r2
 8006708:	e7bc      	b.n	8006684 <_printf_i+0x148>
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	1d1a      	adds	r2, r3, #4
 800670e:	6032      	str	r2, [r6, #0]
 8006710:	681e      	ldr	r6, [r3, #0]
 8006712:	6862      	ldr	r2, [r4, #4]
 8006714:	2100      	movs	r1, #0
 8006716:	4630      	mov	r0, r6
 8006718:	f7f9 fd5a 	bl	80001d0 <memchr>
 800671c:	b108      	cbz	r0, 8006722 <_printf_i+0x1e6>
 800671e:	1b80      	subs	r0, r0, r6
 8006720:	6060      	str	r0, [r4, #4]
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	2300      	movs	r3, #0
 8006728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800672c:	e7aa      	b.n	8006684 <_printf_i+0x148>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d0ad      	beq.n	8006698 <_printf_i+0x15c>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	079b      	lsls	r3, r3, #30
 8006740:	d413      	bmi.n	800676a <_printf_i+0x22e>
 8006742:	68e0      	ldr	r0, [r4, #12]
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	4298      	cmp	r0, r3
 8006748:	bfb8      	it	lt
 800674a:	4618      	movlt	r0, r3
 800674c:	e7a6      	b.n	800669c <_printf_i+0x160>
 800674e:	2301      	movs	r3, #1
 8006750:	4632      	mov	r2, r6
 8006752:	4649      	mov	r1, r9
 8006754:	4640      	mov	r0, r8
 8006756:	47d0      	blx	sl
 8006758:	3001      	adds	r0, #1
 800675a:	d09d      	beq.n	8006698 <_printf_i+0x15c>
 800675c:	3501      	adds	r5, #1
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	9903      	ldr	r1, [sp, #12]
 8006762:	1a5b      	subs	r3, r3, r1
 8006764:	42ab      	cmp	r3, r5
 8006766:	dcf2      	bgt.n	800674e <_printf_i+0x212>
 8006768:	e7eb      	b.n	8006742 <_printf_i+0x206>
 800676a:	2500      	movs	r5, #0
 800676c:	f104 0619 	add.w	r6, r4, #25
 8006770:	e7f5      	b.n	800675e <_printf_i+0x222>
 8006772:	bf00      	nop
 8006774:	08006d01 	.word	0x08006d01
 8006778:	08006d12 	.word	0x08006d12

0800677c <__sflush_r>:
 800677c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006784:	0716      	lsls	r6, r2, #28
 8006786:	4605      	mov	r5, r0
 8006788:	460c      	mov	r4, r1
 800678a:	d454      	bmi.n	8006836 <__sflush_r+0xba>
 800678c:	684b      	ldr	r3, [r1, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc02      	bgt.n	8006798 <__sflush_r+0x1c>
 8006792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd48      	ble.n	800682a <__sflush_r+0xae>
 8006798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800679a:	2e00      	cmp	r6, #0
 800679c:	d045      	beq.n	800682a <__sflush_r+0xae>
 800679e:	2300      	movs	r3, #0
 80067a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067a4:	682f      	ldr	r7, [r5, #0]
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	d030      	beq.n	800680e <__sflush_r+0x92>
 80067ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	0759      	lsls	r1, r3, #29
 80067b2:	d505      	bpl.n	80067c0 <__sflush_r+0x44>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	1ad2      	subs	r2, r2, r3
 80067b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067ba:	b10b      	cbz	r3, 80067c0 <__sflush_r+0x44>
 80067bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067c4:	6a21      	ldr	r1, [r4, #32]
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b0      	blx	r6
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	d106      	bne.n	80067de <__sflush_r+0x62>
 80067d0:	6829      	ldr	r1, [r5, #0]
 80067d2:	291d      	cmp	r1, #29
 80067d4:	d82b      	bhi.n	800682e <__sflush_r+0xb2>
 80067d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006880 <__sflush_r+0x104>)
 80067d8:	410a      	asrs	r2, r1
 80067da:	07d6      	lsls	r6, r2, #31
 80067dc:	d427      	bmi.n	800682e <__sflush_r+0xb2>
 80067de:	2200      	movs	r2, #0
 80067e0:	6062      	str	r2, [r4, #4]
 80067e2:	04d9      	lsls	r1, r3, #19
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	d504      	bpl.n	80067f4 <__sflush_r+0x78>
 80067ea:	1c42      	adds	r2, r0, #1
 80067ec:	d101      	bne.n	80067f2 <__sflush_r+0x76>
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	b903      	cbnz	r3, 80067f4 <__sflush_r+0x78>
 80067f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80067f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067f6:	602f      	str	r7, [r5, #0]
 80067f8:	b1b9      	cbz	r1, 800682a <__sflush_r+0xae>
 80067fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067fe:	4299      	cmp	r1, r3
 8006800:	d002      	beq.n	8006808 <__sflush_r+0x8c>
 8006802:	4628      	mov	r0, r5
 8006804:	f7ff fbf2 	bl	8005fec <_free_r>
 8006808:	2300      	movs	r3, #0
 800680a:	6363      	str	r3, [r4, #52]	@ 0x34
 800680c:	e00d      	b.n	800682a <__sflush_r+0xae>
 800680e:	2301      	movs	r3, #1
 8006810:	4628      	mov	r0, r5
 8006812:	47b0      	blx	r6
 8006814:	4602      	mov	r2, r0
 8006816:	1c50      	adds	r0, r2, #1
 8006818:	d1c9      	bne.n	80067ae <__sflush_r+0x32>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0c6      	beq.n	80067ae <__sflush_r+0x32>
 8006820:	2b1d      	cmp	r3, #29
 8006822:	d001      	beq.n	8006828 <__sflush_r+0xac>
 8006824:	2b16      	cmp	r3, #22
 8006826:	d11e      	bne.n	8006866 <__sflush_r+0xea>
 8006828:	602f      	str	r7, [r5, #0]
 800682a:	2000      	movs	r0, #0
 800682c:	e022      	b.n	8006874 <__sflush_r+0xf8>
 800682e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006832:	b21b      	sxth	r3, r3
 8006834:	e01b      	b.n	800686e <__sflush_r+0xf2>
 8006836:	690f      	ldr	r7, [r1, #16]
 8006838:	2f00      	cmp	r7, #0
 800683a:	d0f6      	beq.n	800682a <__sflush_r+0xae>
 800683c:	0793      	lsls	r3, r2, #30
 800683e:	680e      	ldr	r6, [r1, #0]
 8006840:	bf08      	it	eq
 8006842:	694b      	ldreq	r3, [r1, #20]
 8006844:	600f      	str	r7, [r1, #0]
 8006846:	bf18      	it	ne
 8006848:	2300      	movne	r3, #0
 800684a:	eba6 0807 	sub.w	r8, r6, r7
 800684e:	608b      	str	r3, [r1, #8]
 8006850:	f1b8 0f00 	cmp.w	r8, #0
 8006854:	dde9      	ble.n	800682a <__sflush_r+0xae>
 8006856:	6a21      	ldr	r1, [r4, #32]
 8006858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800685a:	4643      	mov	r3, r8
 800685c:	463a      	mov	r2, r7
 800685e:	4628      	mov	r0, r5
 8006860:	47b0      	blx	r6
 8006862:	2800      	cmp	r0, #0
 8006864:	dc08      	bgt.n	8006878 <__sflush_r+0xfc>
 8006866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006878:	4407      	add	r7, r0
 800687a:	eba8 0800 	sub.w	r8, r8, r0
 800687e:	e7e7      	b.n	8006850 <__sflush_r+0xd4>
 8006880:	dfbffffe 	.word	0xdfbffffe

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b913      	cbnz	r3, 8006894 <_fflush_r+0x10>
 800688e:	2500      	movs	r5, #0
 8006890:	4628      	mov	r0, r5
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	b118      	cbz	r0, 800689e <_fflush_r+0x1a>
 8006896:	6a03      	ldr	r3, [r0, #32]
 8006898:	b90b      	cbnz	r3, 800689e <_fflush_r+0x1a>
 800689a:	f7ff fa91 	bl	8005dc0 <__sinit>
 800689e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f3      	beq.n	800688e <_fflush_r+0xa>
 80068a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068a8:	07d0      	lsls	r0, r2, #31
 80068aa:	d404      	bmi.n	80068b6 <_fflush_r+0x32>
 80068ac:	0599      	lsls	r1, r3, #22
 80068ae:	d402      	bmi.n	80068b6 <_fflush_r+0x32>
 80068b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068b2:	f7ff fb8a 	bl	8005fca <__retarget_lock_acquire_recursive>
 80068b6:	4628      	mov	r0, r5
 80068b8:	4621      	mov	r1, r4
 80068ba:	f7ff ff5f 	bl	800677c <__sflush_r>
 80068be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068c0:	07da      	lsls	r2, r3, #31
 80068c2:	4605      	mov	r5, r0
 80068c4:	d4e4      	bmi.n	8006890 <_fflush_r+0xc>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	059b      	lsls	r3, r3, #22
 80068ca:	d4e1      	bmi.n	8006890 <_fflush_r+0xc>
 80068cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ce:	f7ff fb7d 	bl	8005fcc <__retarget_lock_release_recursive>
 80068d2:	e7dd      	b.n	8006890 <_fflush_r+0xc>

080068d4 <__swbuf_r>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	460e      	mov	r6, r1
 80068d8:	4614      	mov	r4, r2
 80068da:	4605      	mov	r5, r0
 80068dc:	b118      	cbz	r0, 80068e6 <__swbuf_r+0x12>
 80068de:	6a03      	ldr	r3, [r0, #32]
 80068e0:	b90b      	cbnz	r3, 80068e6 <__swbuf_r+0x12>
 80068e2:	f7ff fa6d 	bl	8005dc0 <__sinit>
 80068e6:	69a3      	ldr	r3, [r4, #24]
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	071a      	lsls	r2, r3, #28
 80068ee:	d501      	bpl.n	80068f4 <__swbuf_r+0x20>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	b943      	cbnz	r3, 8006906 <__swbuf_r+0x32>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f82a 	bl	8006950 <__swsetup_r>
 80068fc:	b118      	cbz	r0, 8006906 <__swbuf_r+0x32>
 80068fe:	f04f 37ff 	mov.w	r7, #4294967295
 8006902:	4638      	mov	r0, r7
 8006904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	1a98      	subs	r0, r3, r2
 800690c:	6963      	ldr	r3, [r4, #20]
 800690e:	b2f6      	uxtb	r6, r6
 8006910:	4283      	cmp	r3, r0
 8006912:	4637      	mov	r7, r6
 8006914:	dc05      	bgt.n	8006922 <__swbuf_r+0x4e>
 8006916:	4621      	mov	r1, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f7ff ffb3 	bl	8006884 <_fflush_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	d1ed      	bne.n	80068fe <__swbuf_r+0x2a>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	3b01      	subs	r3, #1
 8006926:	60a3      	str	r3, [r4, #8]
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	6022      	str	r2, [r4, #0]
 800692e:	701e      	strb	r6, [r3, #0]
 8006930:	6962      	ldr	r2, [r4, #20]
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	429a      	cmp	r2, r3
 8006936:	d004      	beq.n	8006942 <__swbuf_r+0x6e>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d5e1      	bpl.n	8006902 <__swbuf_r+0x2e>
 800693e:	2e0a      	cmp	r6, #10
 8006940:	d1df      	bne.n	8006902 <__swbuf_r+0x2e>
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f7ff ff9d 	bl	8006884 <_fflush_r>
 800694a:	2800      	cmp	r0, #0
 800694c:	d0d9      	beq.n	8006902 <__swbuf_r+0x2e>
 800694e:	e7d6      	b.n	80068fe <__swbuf_r+0x2a>

08006950 <__swsetup_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4b29      	ldr	r3, [pc, #164]	@ (80069f8 <__swsetup_r+0xa8>)
 8006954:	4605      	mov	r5, r0
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	460c      	mov	r4, r1
 800695a:	b118      	cbz	r0, 8006964 <__swsetup_r+0x14>
 800695c:	6a03      	ldr	r3, [r0, #32]
 800695e:	b90b      	cbnz	r3, 8006964 <__swsetup_r+0x14>
 8006960:	f7ff fa2e 	bl	8005dc0 <__sinit>
 8006964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006968:	0719      	lsls	r1, r3, #28
 800696a:	d422      	bmi.n	80069b2 <__swsetup_r+0x62>
 800696c:	06da      	lsls	r2, r3, #27
 800696e:	d407      	bmi.n	8006980 <__swsetup_r+0x30>
 8006970:	2209      	movs	r2, #9
 8006972:	602a      	str	r2, [r5, #0]
 8006974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	e033      	b.n	80069e8 <__swsetup_r+0x98>
 8006980:	0758      	lsls	r0, r3, #29
 8006982:	d512      	bpl.n	80069aa <__swsetup_r+0x5a>
 8006984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006986:	b141      	cbz	r1, 800699a <__swsetup_r+0x4a>
 8006988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__swsetup_r+0x46>
 8006990:	4628      	mov	r0, r5
 8006992:	f7ff fb2b 	bl	8005fec <_free_r>
 8006996:	2300      	movs	r3, #0
 8006998:	6363      	str	r3, [r4, #52]	@ 0x34
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069a0:	81a3      	strh	r3, [r4, #12]
 80069a2:	2300      	movs	r3, #0
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	6923      	ldr	r3, [r4, #16]
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f043 0308 	orr.w	r3, r3, #8
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	b94b      	cbnz	r3, 80069ca <__swsetup_r+0x7a>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c0:	d003      	beq.n	80069ca <__swsetup_r+0x7a>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 f84f 	bl	8006a68 <__smakebuf_r>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	f013 0201 	ands.w	r2, r3, #1
 80069d2:	d00a      	beq.n	80069ea <__swsetup_r+0x9a>
 80069d4:	2200      	movs	r2, #0
 80069d6:	60a2      	str	r2, [r4, #8]
 80069d8:	6962      	ldr	r2, [r4, #20]
 80069da:	4252      	negs	r2, r2
 80069dc:	61a2      	str	r2, [r4, #24]
 80069de:	6922      	ldr	r2, [r4, #16]
 80069e0:	b942      	cbnz	r2, 80069f4 <__swsetup_r+0xa4>
 80069e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069e6:	d1c5      	bne.n	8006974 <__swsetup_r+0x24>
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	0799      	lsls	r1, r3, #30
 80069ec:	bf58      	it	pl
 80069ee:	6962      	ldrpl	r2, [r4, #20]
 80069f0:	60a2      	str	r2, [r4, #8]
 80069f2:	e7f4      	b.n	80069de <__swsetup_r+0x8e>
 80069f4:	2000      	movs	r0, #0
 80069f6:	e7f7      	b.n	80069e8 <__swsetup_r+0x98>
 80069f8:	2000001c 	.word	0x2000001c

080069fc <_sbrk_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4d06      	ldr	r5, [pc, #24]	@ (8006a18 <_sbrk_r+0x1c>)
 8006a00:	2300      	movs	r3, #0
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fa fd2c 	bl	8001464 <_sbrk>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_sbrk_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_sbrk_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	200042dc 	.word	0x200042dc

08006a1c <__swhatbuf_r>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	460c      	mov	r4, r1
 8006a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a24:	2900      	cmp	r1, #0
 8006a26:	b096      	sub	sp, #88	@ 0x58
 8006a28:	4615      	mov	r5, r2
 8006a2a:	461e      	mov	r6, r3
 8006a2c:	da0d      	bge.n	8006a4a <__swhatbuf_r+0x2e>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	bf14      	ite	ne
 8006a3a:	2340      	movne	r3, #64	@ 0x40
 8006a3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a40:	2000      	movs	r0, #0
 8006a42:	6031      	str	r1, [r6, #0]
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	b016      	add	sp, #88	@ 0x58
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	466a      	mov	r2, sp
 8006a4c:	f000 f848 	bl	8006ae0 <_fstat_r>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	dbec      	blt.n	8006a2e <__swhatbuf_r+0x12>
 8006a54:	9901      	ldr	r1, [sp, #4]
 8006a56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a5e:	4259      	negs	r1, r3
 8006a60:	4159      	adcs	r1, r3
 8006a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a66:	e7eb      	b.n	8006a40 <__swhatbuf_r+0x24>

08006a68 <__smakebuf_r>:
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6c:	079d      	lsls	r5, r3, #30
 8006a6e:	4606      	mov	r6, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	d507      	bpl.n	8006a84 <__smakebuf_r+0x1c>
 8006a74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	6163      	str	r3, [r4, #20]
 8006a80:	b003      	add	sp, #12
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a84:	ab01      	add	r3, sp, #4
 8006a86:	466a      	mov	r2, sp
 8006a88:	f7ff ffc8 	bl	8006a1c <__swhatbuf_r>
 8006a8c:	9f00      	ldr	r7, [sp, #0]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	4639      	mov	r1, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff fb16 	bl	80060c4 <_malloc_r>
 8006a98:	b948      	cbnz	r0, 8006aae <__smakebuf_r+0x46>
 8006a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9e:	059a      	lsls	r2, r3, #22
 8006aa0:	d4ee      	bmi.n	8006a80 <__smakebuf_r+0x18>
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	f043 0302 	orr.w	r3, r3, #2
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	e7e2      	b.n	8006a74 <__smakebuf_r+0xc>
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	6020      	str	r0, [r4, #0]
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	9b01      	ldr	r3, [sp, #4]
 8006aba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006abe:	b15b      	cbz	r3, 8006ad8 <__smakebuf_r+0x70>
 8006ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 f81d 	bl	8006b04 <_isatty_r>
 8006aca:	b128      	cbz	r0, 8006ad8 <__smakebuf_r+0x70>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	431d      	orrs	r5, r3
 8006adc:	81a5      	strh	r5, [r4, #12]
 8006ade:	e7cf      	b.n	8006a80 <__smakebuf_r+0x18>

08006ae0 <_fstat_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	@ (8006b00 <_fstat_r+0x20>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	f7fa fc90 	bl	8001412 <_fstat>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d102      	bne.n	8006afc <_fstat_r+0x1c>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	b103      	cbz	r3, 8006afc <_fstat_r+0x1c>
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	200042dc 	.word	0x200042dc

08006b04 <_isatty_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	@ (8006b20 <_isatty_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fa fc8f 	bl	8001432 <_isatty>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_isatty_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_isatty_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	200042dc 	.word	0x200042dc

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
